---
title: "Thesis"
author: "Han Chenyue"
format: pdf editor: visual
---


```{r, include=FALSE}
library(knitr)
library(tidyverse)
library(ggplot2)
library(readxl)
library(dplyr)
library(tidyr)
library(janitor)
library(lubridate)
library(kableExtra)
```

# ```{r}
# # Combine sheets into a single data frame
# file_path <- file_path <- "C:/Users/hn/OneDrive - University of Bath/Thesis/thesis_dataset/TTAS All data anon.xlsx"
# sheet_names <- c("Demographics", "PROMs ALL DATA", "BASMI data", "Highcost drug data")
# 
# # Perform full join
# data <- sheet_names %>%
#   map(read_excel, path = file_path) %>%
#   reduce(full_join, by = "TTAS_ID")
# 
# 
# ```

```{r}
# Load data
demographics_sheet_data <- read_excel("TTAS\ All\ data\ anon.xlsx", sheet = "Demographics")
prom_sheet_data <- read_excel("TTAS\ All\ data\ anon.xlsx", sheet = "PROMs\ ALL\ DATA")
basmi_sheet_data <- read_excel("TTAS\ All\ data\ anon.xlsx", sheet = "BASMI\ data")
drug_sheet_data <- read_excel("TTAS\ All\ data\ anon.xlsx", sheet = "Highcost\ drug\ data")

# Clean data
demographics_sheet_data <- clean_names(demographics_sheet_data)
prom_sheet_data <- clean_names(prom_sheet_data)
basmi_sheet_data <- clean_names(basmi_sheet_data)
drug_sheet_data <- clean_names(drug_sheet_data)
```

```{r}
# Data Cleaning
# 1. Convert all dates column to date type
# basmi_sheet_data$date <- as.Date(basmi_sheet_data$date, format = "%d/%m/%Y")
# prom_sheet_data$date <- as.Date(prom_sheet_data$date, format = "%d/%m/%Y")
# drug_sheet_data$start_date <- as.Date(drug_sheet_data$start_date, format = "%d/%m/%Y")
# drug_sheet_data$stop_date <- as.Date(drug_sheet_data$stop_date, format = "%d/%m/%Y")

# Ensure year_quit_smoking and year_quit_vaping is numeric
prom_sheet_data$year_quit_smoking <- as.numeric(prom_sheet_data$year_quit_smoking)
prom_sheet_data$year_quit_vaping <- as.numeric(prom_sheet_data$year_quit_vaping)

# Ensure that the date columns are consistent
colnames(prom_sheet_data)[colnames(prom_sheet_data) == "date"] <- "prom_datasheet_record_date"
colnames(basmi_sheet_data)[colnames(basmi_sheet_data) == "date"] <- "basmi_datasheet_record_date"
colnames(drug_sheet_data)[colnames(drug_sheet_data) == "start_date"] <- "drug_start_date"

# Convert all date columns to a consistent format
prom_sheet_data$prom_datasheet_record_date <- as.Date(prom_sheet_data$prom_datasheet_record_date, format = "%d/%m/%Y")
basmi_sheet_data$basmi_datasheet_record_date <- as.Date(basmi_sheet_data$basmi_datasheet_record_date, format = "%d/%m/%Y")
drug_sheet_data$drug_start_date <- as.Date(drug_sheet_data$drug_start_date, format = "%d/%m/%Y")
drug_sheet_data$stop_date <- as.Date(drug_sheet_data$stop_date, format = "%d/%m/%Y")
```

```{r}
# Ensure that categorical variables are factors
demographics_sheet_data$ttas_id <- as.factor(demographics_sheet_data$ttas_id)
demographics_sheet_data$diagnosis <- as.factor(demographics_sheet_data$diagnosis)
demographics_sheet_data$gender <- as.factor(demographics_sheet_data$gender)
demographics_sheet_data$hlab27status <- as.factor(demographics_sheet_data$hlab27status)

basmi_sheet_data$ttas_id <- as.factor(basmi_sheet_data$ttas_id)

prom_sheet_data$ttas_id <- as.factor(prom_sheet_data$ttas_id)
prom_sheet_data$type_of_appointment_4 <- as.factor(prom_sheet_data$type_of_appointment_4)
prom_sheet_data$type_of_appointment_5 <- as.factor(prom_sheet_data$type_of_appointment_5)
prom_sheet_data$do_you_smoke <- as.factor(prom_sheet_data$do_you_smoke)
prom_sheet_data$ecigarettes <- as.factor(prom_sheet_data$ecigarettes)

drug_sheet_data$ttas_id <- as.factor(drug_sheet_data$ttas_id)
drug_sheet_data$high_cost_drug_name <- as.factor(drug_sheet_data$high_cost_drug_name)
drug_sheet_data$x3 <- as.factor(drug_sheet_data$x3)
drug_sheet_data$high_cost_drug_stop_reason <- as.factor(drug_sheet_data$high_cost_drug_stop_reason)
drug_sheet_data$high_cost_drug_stop_reason_text <- as.factor(drug_sheet_data$high_cost_drug_stop_reason_text)
drug_sheet_data$comment <- as.factor(drug_sheet_data$comment)
```

```{r}
# Demographics data cleaning
# 1. Replace all unknown and blank values with NA
demographics_sheet_data <- demographics_sheet_data %>%
  mutate(across(where(is.character), ~na_if(., "Unknown"))) #%>%
  # mutate(across(where(is.character), ~na_if(., "")))
```

```{r}
# 2. Replace negative value of age_at_onset with positive equivalent
subset_data_375 <- demographics_sheet_data[demographics_sheet_data$ttas_id == 375, c("ttas_id", "age_at_onset")]
cat("Before, ttas_id for 375: ttas_id=", subset_data_375$ttas_id, ", age_at_onset=", subset_data_375$age_at_onset, "\n")
subset_data_623 <- demographics_sheet_data[demographics_sheet_data$ttas_id == 623, c("ttas_id", "age_at_onset")]
cat("Before, ttas_id for 623: ttas_id=", subset_data_623$ttas_id, ", age_at_onset=", subset_data_623$age_at_onset, "\n")

demographics_sheet_data$age_at_onset <- ifelse(demographics_sheet_data$age_at_onset < 0, demographics_sheet_data$age_at_onset * -1, demographics_sheet_data$age_at_onset)

subset_data_375 <- demographics_sheet_data[demographics_sheet_data$ttas_id == 375, c("ttas_id", "age_at_onset")]
cat("After, ttas_id for 375: ttas_id=", subset_data_375$ttas_id, ", age_at_onset=", subset_data_375$age_at_onset, "\n")
subset_data_623 <- demographics_sheet_data[demographics_sheet_data$ttas_id == 623, c("ttas_id", "age_at_onset")]
cat("After, ttas_id for 623: ttas_id=", subset_data_623$ttas_id, ", age_at_onset=", subset_data_623$age_at_onset, "\n")
```

```{r}
# Summary of demographics_sheet_data
kable(summary(demographics_sheet_data)) %>% kable_styling(bootstrap_options = "striped", full_width = F)

# Negative number spotted in age_at_onset
# Converting negative number to 0 for age_at_onset indicating that the patient has it since birth
demographics_sheet_data$age_at_onset <- ifelse(demographics_sheet_data$age_at_onset < 0, 0, demographics_sheet_data$age_at_onset)

kable(summary(demographics_sheet_data)) %>% kable_styling(bootstrap_options = "striped", full_width = F)
```

```{r}
# The final calculation for ASQOL is wrong, replace blank values with 0 and recalculate the final score for any rows with a non-blank value in as_qol
# Define a list of columns named 'asqol_cols' containing the columns that are used to calculate the final ASQOL score
asqol_cols <- c("asqol_1", "asqol_2", "asqol_3", "asqol_4", "asqol_5", "asqol_6", "asqol_7", "asqol_8", "asqol_9", "asqol_10", "asqol_11", "asqol_12", "asqol_13", "asqol_14", "asqol_15", "asqol_16", "asqol_17", "asqol_18, as_qol")
asqol_cols_1_to_18 <- c("asqol_1", "asqol_2", "asqol_3", "asqol_4", "asqol_5", "asqol_6", "asqol_7", "asqol_8", "asqol_9", "asqol_10", "asqol_11", "asqol_12", "asqol_13", "asqol_14", "asqol_15", "asqol_16", "asqol_17", "asqol_18")

# Count the number of rows where `AsQol` is not blank and store it in `non_blank_asqol_count_before`
non_blank_asqol_count_before <- sum(!is.na(prom_sheet_data$as_qol))

# Define the function to recalculate the final ASQOL score
recalculate_asqol <- function(row) {
  # Check if any of the columns in `asqol_cols` are blank for a single row
  # If blank, return NA
  if (all(is.na(row[asqol_cols]))) {
    return(NA)
  }
  
  # Else, fill the blank values with 0 for asqol_1 to asqol_18
  row[asqol_cols_1_to_18][is.na(row[asqol_cols_1_to_18])] <- 0
  
  # Calculate the final ASQOL score
  return(sum(as.numeric(row[asqol_cols_1_to_18])))
}

# Apply the recalculation function to each row and store the result in a new column `final_asqol`
prom_sheet_data$final_asqol <- apply(prom_sheet_data, 1, recalculate_asqol)


# Count the number of rows where `as_qol` is not blank and store it in `non_blank_asqol_count_after`
non_blank_asqol_count_after <- sum(!is.na(prom_sheet_data$as_qol))

# write_csv(prom_sheet_data, "checking_prom_sheet_data.csv")
```



```{r}
# Histogram for age_at_onset
hist(demographics_sheet_data$age_at_onset, main = "Histogram of Age at Onset", xlab = "Age at Onset")
```

```{r}
# Kernel density plot for age_at_onset
plot(density(demographics_sheet_data$age_at_onset, na.rm = TRUE), main = "Kernel Density Plot of Age at Onset", xlab = "Age at Onset")
```

```{r}
# Sorted data against index for age_at_onset
plot(sort(demographics_sheet_data$age_at_onset, na.last = NA), main = "Sorted Age at Onset", xlab = "Index", ylab = "Age at Onset")
```

```{r}
# Histogram for age_at_diag
hist(demographics_sheet_data$age_at_diag, main = "Histogram of Age at Diagnosis", xlab = "Age at Diagnosis")
```

```{r}
# Kernel density plot for age_at_diag
plot(density(demographics_sheet_data$age_at_diag, na.rm = TRUE), main = "Kernel Density Plot of Age at Diagnosis", xlab = "Age at Diagnosis")
```

```{r}
# Sorted data against index for age_at_diag
plot(sort(demographics_sheet_data$age_at_diag, na.last = NA), main = "Sorted Age at Diagnosis", xlab = "Index", ylab = "Age at Diagnosis")
```

```{r}
# Histogram for age_at_diag
hist(demographics_sheet_data$age_at_diag, main = "Histogram of Age at Diagnosis", xlab = "Age at Diagnosis")
```

```{r}
# Kernel density plot for age_at_diag
plot(density(demographics_sheet_data$age_at_diag, na.rm = TRUE), main = "Kernel Density Plot of Age at Diagnosis", xlab = "Age at Diagnosis")
```

```{r}
# Sorted data against index for age_at_diag
plot(sort(demographics_sheet_data$age_at_diag, na.last = NA), main = "Sorted Age at Diagnosis", xlab = "Index", ylab = "Age at Diagnosis")
```

```{r}
# Summary of basmi_sheet_data
kable(summary(basmi_sheet_data)) %>% kable_styling(bootstrap_options = "striped", full_width = F)

# Some basmi_patient_height doesn't make sense as it is too low
# 16 entries with basmi_patient_height < 100
# No changes made to the data for now as the BASMI score will be the core focus
```

```{r}
# Histogram for age_at_basmi
hist(basmi_sheet_data$age_at_basmi, main = "Histogram of Age at BASMI", xlab = "Age at BASMI")
```

```{r}
# Kernel density plot for age_at_basmi
plot(density(basmi_sheet_data$age_at_basmi, na.rm = TRUE), main = "Kernel Density Plot of Age at BASMI", xlab = "Age at BASMI")
```

```{r}
# Sorted data against index for age_at_basmi
plot(sort(basmi_sheet_data$age_at_basmi, na.last = NA), main = "Sorted Age at BASMI", xlab = "Index", ylab = "Age at BASMI")
```

```{r}
# Histogram for basmi_score
hist(basmi_sheet_data$basmi_score, main = "Histogram of BASMI Score", xlab = "BASMI Score")
```

```{r}
# Kernel density plot for basmi_score
plot(density(basmi_sheet_data$basmi_score, na.rm = TRUE), main = "Kernel Density Plot of BASMI Score", xlab = "BASMI Score")
```

```{r}
# Sorted data against index for basmi_score
plot(sort(basmi_sheet_data$basmi_score, na.last = NA), main = "Sorted BASMI Score", xlab = "Index", ylab = "BASMI Score")
```

```{r}
# Plotting the BASMI score against age_at_basmi
ggplot(basmi_sheet_data, aes(x = age_at_basmi, y = basmi_score)) +
  geom_point() +
  geom_smooth(method = "loess", se = FALSE, colour = "red") +
  geom_smooth(method = "lm", se = FALSE, colour = "blue") +
  labs(title = "BASMI Score against Age at BASMI", x = "Age at BASMI", y = "BASMI Score")
```

```{r}
lm_basmi <- lm(basmi_score ~ age_at_basmi, data = basmi_sheet_data)
summary(lm_basmi)
```

```{r}
# Summary of prom_sheet_data
kable(summary(prom_sheet_data)) %>% kable_styling(bootstrap_options = "striped", full_width = F)
```















```{r}
# Full join the data
combined_df <- full_join(basmi_sheet_data, prom_sheet_data, 
                         by = c("ttas_id",
                                "basmi_datasheet_record_date" = "prom_datasheet_record_date"))

combined_df <- combined_df %>% arrange(ttas_id, basmi_datasheet_record_date)

combined_df <- full_join(combined_df, drug_sheet_data, 
                         by = c("ttas_id",
                                "basmi_datasheet_record_date" = "drug_start_date"))

combined_df <- combined_df %>% arrange(ttas_id, basmi_datasheet_record_date)

combined_df <- full_join(combined_df, demographics_sheet_data, by = "ttas_id")

# Rename 'basmi_datasheet_record_date' to 'date'
combined_df <- combined_df %>% rename(date = basmi_datasheet_record_date)
```

```{r}
write_csv(combined_df, "test_combined_df.csv")
write_csv(drug_sheet_data, "test_drug_sheet_data.csv")
```

```{r}
drug_colours <- c(
"Remicade" = "blue", "Remsima" = "skyblue", "Cosentyx" = "orange", 
"Humira" = "green", "Cimzia" = "purple", "Imraldi" = "red",
"Enbrel" = "brown", "Yuflyma" = "yellow", "Benepali" = "pink",
"Amgevita" = "cyan", "Simponi" = "magenta", "Stelara" = "darkgreen",
"Xeljanz" = "gold", "Mabthera" = "darkblue", "Rinvoq" = "lightgreen",
"Otezla" = "gray", "Taltz" = "lightblue", "Bimzelx" = "darkred",
"RoActemra" = "turquoise"
)

timeline_data <- combined_df %>%
  select(ttas_id, date, basmi_score, basdai, basfi, patient_global, back_pain_at_night, back_pain_anytime, as_qol, facit, margolis) %>%
  # select(ttas_id, date, basmi_score, basdai, basfi, as_qol) %>%
  # pivot_longer(cols = c(basmi_score, basdai, basfi, as_qol),
  pivot_longer(cols = c(basmi_score, basdai, basfi, patient_global, back_pain_at_night, back_pain_anytime, as_qol, facit, margolis),
               names_to = "Measure",
               values_to = "Score")

timeline_data$date <- as.Date(timeline_data$date)
drug_sheet_data$drug_start_date <- as.Date(drug_sheet_data$drug_start_date)
drug_sheet_data$stop_date <- as.Date(drug_sheet_data$stop_date)
unique_ids <- unique(timeline_data$ttas_id)
```

```{r, warning=FALSE}
# output_folder <- "timeline_plots"
# dir.create(output_folder, showWarnings = FALSE)
# 
# # Create log file connection outside the loop
# log_file <- file(paste0(output_folder, "/plot_warnings.txt"), open = "wt")
# 
# # Function to capture and write all warnings to the log file
# log_warning <- function(w) {
#   cat(conditionMessage(w), file = log_file, append = TRUE, sep = "\n")
# }
# 
# for (current_id in unique_ids){
#   filtered_data <- timeline_data %>% filter(ttas_id == current_id)
#   filtered_drug_data <- drug_sheet_data %>% filter(ttas_id == current_id)
#   
#   # Replace NA stop_date values with a default (e.g., today's date)
#   filtered_drug_data <- filtered_drug_data %>%
#     mutate(
#       stop_date = if_else(
#         is.na(stop_date), 
#         Sys.Date(),  # Replace NA with today's date
#         stop_date
#       )
#     )
# 
#   # Check and log warnings in one step
#   if (nrow(filtered_data) == 0) {
#     cat(paste("No timeline data found for TTAS ID:", current_id), file = log_file, append = TRUE, sep = "\n")
#   } 
#   if (nrow(filtered_drug_data) == 0) {
#     cat(paste("No drug data found for TTAS ID:", current_id), file = log_file, append = TRUE, sep = "\n")
#   }
#   
# 
#   
#   plot <- ggplot(filtered_data, aes(x = date, y = Score, colour = Measure)) +
#     geom_point() +
#     geom_line() +
#     geom_rect(
#       data = filtered_drug_data,
#       inherit.aes = FALSE,
#       aes(
#         xmin = drug_start_date,
#         xmax = stop_date,
#         fill = x3
#       ),
#       ymin = -Inf,
#       ymax = Inf,
#       alpha = 0.5
#       ) +
#     # geom_text(
#     #   # Add drug names labels
#     #   data = filtered_drug_data,
#     #   inherit.aes = FALSE,
#     #   aes(
#     #     x = drug_start_date + (stop_date - drug_start_date) / 2,  # Calculate midpoint
#     #     y = Inf - 5,  # Offset from max Score
#     #     label = x3
#     #     ),
#     #   ) +
#     # Use a colour pallete with enough colours for all drugs
#     scale_fill_manual(values = drug_colours, na.value = "gray") +
#     facet_wrap(~ ttas_id, ncol = 1, scales = "free_y") +
#     labs(title = paste("Timeline plot for TTAS ID:", current_id))
#   
#   file_name <- paste(output_folder, "/timeline_plot_", current_id, ".png")
#   ggsave(file_name, plot, width = 10, height = 6, dpi = 300)
# }
# 
# # Close the log file connection
# close(log_file)
```

```{r, warning=FALSE}
# # Filtered out ttas_id with drugs only
# ids_with_drug_data <- unique(drug_sheet_data$ttas_id)
# ids_in_timeline_data <- unique(timeline_data$ttas_id)
# 
# ids_without_drug_data <- setdiff(ids_in_timeline_data, ids_with_drug_data)
# 
# # Filter out the ttas_id without drug data
# combined_df_id_with_drugs <- combined_df %>% filter(ttas_id %in% ids_with_drug_data)
# 
# write_csv(combined_df_id_with_drugs, "test_combined_df_id_with_drugs.csv")
# 
# output_folder <- "timeline_plots_drugs_only"
# dir.create(output_folder, showWarnings = FALSE)
# 
# unique_ids_drugs_only <- unique(combined_df_id_with_drugs$ttas_id)
# 
# cat("Checking number of unique ids with drugs data: ", length(unique(combined_df_id_with_drugs$ttas_id)), "\n")
# cat("Checking declared variable is the same: ", length(unique_ids_drugs_only))
# 
# for (current_id in unique_ids_drugs_only){
#   filtered_data <- timeline_data %>% filter(ttas_id == current_id)
#   filtered_drug_data <- drug_sheet_data %>% filter(ttas_id == current_id)
#   
#   # Replace NA stop_date values with a default (e.g., today's date)
#   filtered_drug_data <- filtered_drug_data %>%
#     mutate(
#       stop_date = if_else(
#         is.na(stop_date), 
#         Sys.Date(),  # Replace NA with today's date
#         stop_date
#       )
#     )
# 
#   # Check and log warnings in one step
#   if (nrow(filtered_data) == 0) {
#     cat(paste("No timeline data found for TTAS ID:", current_id), file = log_file, append = TRUE, sep = "\n")
#   } 
#   
#   plot <- ggplot(filtered_data, aes(x = date, y = Score, colour = Measure)) +
#     geom_point() +
#     geom_line() +
#     geom_rect(
#       data = filtered_drug_data,
#       inherit.aes = FALSE,
#       aes(
#         xmin = drug_start_date,
#         xmax = stop_date,
#         fill = x3
#       ),
#       ymin = -Inf,
#       ymax = Inf,
#       alpha = 0.5
#       ) +
#     # geom_text(
#     #   # Add drug names labels
#     #   data = filtered_drug_data,
#     #   inherit.aes = FALSE,
#     #   aes(
#     #     x = drug_start_date + (stop_date - drug_start_date) / 2,  # Calculate midpoint
#     #     y = Inf - 5,  # Offset from max Score
#     #     label = x3
#     #     ),
#     #   ) +
#     # Use a colour pallete with enough colours for all drugs
#     scale_fill_manual(values = drug_colours, na.value = "gray") +
#     facet_wrap(~ ttas_id, ncol = 1, scales = "free_y") +
#     labs(title = paste("Timeline plot for TTAS ID:", current_id))
#   
#   file_name <- paste(output_folder, "/timeline_plot_", current_id, ".png")
#   ggsave(file_name, plot, width = 10, height = 6, dpi = 300)
# }
```

```{r, warning=FALSE}
# Filtered out ttas_id with drugs only
ids_with_drug_data <- unique(drug_sheet_data$ttas_id)
ids_in_timeline_data <- unique(timeline_data$ttas_id)

ids_without_drug_data <- setdiff(ids_in_timeline_data, ids_with_drug_data)

# Filter out the ttas_id without drug data
combined_df_id_with_drugs <- combined_df %>% filter(ttas_id %in% ids_with_drug_data)

# write_csv(combined_df_id_with_drugs, "test_combined_df_id_with_drugs.csv")

output_folder_2 <- "timeline_plots_drugs_only_with_exclusions"
dir.create(output_folder_2, showWarnings = FALSE)

unique_ids_drugs_only <- unique(combined_df_id_with_drugs$ttas_id)

# Excluding the following ids
exclude_ids <- c(38, 555, 872, 924, 974, 988, 1028, 1032, 1035, 1038, 1051, 1069, 1144, 1149, 1162, 1197, 1212)

# Write csv without excluded ids
combined_df_id_with_drugs_excluded <- combined_df_id_with_drugs %>% filter(!ttas_id %in% exclude_ids)
# Select the columns to write to the csv
combined_df_id_with_drugs_excluded <- combined_df_id_with_drugs_excluded %>%
  select(ttas_id, gender, hlab27status, diagnosis, age_at_onset, age_at_diag, date, do_you_smoke, smoke_in_a_day, years_smoked, year_quit_smoking, ecigarettes, vape_in_a_day, years_vaped, year_quit_vaping, basmi_score, age_at_prom, basdai, basfi, patient_global, back_pain_at_night, back_pain_anytime, as_qol, jenkins_sleep_scale, wpai_1, wpai_2, wpai_3, wpai_4, wpai_5, wpai_6, facit, margolis, x3, stop_date, high_cost_drug_stop_reason, high_cost_drug_stop_reason_text, age_at_start_date, comment)
# write_csv(combined_df_id_with_drugs_excluded, "test_combined_df_id_with_drugs_excluded.csv")


for (current_id in unique_ids_drugs_only){
  
  if (current_id %in% exclude_ids) {
    next # Skip the current iteration if the current_id is in the exclude_ids list
  }
  
  filtered_data <- timeline_data %>% filter(ttas_id == current_id)
  filtered_drug_data <- drug_sheet_data %>% filter(ttas_id == current_id)
  
  # Replace NA stop_date values with a default (e.g., today's date)
  filtered_drug_data <- filtered_drug_data %>%
    mutate(
      stop_date = if_else(
        is.na(stop_date), 
        Sys.Date(),  # Replace NA with today's date
        stop_date
      )
    )

  # Check and log warnings in one step
  if (nrow(filtered_data) == 0) {
    cat(paste("No timeline data found for TTAS ID:", current_id), file = log_file, append = TRUE, sep = "\n")
  } 
  
  # Get patient info
  patient_info <- combined_df_id_with_drugs_excluded %>% filter(ttas_id == current_id) %>% 
    select(
      gender, hlab27status, diagnosis, age_at_onset, age_at_diag
    ) %>% 
    distinct() %>%
    unite("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis", gender, hlab27status, diagnosis, age_at_onset, age_at_diag, sep = " | ", remove = FALSE, na.rm = FALSE) %>% 
    pull("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis")
  
  plot <- ggplot(filtered_data, aes(x = date, y = Score, colour = Measure)) +
    geom_point() +
    geom_line() +
    geom_rect(
      data = filtered_drug_data,
      inherit.aes = FALSE,
      aes(
        xmin = drug_start_date,
        xmax = stop_date,
        fill = x3
      ),
      ymin = -Inf,
      ymax = Inf,
      alpha = 0.5
      ) +
    # geom_text(
    #   # Add drug names labels
    #   data = filtered_drug_data,
    #   inherit.aes = FALSE,
    #   aes(
    #     x = drug_start_date + (stop_date - drug_start_date) / 2,  # Calculate midpoint
    #     y = Inf - 5,  # Offset from max Score
    #     label = x3
    #     ),
    #   ) +
    # Use a colour pallete with enough colours for all drugs
    scale_fill_manual(values = drug_colours, na.value = "gray") +
    facet_wrap(~ ttas_id, ncol = 1, scales = "free_y") +
    labs(title = paste0("Timeline plot for TTAS ID:", current_id)) +
    ggtitle(paste0("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis: ", patient_info))
  
  file_name <- paste0(output_folder_2, "/", current_id, "_overall.png")
  ggsave(file_name, plot, width = 10, height = 6, dpi = 300)
}
```

```{r, warning=FALSE}
# Create plot for BASMI score only

timeline_data_basmi <- combined_df %>%
  select(ttas_id, date, basmi_score) %>%
  pivot_longer(cols = c(basmi_score),
               names_to = "Measure",
               values_to = "Score")


for (current_id in unique_ids_drugs_only){
  
  if (current_id %in% exclude_ids) {
    next # Skip the current iteration if the current_id is in the exclude_ids list
  }
  
  filtered_data <- timeline_data_basmi %>% filter(ttas_id == current_id)
  filtered_drug_data <- drug_sheet_data %>% filter(ttas_id == current_id)
  
  # Replace NA stop_date values with a default (e.g., today's date)
  filtered_drug_data <- filtered_drug_data %>%
    mutate(
      stop_date = if_else(
        is.na(stop_date), 
        Sys.Date(),  # Replace NA with today's date
        stop_date
      )
    )
  
  # Check and log warnings in one step
  if (nrow(filtered_data) == 0) {
    cat(paste("No timeline data found for TTAS ID:", current_id), file = log_file, append = TRUE, sep = "\n")
  }
  
  # Get patient info
  patient_info <- combined_df_id_with_drugs_excluded %>% filter(ttas_id == current_id) %>% 
    select(
      gender, hlab27status, diagnosis, age_at_onset, age_at_diag
    ) %>% 
    distinct() %>%
    unite("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis", gender, hlab27status, diagnosis, age_at_onset, age_at_diag, sep = " | ", remove = FALSE, na.rm = FALSE) %>% 
    pull("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis")
  
  plot <- ggplot(filtered_data, aes(x = date, y = Score)) +
    geom_point() +
    # geom_line() +
    geom_rect(
      data = filtered_drug_data,
      inherit.aes = FALSE,
      aes(
        xmin = drug_start_date,
        xmax = stop_date,
        fill = x3
      ),
      ymin = -Inf,
      ymax = Inf,
      alpha = 0.5
    ) +
    # geom_text(
    #   # Add drug names labels
    #   data = filtered_drug_data,
    #   inherit.aes = FALSE,
    #   aes(
    #     x = drug_start_date + (stop_date - drug_start_date) / 2,  # Calculate midpoint
    #     y = Inf - 5,  # Offset from max Score
    #     label = x3
    #   ),
    # ) +
    
    # Use a colour pallete with enough colours for all drugs
    scale_fill_manual(values = drug_colours, na.value = "gray") +
    facet_wrap(~ ttas_id, ncol = 1, scales = "free_y") +
    labs(title = paste0("BASMI timeline plot for TTAS ID:", current_id)) +
    ggtitle(paste0("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis: ", patient_info))
  
  file_name <- paste0(output_folder_2, "/", current_id, "_timeline_plot_basmi.png")
  ggsave(file_name, plot, width = 10, height = 6, dpi = 300)
}

```

```{r, warning=FALSE}
# Create plot for BASFI score only

timeline_data_basfi <- combined_df %>%
  select(ttas_id, date, basfi) %>%
  pivot_longer(cols = c(basfi),
               names_to = "Measure",
               values_to = "Score")

for (current_id in unique_ids_drugs_only){
  
  if (current_id %in% exclude_ids) {
    next # Skip the current iteration if the current_id is in the exclude_ids list
  }
  
  filtered_data <- timeline_data_basfi %>% filter(ttas_id == current_id)
  filtered_drug_data <- drug_sheet_data %>% filter(ttas_id == current_id)
  
  # Replace NA stop_date values with a default (e.g., today's date)
  filtered_drug_data <- filtered_drug_data %>%
    mutate(
      stop_date = if_else(
        is.na(stop_date), 
        Sys.Date(),  # Replace NA with today's date
        stop_date
      )
    )
  
  # Check and log warnings in one step
  if (nrow(filtered_data) == 0) {
    cat(paste("No timeline data found for TTAS ID:", current_id), file = log_file, append = TRUE, sep = "\n")
  }
  
  # Get patient info
  patient_info <- combined_df_id_with_drugs_excluded %>% filter(ttas_id == current_id) %>% 
    select(
      gender, hlab27status, diagnosis, age_at_onset, age_at_diag
    ) %>% 
    distinct() %>%
    unite("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis", gender, hlab27status, diagnosis, age_at_onset, age_at_diag, sep = " | ", remove = FALSE, na.rm = FALSE) %>% 
    pull("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis")
  
  plot <- ggplot(filtered_data, aes(x = date, y = Score)) +
    geom_point() +
    # geom_line() +
    geom_rect(
      data = filtered_drug_data,
      inherit.aes = FALSE,
      aes(
        xmin = drug_start_date,
        xmax = stop_date,
        fill = x3
      ),
      ymin = -Inf,
      ymax = Inf,
      alpha = 0.5
    ) +
    # geom_text(
    #   # Add drug names labels
    #   data = filtered_drug_data,
    #   inherit.aes = FALSE,
    #   aes(
    #     x = drug_start_date + (stop_date - drug_start_date) / 2,  # Calculate midpoint
    #     y = Inf - 5,  # Offset from max Score
    #     label = x3
    #   ),
    # ) +
    # Use a colour pallete with enough colours for all drugs
    scale_fill_manual(values = drug_colours, na.value = "gray") +
    facet_wrap(~ ttas_id, ncol = 1, scales = "free_y") +
    labs(title = paste0("BASFI timeline plot for TTAS ID:", current_id)) +
    ggtitle(paste0("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis: ", patient_info))
  
  file_name <- paste0(output_folder_2, "/", current_id, "_timeline_plot_basfi.png")
  ggsave(file_name, plot, width = 10, height = 6, dpi = 300)
}
```

```{r, warning=FALSE}
# Create plot for patient global score only

timeline_data_patient_global <- combined_df %>%
  select(ttas_id, date, patient_global) %>%
  pivot_longer(cols = c(patient_global),
               names_to = "Measure",
               values_to = "Score")

for (current_id in unique_ids_drugs_only){
  
  if (current_id %in% exclude_ids) {
    next # Skip the current iteration if the current_id is in the exclude_ids list
  }
  
  filtered_data <- timeline_data_patient_global %>% filter(ttas_id == current_id)
  filtered_drug_data <- drug_sheet_data %>% filter(ttas_id == current_id)
  
  # Replace NA stop_date values with a default (e.g., today's date)
  filtered_drug_data <- filtered_drug_data %>%
    mutate(
      stop_date = if_else(
        is.na(stop_date), 
        Sys.Date(),  # Replace NA with today's date
        stop_date
      )
    )
  
  # Check and log warnings in one step
  if (nrow(filtered_data) == 0) {
    cat(paste("No timeline data found for TTAS ID:", current_id), file = log_file, append = TRUE, sep = "\n")
  }
  
  # Get patient info
  patient_info <- combined_df_id_with_drugs_excluded %>% filter(ttas_id == current_id) %>% 
    select(
      gender, hlab27status, diagnosis, age_at_onset, age_at_diag
    ) %>% 
    distinct() %>%
    unite("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis", gender, hlab27status, diagnosis, age_at_onset, age_at_diag, sep = " | ", remove = FALSE, na.rm = FALSE) %>% 
    pull("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis")
  
  plot <- ggplot(filtered_data, aes(x = date, y = Score)) +
    geom_point() +
    # geom_line() +
    geom_rect(
      data = filtered_drug_data,
      inherit.aes = FALSE,
      aes(
        xmin = drug_start_date,
        xmax = stop_date,
        fill = x3
      ),
      ymin = -Inf,
      ymax = Inf,
      alpha = 0.5
    ) +
    # geom_text(
    #   # Add drug names labels
    #   data = filtered_drug_data,
    #   inherit.aes = FALSE,
    #   aes(
    #     x = drug_start_date + (stop_date - drug_start_date) / 2,  # Calculate midpoint
    #     y = Inf - 5,  # Offset from max Score
    #     label = x3
    #   ),
    # ) +
    # Use a colour pallete with enough colours for all drugs
    scale_fill_manual(values = drug_colours, na.value = "gray") +
    facet_wrap(~ ttas_id, ncol = 1, scales = "free_y") +
    labs(title = paste0("Patient Global timeline plot for TTAS ID:", current_id)) +
    ggtitle(paste0("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis: ", patient_info))
  
  file_name <- paste0(output_folder_2, "/", current_id, "_timeline_plot_patient_global.png")
  ggsave(file_name, plot, width = 10, height = 6, dpi = 300)
}
```

```{r, warning=FALSE}
# Create plot for back pain at night and back pain anytime score only

timeline_data_back_pain <- combined_df %>%
  select(ttas_id, date, back_pain_at_night, back_pain_anytime) %>%
  pivot_longer(cols = c(back_pain_at_night, back_pain_anytime),
               names_to = "Measure",
               values_to = "Score")

for (current_id in unique_ids_drugs_only){
  
  if (current_id %in% exclude_ids) {
    next # Skip the current iteration if the current_id is in the exclude_ids list
  }
  
  filtered_data <- timeline_data_back_pain %>% filter(ttas_id == current_id)
  filtered_drug_data <- drug_sheet_data %>% filter(ttas_id == current_id)
  
  # Replace NA stop_date values with a default (e.g., today's date)
  filtered_drug_data <- filtered_drug_data %>%
    mutate(
      stop_date = if_else(
        is.na(stop_date), 
        Sys.Date(),  # Replace NA with today's date
        stop_date
      )
    )
  
  # Check and log warnings in one step
  if (nrow(filtered_data) == 0) {
    cat(paste("No timeline data found for TTAS ID:", current_id), file = log_file, append = TRUE, sep = "\n")
  }

  # Get patient info
  patient_info <- combined_df_id_with_drugs_excluded %>% filter(ttas_id == current_id) %>% 
    select(
      gender, hlab27status, diagnosis, age_at_onset, age_at_diag
    ) %>% 
    distinct() %>%
    unite("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis", gender, hlab27status, diagnosis, age_at_onset, age_at_diag, sep = " | ", remove = FALSE, na.rm = FALSE) %>% 
    pull("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis")

  plot <- ggplot(filtered_data, aes(x = date, y = Score, colour = Measure)) +
    geom_point() +
    # geom_line() +
    geom_rect(
      data = filtered_drug_data,
      inherit.aes = FALSE,
      aes(
        xmin = drug_start_date,
        xmax = stop_date,
        fill = x3
      ),
      ymin = -Inf,
      ymax = Inf,
      alpha = 0.5
    ) +
    # geom_text(
    #   # Add drug names labels
    #   data = filtered_drug_data,
    #   inherit.aes = FALSE,
    #   aes(
    #     x = drug_start_date + (stop_date - drug_start_date) / 2,  # Calculate midpoint
    #     y = Inf - 5,  # Offset from max Score
    #     label = x3
    #   ),
    # ) +
    # Use a colour pallete with enough colours for all drugs
    scale_fill_manual(values = drug_colours, na.value = "gray") +
    facet_wrap(~ ttas_id, ncol = 1, scales = "free_y") +
    labs(title = paste0("Back Pain timeline plot for TTAS ID:", current_id)) +
    ggtitle(paste0("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis: ", patient_info))

  file_name <- paste0(output_folder_2, "/", current_id, "_timeline_plot_back_pain.png")
  ggsave(file_name, plot, width = 10, height = 6, dpi = 300)
}
```

```{r, warning=FALSE}
# Create plot for ASQoL score only

timeline_data_as_qol <- combined_df %>%
  select(ttas_id, date, as_qol) %>%
  pivot_longer(cols = c(as_qol),
               names_to = "Measure",
               values_to = "Score")

for (current_id in unique_ids_drugs_only){
  
  if (current_id %in% exclude_ids) {
    next # Skip the current iteration if the current_id is in the exclude_ids list
  }
  
  # Get patient info
  patient_info <- combined_df_id_with_drugs_excluded %>% filter(ttas_id == current_id) %>% 
    select(
      gender, hlab27status, diagnosis, age_at_onset, age_at_diag
    ) %>% 
    distinct() %>%
    unite("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis", gender, hlab27status, diagnosis, age_at_onset, age_at_diag, sep = " | ", remove = FALSE, na.rm = FALSE) %>% 
    pull("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis")
  
  filtered_data <- timeline_data_as_qol %>% filter(ttas_id == current_id)
  filtered_drug_data <- drug_sheet_data %>% filter(ttas_id == current_id)
  
  # Replace NA stop_date values with a default (e.g., today's date)
  filtered_drug_data <- filtered_drug_data %>%
    mutate(
      stop_date = if_else(
        is.na(stop_date), 
        Sys.Date(),  # Replace NA with today's date
        stop_date
      )
    )
  
  # Check and log warnings in one step
  if (nrow(filtered_data) == 0) {
    cat(paste("No timeline data found for TTAS ID:", current_id), file = log_file, append = TRUE, sep = "\n")
  }
  
  plot <- ggplot(filtered_data, aes(x = date, y = Score)) +
    geom_point() +
    # geom_line() +
    geom_rect(
      data = filtered_drug_data,
      inherit.aes = FALSE,
      aes(
        xmin = drug_start_date,
        xmax = stop_date,
        fill = x3
      ),
      ymin = -Inf,
      ymax = Inf,
      alpha = 0.5
    ) +
    # geom_text(
    #   # Add drug names labels
    #   data = filtered_drug_data,
    #   inherit.aes = FALSE,
    #   aes(
    #     x = drug_start_date + (stop_date - drug_start_date) / 2,  # Calculate midpoint
    #     y = Inf - 5,  # Offset from max Score
    #     label = x3
    #   ),
    # ) +
    # Use a colour pallete with enough colours for all drugs
    scale_fill_manual(values = drug_colours, na.value = "gray") +
    facet_wrap(~ ttas_id, ncol = 1, scales = "free_y") +
    labs(title = paste0("ASQoL timeline plot for TTAS ID:", current_id)) +
    ggtitle(paste0("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis: ", patient_info))
  
  file_name <- paste0(output_folder_2, "/", current_id, "_timeline_plot_asqol.png")
  ggsave(file_name, plot, width = 10, height = 6, dpi = 300)
}
```

```{r, warning=FALSE}
# Create plot for FACIT score only

timeline_data_facit <- combined_df %>%
  select(ttas_id, date, facit) %>%
  pivot_longer(cols = c(facit),
               names_to = "Measure",
               values_to = "Score")

for (current_id in unique_ids_drugs_only){
  
  if (current_id %in% exclude_ids) {
    next # Skip the current iteration if the current_id is in the exclude_ids list
  }
  
  # Get patient info
  patient_info <- combined_df_id_with_drugs_excluded %>% filter(ttas_id == current_id) %>% 
    select(
      gender, hlab27status, diagnosis, age_at_onset, age_at_diag
    ) %>% 
    distinct() %>%
    unite("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis", gender, hlab27status, diagnosis, age_at_onset, age_at_diag, sep = " | ", remove = FALSE, na.rm = FALSE) %>% 
    pull("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis")
  
  filtered_data <- timeline_data_facit %>% filter(ttas_id == current_id)
  filtered_drug_data <- drug_sheet_data %>% filter(ttas_id == current_id)
  
  # Replace NA stop_date values with a default (e.g., today's date)
  filtered_drug_data <- filtered_drug_data %>%
    mutate(
      stop_date = if_else(
        is.na(stop_date), 
        Sys.Date(),  # Replace NA with today's date
        stop_date
      )
    )
  
  # Check and log warnings in one step
  if (nrow(filtered_data) == 0) {
    cat(paste("No timeline data found for TTAS ID:", current_id), file = log_file, append = TRUE, sep = "\n")
  }

  # Get patient info
  patient_info <- combined_df_id_with_drugs_excluded %>% filter(ttas_id == current_id) %>% 
    select(
      gender, hlab27status, diagnosis, age_at_onset, age_at_diag
    ) %>% 
    distinct() %>%
    unite("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis", gender, hlab27status, diagnosis, age_at_onset, age_at_diag, sep = " | ", remove = FALSE, na.rm = FALSE) %>% 
    pull("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis")

  plot <- ggplot(filtered_data, aes(x = date, y = Score)) +
    geom_point() +
    # geom_line() +
    geom_rect(
      data = filtered_drug_data,
      inherit.aes = FALSE,
      aes(
        xmin = drug_start_date,
        xmax = stop_date,
        fill = x3
      ),
      ymin = -Inf,
      ymax = Inf,
      alpha = 0.5
    ) +
    # geom_text(
    #   # Add drug names labels
    #   data = filtered_drug_data,
    #   inherit.aes = FALSE,
    #   aes(
    #     x = drug_start_date + (stop_date - drug_start_date) / 2,  # Calculate midpoint
    #     y = Inf - 5,  # Offset from max Score
    #     label = x3
    #   ),
    # ) +
    # Use a colour pallete with enough colours for all drugs
    scale_fill_manual(values = drug_colours, na.value = "gray") +
    facet_wrap(~ ttas_id, ncol = 1, scales = "free_y") +
    labs(title = paste0("FACIT timeline plot for TTAS ID:", current_id)) +
    ggtitle(paste0("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis: ", patient_info))
  
  file_name <- paste0(output_folder_2, "/", current_id, "_timeline_plot_facit.png")
  ggsave(file_name, plot, width = 10, height = 6, dpi = 300)
}
```

```{r, warning=FALSE}
# Create plot for Margolis score only

timeline_data_margolis <- combined_df %>%
  select(ttas_id, date, margolis) %>%
  pivot_longer(cols = c(margolis),
               names_to = "Measure",
               values_to = "Score")

for (current_id in unique_ids_drugs_only){
  
  if (current_id %in% exclude_ids) {
    next # Skip the current iteration if the current_id is in the exclude_ids list
  }
  
  filtered_data <- timeline_data_margolis %>% filter(ttas_id == current_id)
  filtered_drug_data <- drug_sheet_data %>% filter(ttas_id == current_id)
  
  # Replace NA stop_date values with a default (e.g., today's date)
  filtered_drug_data <- filtered_drug_data %>%
    mutate(
      stop_date = if_else(
        is.na(stop_date), 
        Sys.Date(),  # Replace NA with today's date
        stop_date
      )
    )
  
  # Check and log warnings in one step
  if (nrow(filtered_data) == 0) {
    cat(paste("No timeline data found for TTAS ID:", current_id), file = log_file, append = TRUE, sep = "\n")
  }

  # Get patient info
  patient_info <- combined_df_id_with_drugs_excluded %>% filter(ttas_id == current_id) %>% 
    select(
      gender, hlab27status, diagnosis, age_at_onset, age_at_diag
    ) %>% 
    distinct() %>%
    unite("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis", gender, hlab27status, diagnosis, age_at_onset, age_at_diag, sep = " | ", remove = FALSE, na.rm = FALSE) %>% 
    pull("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis")
  
  plot <- ggplot(filtered_data, aes(x = date, y = Score)) +
    geom_point() +
    geom_line() +
    geom_rect(
      data = filtered_drug_data,
      inherit.aes = FALSE,
      aes(
        xmin = drug_start_date,
        xmax = stop_date,
        fill = x3
      ),
      ymin = -Inf,
      ymax = Inf,
      alpha = 0.5
    ) +
    # geom_text(
    #   # Add drug names labels
    #   data = filtered_drug_data,
    #   inherit.aes = FALSE,
    #   aes(
    #     x = drug_start_date + (stop_date - drug_start_date) / 2,  # Calculate midpoint
    #     y = Inf - 5,  # Offset from max Score
    #     label = x3
    #   ),
    # ) +
    # Use a colour pallete with enough colours for all drugs
    scale_fill_manual(values = drug_colours, na.value = "gray") +
    facet_wrap(~ ttas_id, ncol = 1, scales = "free_y") +
    labs(title = paste0("Margolis timeline plot for TTAS ID:", current_id)) +
    ggtitle(paste0("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis: ", patient_info))

  
  file_name <- paste0(output_folder_2, "/", current_id, "_timeline_plot_margolis.png")
  ggsave(file_name, plot, width = 10, height = 6, dpi = 300)
}
```

```{r, warning=FALSE}
# Create plot for WPAI only

timeline_data_wpai <- combined_df %>%
  select(ttas_id, date, wpai_1, wpai_2, wpai_3, wpai_4, wpai_5, wpai_6) %>%
  pivot_longer(cols = c(wpai_1, wpai_2, wpai_3, wpai_4, wpai_5, wpai_6),
               names_to = "Measure",
               values_to = "Score")

for (current_id in unique_ids_drugs_only){
  
  if (current_id %in% exclude_ids) {
    next # Skip the current iteration if the current_id is in the exclude_ids list
  }
  
  filtered_data <- timeline_data_wpai %>% filter(ttas_id == current_id)
  filtered_drug_data <- drug_sheet_data %>% filter(ttas_id == current_id)
  
  # Replace NA stop_date values with a default (e.g., today's date)
  filtered_drug_data <- filtered_drug_data %>%
    mutate(
      stop_date = if_else(
        is.na(stop_date), 
        Sys.Date(),  # Replace NA with today's date
        stop_date
      )
    )
  
  # Check and log warnings in one step
  if (nrow(filtered_data) == 0) {
    cat(paste("No timeline data found for TTAS ID:", current_id), file = log_file, append = TRUE, sep = "\n")
  }
  
  # Get patient info
  patient_info <- combined_df_id_with_drugs_excluded %>% filter(ttas_id == current_id) %>% 
    select(
      gender, hlab27status, diagnosis, age_at_onset, age_at_diag
    ) %>% 
    distinct() %>%
    unite("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis", gender, hlab27status, diagnosis, age_at_onset, age_at_diag, sep = " | ", remove = FALSE, na.rm = FALSE) %>% 
    pull("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis")

  plot <- ggplot(filtered_data, aes(x = date, y = Score, colour = Measure)) +
    geom_point() +
    geom_line() +
    geom_rect(
      data = filtered_drug_data,
      inherit.aes = FALSE,
      aes(
        xmin = drug_start_date,
        xmax = stop_date,
        fill = x3
      ),
      ymin = -Inf,
      ymax = Inf,
      alpha = 0.5
    ) +
    # geom_text(
    #   # Add drug names labels
    #   data = filtered_drug_data,
    #   inherit.aes = FALSE,
    #   aes(
    #     x = drug_start_date + (stop_date - drug_start_date) / 2,  # Calculate midpoint
    #     y = Inf - 5,  # Offset from max Score
    #     label = x3
    #   ),
    # ) +
    # Use a colour pallete with enough colours for all drugs
    scale_fill_manual(values = drug_colours, na.value = "gray") +
    facet_wrap(~ ttas_id, ncol = 1, scales = "free_y") +
    labs(title = paste0("WPAI timeline plot for TTAS ID:", current_id)) +
    ggtitle(paste0("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis: ", patient_info))

  
  file_name <- paste0(output_folder_2, "/", current_id, "_timeline_plot_wpai.png")
  ggsave(file_name, plot, width = 10, height = 6, dpi = 300)
}
```

```{r, warning=FALSE}
# Create plot for Jenkins Sleep Scale only

timeline_data_jenkins_sleep_scale <- combined_df %>%
  select(ttas_id, date, jenkins_sleep_scale) %>%
  pivot_longer(cols = c(jenkins_sleep_scale),
               names_to = "Measure",
               values_to = "Score")

for (current_id in unique_ids_drugs_only){
  
  if (current_id %in% exclude_ids) {
    next # Skip the current iteration if the current_id is in the exclude_ids list
  }
  
  filtered_data <- timeline_data_jenkins_sleep_scale %>% filter(ttas_id == current_id)
  filtered_drug_data <- drug_sheet_data %>% filter(ttas_id == current_id)
  
  # Replace NA stop_date values with a default (e.g., today's date)
  filtered_drug_data <- filtered_drug_data %>%
    mutate(
      stop_date = if_else(
        is.na(stop_date), 
        Sys.Date(),  # Replace NA with today's date
        stop_date
      )
    )
  
  # Check and log warnings in one step
  if (nrow(filtered_data) == 0) {
    cat(paste("No timeline data found for TTAS ID:", current_id), file = log_file, append = TRUE, sep = "\n")
  }

  # Get patient info
  patient_info <- combined_df_id_with_drugs_excluded %>% filter(ttas_id == current_id) %>% 
    select(
      gender, hlab27status, diagnosis, age_at_onset, age_at_diag
    ) %>% 
    distinct() %>%
    unite("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis", gender, hlab27status, diagnosis, age_at_onset, age_at_diag, sep = " | ", remove = FALSE, na.rm = FALSE) %>% 
    pull("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis")

  plot <- ggplot(filtered_data, aes(x = date, y = Score)) +
    geom_point() +
    # geom_line() +
    geom_rect(
      data = filtered_drug_data,
      inherit.aes = FALSE,
      aes(
        xmin = drug_start_date,
        xmax = stop_date,
        fill = x3
      ),
      ymin = -Inf,
      ymax = Inf,
      alpha = 0.5
    ) +
    # geom_text(
    #   # Add drug names labels
    #   data = filtered_drug_data,
    #   inherit.aes = FALSE,
    #   aes(
    #     x = drug_start_date + (stop_date - drug_start_date) / 2,  # Calculate midpoint
    #     y = Inf - 5,  # Offset from max Score
    #     label = x3
    #   ),
    # ) +
    # Use a colour pallete with enough colours for all drugs
    scale_fill_manual(values = drug_colours, na.value = "gray") +
    facet_wrap(~ ttas_id, ncol = 1, scales = "free_y") +
    labs(title = paste0("Jenkins Sleep Scale timeline plot for TTAS ID:", current_id)) +
    ggtitle(paste0("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis: ", patient_info))
  
  file_name <- paste0(output_folder_2, "/", current_id, "_timeline_plot_jenkins.png")
  ggsave(file_name, plot, width = 10, height = 6, dpi = 300)
}
```