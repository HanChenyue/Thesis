---
title: "Thesis"
author: "Han Chenyue"
format: pdf editor: visual
---


```{r, include=FALSE}
library(knitr)
library(tidyverse)
library(ggplot2)
library(readxl)
library(dplyr)
library(tidyr)
library(janitor)
library(lubridate)
library(kableExtra)
library(zoo)
library(lme4)
```

# ```{r}
# # Combine sheets into a single data frame
# file_path <- file_path <- "C:/Users/hn/OneDrive - University of Bath/Thesis/thesis_dataset/TTAS All data anon.xlsx"
# sheet_names <- c("Demographics", "PROMs ALL DATA", "BASMI data", "Highcost drug data")
# 
# # Perform full join
# data <- sheet_names %>%
#   map(read_excel, path = file_path) %>%
#   reduce(full_join, by = "TTAS_ID")
# 
# 
# ```

```{r}
# Load data
demographics_sheet_data <- read_excel("TTAS\ All\ data\ anon.xlsx", sheet = "Demographics")
prom_sheet_data <- read_excel("TTAS\ All\ data\ anon.xlsx", sheet = "PROMs\ ALL\ DATA")
basmi_sheet_data <- read_excel("TTAS\ All\ data\ anon.xlsx", sheet = "BASMI\ data")
drug_sheet_data <- read_excel("TTAS\ All\ data\ anon.xlsx", sheet = "Highcost\ drug\ data")

# Clean data
demographics_sheet_data <- clean_names(demographics_sheet_data)
prom_sheet_data <- clean_names(prom_sheet_data)
basmi_sheet_data <- clean_names(basmi_sheet_data)
drug_sheet_data <- clean_names(drug_sheet_data)
```

```{r}
# Data Cleaning
# 1. Convert all dates column to date type
# basmi_sheet_data$date <- as.Date(basmi_sheet_data$date, format = "%d/%m/%Y")
# prom_sheet_data$date <- as.Date(prom_sheet_data$date, format = "%d/%m/%Y")
# drug_sheet_data$start_date <- as.Date(drug_sheet_data$start_date, format = "%d/%m/%Y")
# drug_sheet_data$stop_date <- as.Date(drug_sheet_data$stop_date, format = "%d/%m/%Y")

# Ensure year_quit_smoking and year_quit_vaping is numeric
prom_sheet_data$year_quit_smoking <- as.numeric(prom_sheet_data$year_quit_smoking)
prom_sheet_data$year_quit_vaping <- as.numeric(prom_sheet_data$year_quit_vaping)

# Ensure that the date columns are consistent
colnames(prom_sheet_data)[colnames(prom_sheet_data) == "date"] <- "prom_datasheet_record_date"
colnames(basmi_sheet_data)[colnames(basmi_sheet_data) == "date"] <- "basmi_datasheet_record_date"
colnames(drug_sheet_data)[colnames(drug_sheet_data) == "start_date"] <- "drug_start_date"

# Convert all date columns to a consistent format
prom_sheet_data$prom_datasheet_record_date <- as.Date(prom_sheet_data$prom_datasheet_record_date, format = "%d/%m/%Y")
basmi_sheet_data$basmi_datasheet_record_date <- as.Date(basmi_sheet_data$basmi_datasheet_record_date, format = "%d/%m/%Y")
drug_sheet_data$drug_start_date <- as.Date(drug_sheet_data$drug_start_date, format = "%d/%m/%Y")
drug_sheet_data$stop_date <- as.Date(drug_sheet_data$stop_date, format = "%d/%m/%Y")
```

```{r}
# Ensure that categorical variables are factors
demographics_sheet_data$ttas_id <- as.factor(demographics_sheet_data$ttas_id)
demographics_sheet_data$diagnosis <- as.factor(demographics_sheet_data$diagnosis)
demographics_sheet_data$gender <- as.factor(demographics_sheet_data$gender)
demographics_sheet_data$hlab27status <- as.factor(demographics_sheet_data$hlab27status)

basmi_sheet_data$ttas_id <- as.factor(basmi_sheet_data$ttas_id)

prom_sheet_data$ttas_id <- as.factor(prom_sheet_data$ttas_id)
prom_sheet_data$type_of_appointment_4 <- as.factor(prom_sheet_data$type_of_appointment_4)
prom_sheet_data$type_of_appointment_5 <- as.factor(prom_sheet_data$type_of_appointment_5)
prom_sheet_data$do_you_smoke <- as.factor(prom_sheet_data$do_you_smoke)
prom_sheet_data$ecigarettes <- as.factor(prom_sheet_data$ecigarettes)

drug_sheet_data$ttas_id <- as.factor(drug_sheet_data$ttas_id)
drug_sheet_data$high_cost_drug_name <- as.factor(drug_sheet_data$high_cost_drug_name)
drug_sheet_data$x3 <- as.factor(drug_sheet_data$x3)
drug_sheet_data$high_cost_drug_stop_reason <- as.factor(drug_sheet_data$high_cost_drug_stop_reason)
drug_sheet_data$high_cost_drug_stop_reason_text <- as.factor(drug_sheet_data$high_cost_drug_stop_reason_text)
drug_sheet_data$comment <- as.factor(drug_sheet_data$comment)
```

```{r}
# Demographics data cleaning
# 1. Replace all unknown and blank values with NA
demographics_sheet_data <- demographics_sheet_data %>%
  mutate(across(where(is.character), ~na_if(., "Unknown"))) #%>%
  # mutate(across(where(is.character), ~na_if(., "")))
```

```{r}
# 2. Replace negative value of age_at_onset with NA for ttas_id 375 and 623
subset_data_375 <- demographics_sheet_data[demographics_sheet_data$ttas_id == 375, c("ttas_id", "age_at_onset")]
cat("Before, ttas_id for 375: ttas_id=", subset_data_375$ttas_id, ", age_at_onset=", subset_data_375$age_at_onset, "\n")
subset_data_623 <- demographics_sheet_data[demographics_sheet_data$ttas_id == 623, c("ttas_id", "age_at_onset")]
cat("Before, ttas_id for 623: ttas_id=", subset_data_623$ttas_id, ", age_at_onset=", subset_data_623$age_at_onset, "\n")

# Old code
# demographics_sheet_data$age_at_onset <- ifelse(demographics_sheet_data$age_at_onset < 0, demographics_sheet_data$age_at_onset * -1, demographics_sheet_data$age_at_onset)

# New code
demographics_sheet_data$age_at_onset <- ifelse(demographics_sheet_data$age_at_onset < 0, NA, demographics_sheet_data$age_at_onset)

subset_data_375 <- demographics_sheet_data[demographics_sheet_data$ttas_id == 375, c("ttas_id", "age_at_onset")]
cat("After, ttas_id for 375: ttas_id=", subset_data_375$ttas_id, ", age_at_onset=", subset_data_375$age_at_onset, "\n")
subset_data_623 <- demographics_sheet_data[demographics_sheet_data$ttas_id == 623, c("ttas_id", "age_at_onset")]
cat("After, ttas_id for 623: ttas_id=", subset_data_623$ttas_id, ", age_at_onset=", subset_data_623$age_at_onset, "\n")
```

```{r}
# Summary of demographics_sheet_data
kable(summary(demographics_sheet_data)) %>% kable_styling(bootstrap_options = "striped", full_width = F)
```

```{r}
# # Old code
# # The final calculation for ASQOL is wrong, replace blank values with 0 and recalculate the final score for any rows with a non-blank value in as_qol
# # Define a list of columns named 'asqol_cols' containing the columns that are used to calculate the final ASQOL score
# asqol_cols <- c("asqol_1", "asqol_2", "asqol_3", "asqol_4", "asqol_5", "asqol_6", "asqol_7", "asqol_8", "asqol_9", "asqol_10", "asqol_11", "asqol_12", "asqol_13", "asqol_14", "asqol_15", "asqol_16", "asqol_17", "asqol_18, as_qol")
# asqol_cols_1_to_18 <- c("asqol_1", "asqol_2", "asqol_3", "asqol_4", "asqol_5", "asqol_6", "asqol_7", "asqol_8", "asqol_9", "asqol_10", "asqol_11", "asqol_12", "asqol_13", "asqol_14", "asqol_15", "asqol_16", "asqol_17", "asqol_18")
# 
# # Define the function to recalculate the final ASQOL score
# recalculate_asqol <- function(row) {
#   # Check if any of the columns in `asqol_cols` are blank for a single row
#   # If blank, return NA
#   if (all(is.na(row[asqol_cols]))) {
#     return(NA)
# }
#   
#   # Else, fill the blank values with 0 for asqol_1 to asqol_18
#   row[asqol_cols_1_to_18][is.na(row[asqol_cols_1_to_18])] <- 0
#   
#   # Calculate the final ASQOL score
#   return(sum(as.numeric(row[asqol_cols_1_to_18])))
# }
# 
# # Apply the recalculation function to each row and store the result in a new column `final_asqol`
# prom_sheet_data$corrected_asqol <- apply(prom_sheet_data, 1, recalculate_asqol)
# 
# # Remake asqol_1 to asqol_18 a factor
# prom_sheet_data$asqol_1 <- as.factor(prom_sheet_data$asqol_1)
# prom_sheet_data$asqol_2 <- as.factor(prom_sheet_data$asqol_2)
# prom_sheet_data$asqol_3 <- as.factor(prom_sheet_data$asqol_3)
# prom_sheet_data$asqol_4 <- as.factor(prom_sheet_data$asqol_4)
# prom_sheet_data$asqol_5 <- as.factor(prom_sheet_data$asqol_5)
# prom_sheet_data$asqol_6 <- as.factor(prom_sheet_data$asqol_6)
# prom_sheet_data$asqol_7 <- as.factor(prom_sheet_data$asqol_7)
# prom_sheet_data$asqol_8 <- as.factor(prom_sheet_data$asqol_8)
# prom_sheet_data$asqol_9 <- as.factor(prom_sheet_data$asqol_9)
# prom_sheet_data$asqol_10 <- as.factor(prom_sheet_data$asqol_10)
# prom_sheet_data$asqol_11 <- as.factor(prom_sheet_data$asqol_11)
# prom_sheet_data$asqol_12 <- as.factor(prom_sheet_data$asqol_12)
# prom_sheet_data$asqol_13 <- as.factor(prom_sheet_data$asqol_13)
# prom_sheet_data$asqol_14 <- as.factor(prom_sheet_data$asqol_14)
# prom_sheet_data$asqol_15 <- as.factor(prom_sheet_data$asqol_15)
# prom_sheet_data$asqol_16 <- as.factor(prom_sheet_data$asqol_16)
# prom_sheet_data$asqol_17 <- as.factor(prom_sheet_data$asqol_17)
# prom_sheet_data$asqol_18 <- as.factor(prom_sheet_data$asqol_18)
# ```
# 
# ```{r}
# # The final calculation for FACIT is wrong, replace blank values with 0 and recalculate the final score for any rows with a non-blank value in facit
# # Define a list of columns named 'facit_cols' containing the columns that are used to calculate the final FACIT score
# facit_cols <- c("facit_1", "facit_2", "facit_3", "facit_4", "facit_5", "facit_6", "facit_7", "facit_8", "facit_9", "facit_10", "facit_11", "facit_12", "facit_13", "facit")
# facit_cols_1_to_13 <- c("facit_1", "facit_2", "facit_3", "facit_4", "facit_5", "facit_6", "facit_7", "facit_8", "facit_9", "facit_10", "facit_11", "facit_12", "facit_13")
# 
# # Define the function to recalculate the final FACIT score
# recalculate_facit <- function(row) {
#   # Check if any of the columns in `facit_cols` are blank for a single row
#   # If blank, return NA
#   if (all(is.na(row[facit_cols]))) {
#     return(NA)
# }
#   
#   # Else, fill the blank values with 0 for facit_1 to facit_13
#   row[facit_cols_1_to_13][is.na(row[facit_cols_1_to_13])] <- 0
#   
#   # Calculate the final FACIT score
#   return(sum(as.numeric(row[facit_cols_1_to_13])))
# }
# 
# # Apply the recalculation function to each row and store the result in a new column `final_facit`
# prom_sheet_data$corrected_facit <- apply(prom_sheet_data, 1, recalculate_facit)
```

```{r}
# TODO: Clean smoking and vaping columns
# Cleaning the do_you_smoke column
# Check for ttas_id that has more than one do_you_smoke column
# Assuming your data frame is named df
prom_sheet_data_clean_smoke <- prom_sheet_data %>%
  filter(!is.na(do_you_smoke)) %>%  # Remove rows where do_you_smoke is NA
  group_by(ttas_id) %>%
  filter(n_distinct(do_you_smoke) > 1) %>%
  distinct(ttas_id, do_you_smoke)
```

```{r}
# ASQOL
# Check for any negative values in as_qol and turn them into NA
prom_sheet_data$as_qol <- ifelse(prom_sheet_data$as_qol < 0, NA, prom_sheet_data$as_qol)
```

```{r}
# FACIT
# Check for any negative values in facit and turn them into NA
prom_sheet_data$facit <- ifelse(prom_sheet_data$facit < 0, NA, prom_sheet_data$facit)
```

```{r}
# # The final calculation for Jenkins Sleep Scale is wrong, replace blank values with 0 and recalculate the final score for any rows with a non-blank value in jenkins_sleep_scale
# # Define a list of columns named 'jenkins_sleep_scale_cols' containing the columns that are used to calculate the final Jenkins Sleep Scale score
# jenkins_sleep_scale_cols <- c("jenkins_sleep_1", "jenkins_sleep_2", "jenkins_sleep_3", "jenkins_sleep_4", "jenkins_sleep_scale")
# jenkins_sleep_scale_cols_1_to_4 <- c("jenkins_sleep_1", "jenkins_sleep_2", "jenkins_sleep_3", "jenkins_sleep_4")
# 
# # Define the function to recalculate the final Jenkins Sleep Scale score
# recalculate_jenkins_sleep_scale <- function(row) {
#   # Check if any of the columns in `jenkins_sleep_scale_cols` are blank for a single row
#   # If blank, return NA
#   if (all(is.na(row[jenkins_sleep_scale_cols]))) {
#     return(NA)
#   }
#   
#   # Else, fill the blank values with 0 for jenkins_sleep_1 to jenkins_sleep_4
#   row[jenkins_sleep_scale_cols_1_to_4][is.na(row[jenkins_sleep_scale_cols_1_to_4])] <- 0
#   
#   # Calculate the final Jenkins Sleep Scale score
#   return(sum(as.numeric(row[jenkins_sleep_scale_cols_1_to_4])))
# }
# 
# # Apply the recalculation function to each row and store the result in a new column `final_jenkins_sleep_scale`
# prom_sheet_data$corrected_jenkins_sleep_scale <- apply(prom_sheet_data, 1, recalculate_jenkins_sleep_scale)
```


```{r}
# Calculating the WPAI scoring
# Ensure wpai_1 to wpai_6 are numeric
prom_sheet_data$wpai_1 <- as.numeric(prom_sheet_data$wpai_1)
prom_sheet_data$wpai_2 <- as.numeric(prom_sheet_data$wpai_2)
prom_sheet_data$wpai_3 <- as.numeric(prom_sheet_data$wpai_3)
prom_sheet_data$wpai_4 <- as.numeric(prom_sheet_data$wpai_4)
prom_sheet_data$wpai_5 <- as.numeric(prom_sheet_data$wpai_5)
prom_sheet_data$wpai_6 <- as.numeric(prom_sheet_data$wpai_6)

# Presentism: wpai_5/10 x 100%
# Condition: wpai_1 needs to be 1 and wpai_4 needs to be non-zero
calc_presentism <- function(q1, q4, q5){
  if (!is.na(q1) & !is.na(q4) & !is.na(q5) & q1 == 1 & q4 != 0) {
    return((q5 / 10) * 100)
  }
  else {
    return(NA)
  }
}

# Absenteeism: (wpai_2 / (wpai_2 + wpai_3 + wpai_4)) x 100%
# Condition: wpai_1 needs to be 1
calc_absenteeism <- function(q1, q2, q3, q4){
  if (!is.na(q1) & !is.na(q2) & !is.na(q3) & !is.na(q4) & q1 == 1) {
    return((q2 / (q2 + q3 + q4)) * 100)
  }
  else {
    return(NA)
  }
}

# WPL
# Condition: wpai_1 needs to be 1 and wpai_4 needs to be non-zero
calc_wpl <- function(q1, q2, q4, q5){
  if (!is.na(q1) & !is.na(q2) & !is.na(q4) & !is.na(q5) & q1 == 1 & q4 != 0) {
    return(((q2 / (q2 + q4)) + ((1 - (q2 / (q2 + q4))) * (q5 / 10))) * 100)
  } else {
    return(NA)
  }
}

# Daily activity impairment
calc_daily_activity_impairment <- function(q6) {
  if (!is.na(q6)) {
    return((q6 / 10) * 100)
  } else {
    return(NA)
  }
}

# Create new columns for the WPAI scoring
prom_sheet_data <- prom_sheet_data %>% 
  rowwise() %>%
  mutate(
    presentism = calc_presentism(wpai_1, wpai_4, wpai_5),
    absenteeism = calc_absenteeism(wpai_1, wpai_2, wpai_3, wpai_4),
    wpl = calc_wpl(wpai_1, wpai_2, wpai_4, wpai_5),
    daily_activity_impairment = calc_daily_activity_impairment(wpai_6)
  ) %>% 
  ungroup()

# write_csv(prom_sheet_data, "check_wpai_data.csv")
```

```{r}
# Write to csv to check the data
# write_csv(prom_sheet_data, "data_check_prom_sheet_data.csv")
```

```{r}
# Histogram for age_at_onset
hist(demographics_sheet_data$age_at_onset, main = "Histogram of Age at Onset", xlab = "Age at Onset")
```

```{r}
# Kernel density plot for age_at_onset
plot(density(demographics_sheet_data$age_at_onset, na.rm = TRUE), main = "Kernel Density Plot of Age at Onset", xlab = "Age at Onset")
```

```{r}
# Sorted data against index for age_at_onset
plot(sort(demographics_sheet_data$age_at_onset, na.last = NA), main = "Sorted Age at Onset", xlab = "Index", ylab = "Age at Onset")
```

```{r}
# Histogram for age_at_diag
hist(demographics_sheet_data$age_at_diag, main = "Histogram of Age at Diagnosis", xlab = "Age at Diagnosis")
```

```{r}
# Kernel density plot for age_at_diag
plot(density(demographics_sheet_data$age_at_diag, na.rm = TRUE), main = "Kernel Density Plot of Age at Diagnosis", xlab = "Age at Diagnosis")
```

```{r}
# Sorted data against index for age_at_diag
plot(sort(demographics_sheet_data$age_at_diag, na.last = NA), main = "Sorted Age at Diagnosis", xlab = "Index", ylab = "Age at Diagnosis")
```

```{r}
# Histogram for age_at_diag
hist(demographics_sheet_data$age_at_diag, main = "Histogram of Age at Diagnosis", xlab = "Age at Diagnosis")
```

```{r}
# Kernel density plot for age_at_diag
plot(density(demographics_sheet_data$age_at_diag, na.rm = TRUE), main = "Kernel Density Plot of Age at Diagnosis", xlab = "Age at Diagnosis")
```

```{r}
# Sorted data against index for age_at_diag
plot(sort(demographics_sheet_data$age_at_diag, na.last = NA), main = "Sorted Age at Diagnosis", xlab = "Index", ylab = "Age at Diagnosis")
```

```{r}
# Summary of basmi_sheet_data
kable(summary(basmi_sheet_data)) %>% kable_styling(bootstrap_options = "striped", full_width = F)

# Some basmi_patient_height doesn't make sense as it is too low
# 16 entries with basmi_patient_height < 100
# No changes made to the data for now as the BASMI score will be the core focus
```

```{r}
# Histogram for age_at_basmi
hist(basmi_sheet_data$age_at_basmi, main = "Histogram of Age at BASMI", xlab = "Age at BASMI")
```

```{r}
# Kernel density plot for age_at_basmi
plot(density(basmi_sheet_data$age_at_basmi, na.rm = TRUE), main = "Kernel Density Plot of Age at BASMI", xlab = "Age at BASMI")
```

```{r}
# Sorted data against index for age_at_basmi
plot(sort(basmi_sheet_data$age_at_basmi, na.last = NA), main = "Sorted Age at BASMI", xlab = "Index", ylab = "Age at BASMI")
```

```{r}
# Histogram for basmi_score
hist(basmi_sheet_data$basmi_score, main = "Histogram of BASMI Score", xlab = "BASMI Score")
```

```{r}
# Kernel density plot for basmi_score
plot(density(basmi_sheet_data$basmi_score, na.rm = TRUE), main = "Kernel Density Plot of BASMI Score", xlab = "BASMI Score")
```

```{r}
# Sorted data against index for basmi_score
plot(sort(basmi_sheet_data$basmi_score, na.last = NA), main = "Sorted BASMI Score", xlab = "Index", ylab = "BASMI Score")
```

```{r}
# Plotting the BASMI score against age_at_basmi
ggplot(basmi_sheet_data, aes(x = age_at_basmi, y = basmi_score)) +
  geom_point() +
  geom_smooth(method = "loess", se = FALSE, colour = "red") +
  geom_smooth(method = "lm", se = FALSE, colour = "blue") +
  labs(title = "BASMI Score against Age at BASMI", x = "Age at BASMI", y = "BASMI Score")
```

```{r}
lm_basmi <- lm(basmi_score ~ age_at_basmi, data = basmi_sheet_data)
summary(lm_basmi)
```

```{r}
# Summary of prom_sheet_data
kable(summary(prom_sheet_data)) %>% kable_styling(bootstrap_options = "striped", full_width = F)
```















```{r}
# Full join the data
combined_df <- full_join(basmi_sheet_data, prom_sheet_data, 
                         by = c("ttas_id",
                                "basmi_datasheet_record_date" = "prom_datasheet_record_date"))

combined_df <- combined_df %>% arrange(ttas_id, basmi_datasheet_record_date)

combined_df <- full_join(combined_df, drug_sheet_data, 
                         by = c("ttas_id",
                                "basmi_datasheet_record_date" = "drug_start_date"))

combined_df <- combined_df %>% arrange(ttas_id, basmi_datasheet_record_date)

combined_df <- full_join(combined_df, demographics_sheet_data, by = "ttas_id")

# Rename 'basmi_datasheet_record_date' to 'date'
combined_df <- combined_df %>% rename(date = basmi_datasheet_record_date)
```

```{r}
write_csv(combined_df, "test_combined_df.csv")
write_csv(drug_sheet_data, "test_drug_sheet_data.csv")
```

```{r}
drug_colours <- c(
"Remicade" = "blue", "Remsima" = "skyblue", "Cosentyx" = "orange", 
"Humira" = "green", "Cimzia" = "purple", "Imraldi" = "red",
"Enbrel" = "brown", "Yuflyma" = "yellow", "Benepali" = "pink",
"Amgevita" = "cyan", "Simponi" = "magenta", "Stelara" = "darkgreen",
"Xeljanz" = "gold", "Mabthera" = "darkblue", "Rinvoq" = "lightgreen",
"Otezla" = "gray", "Taltz" = "lightblue", "Bimzelx" = "darkred",
"RoActemra" = "turquoise"
)

timeline_data <- combined_df %>%
  select(ttas_id, date, basmi_score, basdai, basfi, patient_global, back_pain_at_night, back_pain_anytime, as_qol, facit, jenkins_sleep_1, jenkins_sleep_2, jenkins_sleep_3, jenkins_sleep_4, presentism, absenteeism, wpl, daily_activity_impairment, margolis) %>%
  # select(ttas_id, date, basmi_score, basdai, basfi, as_qol) %>%
  # pivot_longer(cols = c(basmi_score, basdai, basfi, as_qol),
  pivot_longer(cols = c(basmi_score, basdai, basfi, patient_global, back_pain_at_night, back_pain_anytime, as_qol, facit, jenkins_sleep_1, jenkins_sleep_2, jenkins_sleep_3, jenkins_sleep_4, presentism, absenteeism, wpl, daily_activity_impairment, margolis),
               names_to = "Measure",
               values_to = "Score")

timeline_data$date <- as.Date(timeline_data$date)
drug_sheet_data$drug_start_date <- as.Date(drug_sheet_data$drug_start_date)
drug_sheet_data$stop_date <- as.Date(drug_sheet_data$stop_date)
unique_ids <- unique(timeline_data$ttas_id)
```

```{r, warning=FALSE}
# output_folder <- "timeline_plots"
# dir.create(output_folder, showWarnings = FALSE)
# 
# # Create log file connection outside the loop
# log_file <- file(paste0(output_folder, "/plot_warnings.txt"), open = "wt")
# 
# # Function to capture and write all warnings to the log file
# log_warning <- function(w) {
#   cat(conditionMessage(w), file = log_file, append = TRUE, sep = "\n")
# }
# 
# for (current_id in unique_ids){
#   filtered_data <- timeline_data %>% filter(ttas_id == current_id)
#   filtered_drug_data <- drug_sheet_data %>% filter(ttas_id == current_id)
#   
#   # Replace NA stop_date values with a default (e.g., today's date)
#   filtered_drug_data <- filtered_drug_data %>%
#     mutate(
#       stop_date = if_else(
#         is.na(stop_date), 
#         Sys.Date(),  # Replace NA with today's date
#         stop_date
#       )
#     )
# 
#   # Check and log warnings in one step
#   if (nrow(filtered_data) == 0) {
#     cat(paste("No timeline data found for TTAS ID:", current_id), file = log_file, append = TRUE, sep = "\n")
#   } 
#   if (nrow(filtered_drug_data) == 0) {
#     cat(paste("No drug data found for TTAS ID:", current_id), file = log_file, append = TRUE, sep = "\n")
#   }
#   
# 
#   
#   plot <- ggplot(filtered_data, aes(x = date, y = Score, colour = Measure)) +
#     geom_point() +
#     geom_line() +
#     geom_rect(
#       data = filtered_drug_data,
#       inherit.aes = FALSE,
#       aes(
#         xmin = drug_start_date,
#         xmax = stop_date,
#         fill = x3
#       ),
#       ymin = -Inf,
#       ymax = Inf,
#       alpha = 0.5
#       ) +
#     # geom_text(
#     #   # Add drug names labels
#     #   data = filtered_drug_data,
#     #   inherit.aes = FALSE,
#     #   aes(
#     #     x = drug_start_date + (stop_date - drug_start_date) / 2,  # Calculate midpoint
#     #     y = Inf - 5,  # Offset from max Score
#     #     label = x3
#     #     ),
#     #   ) +
#     # Use a colour pallete with enough colours for all drugs
#     scale_fill_manual(values = drug_colours, na.value = "gray") +
#     facet_wrap(~ ttas_id, ncol = 1, scales = "free_y") +
#     labs(title = paste("Timeline plot for TTAS ID:", current_id))
#   
#   file_name <- paste(output_folder, "/timeline_plot_", current_id, ".png")
#   ggsave(file_name, plot, width = 10, height = 6, dpi = 300)
# }
# 
# # Close the log file connection
# close(log_file)
```

```{r, warning=FALSE}
# # Filtered out ttas_id with drugs only
# ids_with_drug_data <- unique(drug_sheet_data$ttas_id)
# ids_in_timeline_data <- unique(timeline_data$ttas_id)
# 
# ids_without_drug_data <- setdiff(ids_in_timeline_data, ids_with_drug_data)
# 
# # Filter out the ttas_id without drug data
# combined_df_id_with_drugs <- combined_df %>% filter(ttas_id %in% ids_with_drug_data)
# 
# write_csv(combined_df_id_with_drugs, "test_combined_df_id_with_drugs.csv")
# 
# output_folder <- "timeline_plots_drugs_only"
# dir.create(output_folder, showWarnings = FALSE)
# 
# unique_ids_drugs_only <- unique(combined_df_id_with_drugs$ttas_id)
# 
# cat("Checking number of unique ids with drugs data: ", length(unique(combined_df_id_with_drugs$ttas_id)), "\n")
# cat("Checking declared variable is the same: ", length(unique_ids_drugs_only))
# 
# for (current_id in unique_ids_drugs_only){
#   filtered_data <- timeline_data %>% filter(ttas_id == current_id)
#   filtered_drug_data <- drug_sheet_data %>% filter(ttas_id == current_id)
#   
#   # Replace NA stop_date values with a default (e.g., today's date)
#   filtered_drug_data <- filtered_drug_data %>%
#     mutate(
#       stop_date = if_else(
#         is.na(stop_date), 
#         Sys.Date(),  # Replace NA with today's date
#         stop_date
#       )
#     )
# 
#   # Check and log warnings in one step
#   if (nrow(filtered_data) == 0) {
#     cat(paste("No timeline data found for TTAS ID:", current_id), file = log_file, append = TRUE, sep = "\n")
#   } 
#   
#   plot <- ggplot(filtered_data, aes(x = date, y = Score, colour = Measure)) +
#     geom_point() +
#     geom_line() +
#     geom_rect(
#       data = filtered_drug_data,
#       inherit.aes = FALSE,
#       aes(
#         xmin = drug_start_date,
#         xmax = stop_date,
#         fill = x3
#       ),
#       ymin = -Inf,
#       ymax = Inf,
#       alpha = 0.5
#       ) +
#     # geom_text(
#     #   # Add drug names labels
#     #   data = filtered_drug_data,
#     #   inherit.aes = FALSE,
#     #   aes(
#     #     x = drug_start_date + (stop_date - drug_start_date) / 2,  # Calculate midpoint
#     #     y = Inf - 5,  # Offset from max Score
#     #     label = x3
#     #     ),
#     #   ) +
#     # Use a colour pallete with enough colours for all drugs
#     scale_fill_manual(values = drug_colours, na.value = "gray") +
#     facet_wrap(~ ttas_id, ncol = 1, scales = "free_y") +
#     labs(title = paste("Timeline plot for TTAS ID:", current_id))
#   
#   file_name <- paste(output_folder, "/timeline_plot_", current_id, ".png")
#   ggsave(file_name, plot, width = 10, height = 6, dpi = 300)
# }
```

```{r, warning=FALSE}
# Filtered out ttas_id with drugs only
ids_with_drug_data <- unique(drug_sheet_data$ttas_id)
ids_in_timeline_data <- unique(timeline_data$ttas_id)

ids_without_drug_data <- setdiff(ids_in_timeline_data, ids_with_drug_data)

# Filter out the ttas_id without drug data
combined_df_id_with_drugs <- combined_df %>% filter(ttas_id %in% ids_with_drug_data)

# write_csv(combined_df_id_with_drugs, "test_combined_df_id_with_drugs.csv")

output_folder_2 <- "timeline_plots_drugs_only_with_exclusions"
dir.create(output_folder_2, showWarnings = FALSE)

unique_ids_drugs_only <- unique(combined_df_id_with_drugs$ttas_id)

# Excluding the following ids
exclude_ids <- c(38, 555, 872, 924, 974, 988, 1028, 1032, 1035, 1038, 1051, 1069, 1144, 1149, 1162, 1197, 1212)

# Write csv without excluded ids
combined_df_id_with_drugs_excluded <- combined_df_id_with_drugs %>% filter(!ttas_id %in% exclude_ids)
# Select the columns to write to the csv
combined_df_id_with_drugs_excluded <- combined_df_id_with_drugs_excluded %>%
  select(ttas_id, gender, hlab27status, diagnosis, age_at_onset, age_at_diag, date, do_you_smoke, smoke_in_a_day, years_smoked, year_quit_smoking, ecigarettes, vape_in_a_day, years_vaped, year_quit_vaping, basmi_score, age_at_prom, basdai, basfi, patient_global, back_pain_at_night, back_pain_anytime, as_qol, jenkins_sleep_1, jenkins_sleep_2, jenkins_sleep_3, jenkins_sleep_4, presentism, absenteeism, wpl, daily_activity_impairment, facit, margolis, x3, stop_date, high_cost_drug_stop_reason, high_cost_drug_stop_reason_text, age_at_start_date, comment)
write_csv(combined_df_id_with_drugs_excluded, "combined_df_id_with_drugs_excluded.csv")
```

```{r, warning=FALSE}
for (current_id in unique_ids_drugs_only){
  
  if (current_id %in% exclude_ids) {
    next # Skip the current iteration if the current_id is in the exclude_ids list
  }
  
  filtered_data <- timeline_data %>% filter(ttas_id == current_id)
  filtered_drug_data <- drug_sheet_data %>% filter(ttas_id == current_id)
  
  # Replace NA stop_date values with a default (e.g., today's date)
  filtered_drug_data <- filtered_drug_data %>%
    mutate(
      stop_date = if_else(
        is.na(stop_date), 
        Sys.Date(),  # Replace NA with today's date
        stop_date
      )
    )

  # Check and log warnings in one step
  if (nrow(filtered_data) == 0) {
    cat(paste("No timeline data found for TTAS ID:", current_id), file = log_file, append = TRUE, sep = "\n")
  } 
  
  # Get patient info
  patient_info <- combined_df_id_with_drugs_excluded %>% filter(ttas_id == current_id) %>% 
    select(
      gender, hlab27status, diagnosis, age_at_onset, age_at_diag
    ) %>% 
    distinct() %>%
    unite("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis", gender, hlab27status, diagnosis, age_at_onset, age_at_diag, sep = " | ", remove = FALSE, na.rm = FALSE) %>% 
    pull("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis")
  
  plot <- ggplot(filtered_data, aes(x = date, y = Score, colour = Measure)) +
    geom_point() +
    geom_line() +
    geom_rect(
      data = filtered_drug_data,
      inherit.aes = FALSE,
      aes(
        xmin = drug_start_date,
        xmax = stop_date,
        fill = x3
      ),
      ymin = -Inf,
      ymax = Inf,
      alpha = 0.5
      ) +
    # geom_text(
    #   # Add drug names labels
    #   data = filtered_drug_data,
    #   inherit.aes = FALSE,
    #   aes(
    #     x = drug_start_date + (stop_date - drug_start_date) / 2,  # Calculate midpoint
    #     y = Inf - 5,  # Offset from max Score
    #     label = x3
    #     ),
    #   ) +
    # Use a colour pallete with enough colours for all drugs
    scale_fill_manual(values = drug_colours, na.value = "gray") +
    facet_wrap(~ ttas_id, ncol = 1, scales = "free_y") +
    labs(title = paste0("Timeline plot for TTAS ID:", current_id)) +
    ggtitle(paste0("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis: ", patient_info))
  
  file_name <- paste0(output_folder_2, "/", current_id, "_overall.png")
  ggsave(file_name, plot, width = 10, height = 6, dpi = 300)
}
```

```{r, warning=FALSE}
# Create plot for BASMI score only

timeline_data_basmi <- combined_df %>%
  select(ttas_id, date, basmi_score) %>%
  pivot_longer(cols = c(basmi_score),
               names_to = "Measure",
               values_to = "Score")


for (current_id in unique_ids_drugs_only){
  
  if (current_id %in% exclude_ids) {
    next # Skip the current iteration if the current_id is in the exclude_ids list
  }
  
  filtered_data <- timeline_data_basmi %>% filter(ttas_id == current_id)
  filtered_drug_data <- drug_sheet_data %>% filter(ttas_id == current_id)
  
  # Replace NA stop_date values with a default (e.g., today's date)
  filtered_drug_data <- filtered_drug_data %>%
    mutate(
      stop_date = if_else(
        is.na(stop_date), 
        Sys.Date(),  # Replace NA with today's date
        stop_date
      )
    )
  
  # Check and log warnings in one step
  if (nrow(filtered_data) == 0) {
    cat(paste("No timeline data found for TTAS ID:", current_id), file = log_file, append = TRUE, sep = "\n")
  }
  
  # Get patient info
  patient_info <- combined_df_id_with_drugs_excluded %>% filter(ttas_id == current_id) %>% 
    select(
      gender, hlab27status, diagnosis, age_at_onset, age_at_diag
    ) %>% 
    distinct() %>%
    unite("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis", gender, hlab27status, diagnosis, age_at_onset, age_at_diag, sep = " | ", remove = FALSE, na.rm = FALSE) %>% 
    pull("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis")
  
  plot <- ggplot(filtered_data, aes(x = date, y = Score)) +
    geom_point() +
    geom_line() +
    geom_rect(
      data = filtered_drug_data,
      inherit.aes = FALSE,
      aes(
        xmin = drug_start_date,
        xmax = stop_date,
        fill = x3
      ),
      ymin = -Inf,
      ymax = Inf,
      alpha = 0.5
    ) +
    # geom_text(
    #   # Add drug names labels
    #   data = filtered_drug_data,
    #   inherit.aes = FALSE,
    #   aes(
    #     x = drug_start_date + (stop_date - drug_start_date) / 2,  # Calculate midpoint
    #     y = Inf - 5,  # Offset from max Score
    #     label = x3
    #   ),
    # ) +
    
    # Use a colour pallete with enough colours for all drugs
    scale_fill_manual(values = drug_colours, na.value = "gray") +
    facet_wrap(~ ttas_id, ncol = 1, scales = "free_y") +
    labs(title = paste0("BASMI timeline plot for TTAS ID:", current_id)) +
    ggtitle(paste0("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis: ", patient_info))
  
  file_name <- paste0(output_folder_2, "/", current_id, "_timeline_plot_basmi.png")
  ggsave(file_name, plot, width = 10, height = 6, dpi = 300)
}

```

```{r, warning=FALSE}
# Create plot for BASFI score only

timeline_data_basfi <- combined_df %>%
  select(ttas_id, date, basfi) %>%
  pivot_longer(cols = c(basfi),
               names_to = "Measure",
               values_to = "Score")

for (current_id in unique_ids_drugs_only){
  
  if (current_id %in% exclude_ids) {
    next # Skip the current iteration if the current_id is in the exclude_ids list
  }
  
  filtered_data <- timeline_data_basfi %>% filter(ttas_id == current_id)
  filtered_drug_data <- drug_sheet_data %>% filter(ttas_id == current_id)
  
  # Replace NA stop_date values with a default (e.g., today's date)
  filtered_drug_data <- filtered_drug_data %>%
    mutate(
      stop_date = if_else(
        is.na(stop_date), 
        Sys.Date(),  # Replace NA with today's date
        stop_date
      )
    )
  
  # Check and log warnings in one step
  if (nrow(filtered_data) == 0) {
    cat(paste("No timeline data found for TTAS ID:", current_id), file = log_file, append = TRUE, sep = "\n")
  }
  
  # Get patient info
  patient_info <- combined_df_id_with_drugs_excluded %>% filter(ttas_id == current_id) %>% 
    select(
      gender, hlab27status, diagnosis, age_at_onset, age_at_diag
    ) %>% 
    distinct() %>%
    unite("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis", gender, hlab27status, diagnosis, age_at_onset, age_at_diag, sep = " | ", remove = FALSE, na.rm = FALSE) %>% 
    pull("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis")
  
  plot <- ggplot(filtered_data, aes(x = date, y = Score)) +
    geom_point() +
    geom_line() +
    geom_rect(
      data = filtered_drug_data,
      inherit.aes = FALSE,
      aes(
        xmin = drug_start_date,
        xmax = stop_date,
        fill = x3
      ),
      ymin = -Inf,
      ymax = Inf,
      alpha = 0.5
    ) +
    # geom_text(
    #   # Add drug names labels
    #   data = filtered_drug_data,
    #   inherit.aes = FALSE,
    #   aes(
    #     x = drug_start_date + (stop_date - drug_start_date) / 2,  # Calculate midpoint
    #     y = Inf - 5,  # Offset from max Score
    #     label = x3
    #   ),
    # ) +
    # Use a colour pallete with enough colours for all drugs
    scale_fill_manual(values = drug_colours, na.value = "gray") +
    facet_wrap(~ ttas_id, ncol = 1, scales = "free_y") +
    labs(title = paste0("BASFI timeline plot for TTAS ID:", current_id)) +
    ggtitle(paste0("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis: ", patient_info))
  
  file_name <- paste0(output_folder_2, "/", current_id, "_timeline_plot_basfi.png")
  ggsave(file_name, plot, width = 10, height = 6, dpi = 300)
}
```

```{r, warning=FALSE}
# Create plot for patient global score only

timeline_data_patient_global <- combined_df %>%
  select(ttas_id, date, patient_global) %>%
  pivot_longer(cols = c(patient_global),
               names_to = "Measure",
               values_to = "Score")

for (current_id in unique_ids_drugs_only){
  
  if (current_id %in% exclude_ids) {
    next # Skip the current iteration if the current_id is in the exclude_ids list
  }
  
  filtered_data <- timeline_data_patient_global %>% filter(ttas_id == current_id)
  filtered_drug_data <- drug_sheet_data %>% filter(ttas_id == current_id)
  
  # Replace NA stop_date values with a default (e.g., today's date)
  filtered_drug_data <- filtered_drug_data %>%
    mutate(
      stop_date = if_else(
        is.na(stop_date), 
        Sys.Date(),  # Replace NA with today's date
        stop_date
      )
    )
  
  # Check and log warnings in one step
  if (nrow(filtered_data) == 0) {
    cat(paste("No timeline data found for TTAS ID:", current_id), file = log_file, append = TRUE, sep = "\n")
  }
  
  # Get patient info
  patient_info <- combined_df_id_with_drugs_excluded %>% filter(ttas_id == current_id) %>% 
    select(
      gender, hlab27status, diagnosis, age_at_onset, age_at_diag
    ) %>% 
    distinct() %>%
    unite("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis", gender, hlab27status, diagnosis, age_at_onset, age_at_diag, sep = " | ", remove = FALSE, na.rm = FALSE) %>% 
    pull("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis")
  
  plot <- ggplot(filtered_data, aes(x = date, y = Score)) +
    geom_point() +
    geom_line() +
    geom_rect(
      data = filtered_drug_data,
      inherit.aes = FALSE,
      aes(
        xmin = drug_start_date,
        xmax = stop_date,
        fill = x3
      ),
      ymin = -Inf,
      ymax = Inf,
      alpha = 0.5
    ) +
    # geom_text(
    #   # Add drug names labels
    #   data = filtered_drug_data,
    #   inherit.aes = FALSE,
    #   aes(
    #     x = drug_start_date + (stop_date - drug_start_date) / 2,  # Calculate midpoint
    #     y = Inf - 5,  # Offset from max Score
    #     label = x3
    #   ),
    # ) +
    # Use a colour pallete with enough colours for all drugs
    scale_fill_manual(values = drug_colours, na.value = "gray") +
    facet_wrap(~ ttas_id, ncol = 1, scales = "free_y") +
    labs(title = paste0("Patient Global timeline plot for TTAS ID:", current_id)) +
    ggtitle(paste0("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis: ", patient_info))
  
  file_name <- paste0(output_folder_2, "/", current_id, "_timeline_plot_patient_global.png")
  ggsave(file_name, plot, width = 10, height = 6, dpi = 300)
}
```

```{r, warning=FALSE}
# Create plot for back pain at night and back pain anytime score only

timeline_data_back_pain <- combined_df %>%
  select(ttas_id, date, back_pain_at_night, back_pain_anytime) %>%
  pivot_longer(cols = c(back_pain_at_night, back_pain_anytime),
               names_to = "Measure",
               values_to = "Score")

for (current_id in unique_ids_drugs_only){
  
  if (current_id %in% exclude_ids) {
    next # Skip the current iteration if the current_id is in the exclude_ids list
  }
  
  filtered_data <- timeline_data_back_pain %>% filter(ttas_id == current_id)
  filtered_drug_data <- drug_sheet_data %>% filter(ttas_id == current_id)
  
  # Replace NA stop_date values with a default (e.g., today's date)
  filtered_drug_data <- filtered_drug_data %>%
    mutate(
      stop_date = if_else(
        is.na(stop_date), 
        Sys.Date(),  # Replace NA with today's date
        stop_date
      )
    )
  
  # Check and log warnings in one step
  if (nrow(filtered_data) == 0) {
    cat(paste("No timeline data found for TTAS ID:", current_id), file = log_file, append = TRUE, sep = "\n")
  }

  # Get patient info
  patient_info <- combined_df_id_with_drugs_excluded %>% filter(ttas_id == current_id) %>% 
    select(
      gender, hlab27status, diagnosis, age_at_onset, age_at_diag
    ) %>% 
    distinct() %>%
    unite("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis", gender, hlab27status, diagnosis, age_at_onset, age_at_diag, sep = " | ", remove = FALSE, na.rm = FALSE) %>% 
    pull("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis")

  plot <- ggplot(filtered_data, aes(x = date, y = Score, colour = Measure)) +
    geom_point() +
    geom_line() +
    geom_rect(
      data = filtered_drug_data,
      inherit.aes = FALSE,
      aes(
        xmin = drug_start_date,
        xmax = stop_date,
        fill = x3
      ),
      ymin = -Inf,
      ymax = Inf,
      alpha = 0.5
    ) +
    # geom_text(
    #   # Add drug names labels
    #   data = filtered_drug_data,
    #   inherit.aes = FALSE,
    #   aes(
    #     x = drug_start_date + (stop_date - drug_start_date) / 2,  # Calculate midpoint
    #     y = Inf - 5,  # Offset from max Score
    #     label = x3
    #   ),
    # ) +
    # Use a colour pallete with enough colours for all drugs
    scale_fill_manual(values = drug_colours, na.value = "gray") +
    facet_wrap(~ ttas_id, ncol = 1, scales = "free_y") +
    labs(title = paste0("Back Pain timeline plot for TTAS ID:", current_id)) +
    ggtitle(paste0("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis: ", patient_info))

  file_name <- paste0(output_folder_2, "/", current_id, "_timeline_plot_back_pain.png")
  ggsave(file_name, plot, width = 10, height = 6, dpi = 300)
}
```

```{r, warning=FALSE}
# Create plot for ASQoL score only

timeline_data_as_qol <- combined_df %>%
  select(ttas_id, date, as_qol) %>%
  pivot_longer(cols = c(as_qol),
               names_to = "Measure",
               values_to = "Score")

for (current_id in unique_ids_drugs_only){
  
  if (current_id %in% exclude_ids) {
    next # Skip the current iteration if the current_id is in the exclude_ids list
  }
  
  # Get patient info
  patient_info <- combined_df_id_with_drugs_excluded %>% filter(ttas_id == current_id) %>% 
    select(
      gender, hlab27status, diagnosis, age_at_onset, age_at_diag
    ) %>% 
    distinct() %>%
    unite("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis", gender, hlab27status, diagnosis, age_at_onset, age_at_diag, sep = " | ", remove = FALSE, na.rm = FALSE) %>% 
    pull("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis")
  
  filtered_data <- timeline_data_as_qol %>% filter(ttas_id == current_id)
  filtered_drug_data <- drug_sheet_data %>% filter(ttas_id == current_id)
  
  # Replace NA stop_date values with a default (e.g., today's date)
  filtered_drug_data <- filtered_drug_data %>%
    mutate(
      stop_date = if_else(
        is.na(stop_date), 
        Sys.Date(),  # Replace NA with today's date
        stop_date
      )
    )
  
  # Check and log warnings in one step
  if (nrow(filtered_data) == 0) {
    cat(paste("No timeline data found for TTAS ID:", current_id), file = log_file, append = TRUE, sep = "\n")
  }
  
  plot <- ggplot(filtered_data, aes(x = date, y = Score)) +
    geom_point() +
    geom_line() +
    geom_rect(
      data = filtered_drug_data,
      inherit.aes = FALSE,
      aes(
        xmin = drug_start_date,
        xmax = stop_date,
        fill = x3
      ),
      ymin = -Inf,
      ymax = Inf,
      alpha = 0.5
    ) +
    # geom_text(
    #   # Add drug names labels
    #   data = filtered_drug_data,
    #   inherit.aes = FALSE,
    #   aes(
    #     x = drug_start_date + (stop_date - drug_start_date) / 2,  # Calculate midpoint
    #     y = Inf - 5,  # Offset from max Score
    #     label = x3
    #   ),
    # ) +
    # Use a colour pallete with enough colours for all drugs
    scale_fill_manual(values = drug_colours, na.value = "gray") +
    facet_wrap(~ ttas_id, ncol = 1, scales = "free_y") +
    labs(title = paste0("ASQoL timeline plot for TTAS ID:", current_id)) +
    ggtitle(paste0("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis: ", patient_info))
  
  file_name <- paste0(output_folder_2, "/", current_id, "_timeline_plot_asqol.png")
  ggsave(file_name, plot, width = 10, height = 6, dpi = 300)
}
```

```{r, warning=FALSE}
# Create plot for FACIT score only

timeline_data_facit <- combined_df %>%
  select(ttas_id, date, facit) %>%
  pivot_longer(cols = c(facit),
               names_to = "Measure",
               values_to = "Score")

for (current_id in unique_ids_drugs_only){
  
  if (current_id %in% exclude_ids) {
    next # Skip the current iteration if the current_id is in the exclude_ids list
  }
  
  # Get patient info
  patient_info <- combined_df_id_with_drugs_excluded %>% filter(ttas_id == current_id) %>% 
    select(
      gender, hlab27status, diagnosis, age_at_onset, age_at_diag
    ) %>% 
    distinct() %>%
    unite("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis", gender, hlab27status, diagnosis, age_at_onset, age_at_diag, sep = " | ", remove = FALSE, na.rm = FALSE) %>% 
    pull("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis")
  
  filtered_data <- timeline_data_facit %>% filter(ttas_id == current_id)
  filtered_drug_data <- drug_sheet_data %>% filter(ttas_id == current_id)
  
  # Replace NA stop_date values with a default (e.g., today's date)
  filtered_drug_data <- filtered_drug_data %>%
    mutate(
      stop_date = if_else(
        is.na(stop_date), 
        Sys.Date(),  # Replace NA with today's date
        stop_date
      )
    )
  
  # Check and log warnings in one step
  if (nrow(filtered_data) == 0) {
    cat(paste("No timeline data found for TTAS ID:", current_id), file = log_file, append = TRUE, sep = "\n")
  }

  # Get patient info
  patient_info <- combined_df_id_with_drugs_excluded %>% filter(ttas_id == current_id) %>% 
    select(
      gender, hlab27status, diagnosis, age_at_onset, age_at_diag
    ) %>% 
    distinct() %>%
    unite("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis", gender, hlab27status, diagnosis, age_at_onset, age_at_diag, sep = " | ", remove = FALSE, na.rm = FALSE) %>% 
    pull("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis")

  plot <- ggplot(filtered_data, aes(x = date, y = Score)) +
    geom_point() +
    geom_line() +
    geom_rect(
      data = filtered_drug_data,
      inherit.aes = FALSE,
      aes(
        xmin = drug_start_date,
        xmax = stop_date,
        fill = x3
      ),
      ymin = -Inf,
      ymax = Inf,
      alpha = 0.5
    ) +
    # geom_text(
    #   # Add drug names labels
    #   data = filtered_drug_data,
    #   inherit.aes = FALSE,
    #   aes(
    #     x = drug_start_date + (stop_date - drug_start_date) / 2,  # Calculate midpoint
    #     y = Inf - 5,  # Offset from max Score
    #     label = x3
    #   ),
    # ) +
    # Use a colour pallete with enough colours for all drugs
    scale_fill_manual(values = drug_colours, na.value = "gray") +
    facet_wrap(~ ttas_id, ncol = 1, scales = "free_y") +
    labs(title = paste0("FACIT timeline plot for TTAS ID:", current_id)) +
    ggtitle(paste0("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis: ", patient_info))
  
  file_name <- paste0(output_folder_2, "/", current_id, "_timeline_plot_facit.png")
  ggsave(file_name, plot, width = 10, height = 6, dpi = 300)
}
```

```{r, warning=FALSE}
# Create plot for Margolis score only

timeline_data_margolis <- combined_df %>%
  select(ttas_id, date, margolis) %>%
  pivot_longer(cols = c(margolis),
               names_to = "Measure",
               values_to = "Score")

for (current_id in unique_ids_drugs_only){
  
  if (current_id %in% exclude_ids) {
    next # Skip the current iteration if the current_id is in the exclude_ids list
  }
  
  filtered_data <- timeline_data_margolis %>% filter(ttas_id == current_id)
  filtered_drug_data <- drug_sheet_data %>% filter(ttas_id == current_id)
  
  # Replace NA stop_date values with a default (e.g., today's date)
  filtered_drug_data <- filtered_drug_data %>%
    mutate(
      stop_date = if_else(
        is.na(stop_date), 
        Sys.Date(),  # Replace NA with today's date
        stop_date
      )
    )
  
  # Check and log warnings in one step
  if (nrow(filtered_data) == 0) {
    cat(paste("No timeline data found for TTAS ID:", current_id), file = log_file, append = TRUE, sep = "\n")
  }

  # Get patient info
  patient_info <- combined_df_id_with_drugs_excluded %>% filter(ttas_id == current_id) %>% 
    select(
      gender, hlab27status, diagnosis, age_at_onset, age_at_diag
    ) %>% 
    distinct() %>%
    unite("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis", gender, hlab27status, diagnosis, age_at_onset, age_at_diag, sep = " | ", remove = FALSE, na.rm = FALSE) %>% 
    pull("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis")
  
  plot <- ggplot(filtered_data, aes(x = date, y = Score)) +
    geom_point() +
    geom_line() +
    geom_rect(
      data = filtered_drug_data,
      inherit.aes = FALSE,
      aes(
        xmin = drug_start_date,
        xmax = stop_date,
        fill = x3
      ),
      ymin = -Inf,
      ymax = Inf,
      alpha = 0.5
    ) +
    # geom_text(
    #   # Add drug names labels
    #   data = filtered_drug_data,
    #   inherit.aes = FALSE,
    #   aes(
    #     x = drug_start_date + (stop_date - drug_start_date) / 2,  # Calculate midpoint
    #     y = Inf - 5,  # Offset from max Score
    #     label = x3
    #   ),
    # ) +
    # Use a colour pallete with enough colours for all drugs
    scale_fill_manual(values = drug_colours, na.value = "gray") +
    facet_wrap(~ ttas_id, ncol = 1, scales = "free_y") +
    labs(title = paste0("Margolis timeline plot for TTAS ID:", current_id)) +
    ggtitle(paste0("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis: ", patient_info))

  
  file_name <- paste0(output_folder_2, "/", current_id, "_timeline_plot_margolis.png")
  ggsave(file_name, plot, width = 10, height = 6, dpi = 300)
}
```

```{r, warning=FALSE}
# Create plot for WPAI only

timeline_data_wpai <- combined_df %>%
  select(ttas_id, date, presentism, absenteeism, wpl, daily_activity_impairment) %>%
  pivot_longer(cols = c(presentism, absenteeism, wpl, daily_activity_impairment),
               names_to = "Measure",
               values_to = "Score")

for (current_id in unique_ids_drugs_only){
  
  if (current_id %in% exclude_ids) {
    next # Skip the current iteration if the current_id is in the exclude_ids list
  }
  
  filtered_data <- timeline_data_wpai %>% filter(ttas_id == current_id)
  filtered_drug_data <- drug_sheet_data %>% filter(ttas_id == current_id)
  
  # Replace NA stop_date values with a default (e.g., today's date)
  filtered_drug_data <- filtered_drug_data %>%
    mutate(
      stop_date = if_else(
        is.na(stop_date), 
        Sys.Date(),  # Replace NA with today's date
        stop_date
      )
    )
  
  # Check and log warnings in one step
  if (nrow(filtered_data) == 0) {
    cat(paste("No timeline data found for TTAS ID:", current_id), file = log_file, append = TRUE, sep = "\n")
  }
  
  # Get patient info
  patient_info <- combined_df_id_with_drugs_excluded %>% filter(ttas_id == current_id) %>% 
    select(
      gender, hlab27status, diagnosis, age_at_onset, age_at_diag
    ) %>% 
    distinct() %>%
    unite("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis", gender, hlab27status, diagnosis, age_at_onset, age_at_diag, sep = " | ", remove = FALSE, na.rm = FALSE) %>% 
    pull("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis")

  plot <- ggplot(filtered_data, aes(x = date, y = Score, colour = Measure)) +
    geom_point() +
    geom_line() +
    geom_rect(
      data = filtered_drug_data,
      inherit.aes = FALSE,
      aes(
        xmin = drug_start_date,
        xmax = stop_date,
        fill = x3
      ),
      ymin = -Inf,
      ymax = Inf,
      alpha = 0.5
    ) +
    # geom_text(
    #   # Add drug names labels
    #   data = filtered_drug_data,
    #   inherit.aes = FALSE,
    #   aes(
    #     x = drug_start_date + (stop_date - drug_start_date) / 2,  # Calculate midpoint
    #     y = Inf - 5,  # Offset from max Score
    #     label = x3
    #   ),
    # ) +
    # Use a colour pallete with enough colours for all drugs
    scale_fill_manual(values = drug_colours, na.value = "gray") +
    facet_wrap(~ ttas_id, ncol = 1, scales = "free_y") +
    labs(title = paste0("WPAI timeline plot for TTAS ID:", current_id)) +
    ggtitle(paste0("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis: ", patient_info))

  
  file_name <- paste0(output_folder_2, "/", current_id, "_timeline_plot_wpai.png")
  ggsave(file_name, plot, width = 10, height = 6, dpi = 300)
}
```

```{r, warning=FALSE}
# Create plot for Jenkins Sleep 

timeline_data_jenkins_sleep_scale <- combined_df %>%
  select(ttas_id, date, jenkins_sleep_1, jenkins_sleep_2, jenkins_sleep_3, jenkins_sleep_4) %>%
  pivot_longer(cols = c(jenkins_sleep_1, jenkins_sleep_2, jenkins_sleep_3, jenkins_sleep_4),
               names_to = "Measure",
               values_to = "Score")

for (current_id in unique_ids_drugs_only){
  
  if (current_id %in% exclude_ids) {
    next # Skip the current iteration if the current_id is in the exclude_ids list
  }
  
  filtered_data <- timeline_data_jenkins_sleep_scale %>% filter(ttas_id == current_id)
  filtered_drug_data <- drug_sheet_data %>% filter(ttas_id == current_id)
  
  # Replace NA stop_date values with a default (e.g., today's date)
  filtered_drug_data <- filtered_drug_data %>%
    mutate(
      stop_date = if_else(
        is.na(stop_date), 
        Sys.Date(),  # Replace NA with today's date
        stop_date
      )
    )
  
  # Check and log warnings in one step
  if (nrow(filtered_data) == 0) {
    cat(paste("No timeline data found for TTAS ID:", current_id), file = log_file, append = TRUE, sep = "\n")
  }

  # Get patient info
  patient_info <- combined_df_id_with_drugs_excluded %>% filter(ttas_id == current_id) %>% 
    select(
      gender, hlab27status, diagnosis, age_at_onset, age_at_diag
    ) %>% 
    distinct() %>%
    unite("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis", gender, hlab27status, diagnosis, age_at_onset, age_at_diag, sep = " | ", remove = FALSE, na.rm = FALSE) %>% 
    pull("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis")

  plot <- ggplot(filtered_data, aes(x = date, y = Score)) +
    geom_point() +
    geom_line() +
    geom_rect(
      data = filtered_drug_data,
      inherit.aes = FALSE,
      aes(
        xmin = drug_start_date,
        xmax = stop_date,
        fill = x3
      ),
      ymin = -Inf,
      ymax = Inf,
      alpha = 0.5
    ) +
    # geom_text(
    #   # Add drug names labels
    #   data = filtered_drug_data,
    #   inherit.aes = FALSE,
    #   aes(
    #     x = drug_start_date + (stop_date - drug_start_date) / 2,  # Calculate midpoint
    #     y = Inf - 5,  # Offset from max Score
    #     label = x3
    #   ),
    # ) +
    # Use a colour pallete with enough colours for all drugs
    scale_fill_manual(values = drug_colours, na.value = "gray") +
    facet_wrap(~ ttas_id, ncol = 1, scales = "free_y") +
    labs(title = paste0("Jenkins Sleep Scale timeline plot for TTAS ID:", current_id)) +
    ggtitle(paste0("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis: ", patient_info))
  
  file_name <- paste0(output_folder_2, "/", current_id, "_timeline_plot_jenkins.png")
  ggsave(file_name, plot, width = 10, height = 6, dpi = 300)
}
```

```{r}
# # Reduce the amount of NA in combined_df_id_with_drugs_excluded
# # Impute x3 (Treatment): For any row where x3 is NA, if there is a valid stop_date, we should impute x3 with the last known treatment. If stop_date is also NA, the treatment continues to the present, and x3 should reflect the last known treatment.
# 
# # Ensure the data is arranged by ttas_id first and then by date
# combined_df_id_with_drugs_excluded <- combined_df_id_with_drugs_excluded %>% arrange(ttas_id, date)
# 
# # Impute x3 (Treatment) for each ttas_id based on start_date and stop_date
# combined_df_id_with_drugs_excluded <- combined_df_id_with_drugs_excluded %>%
#   group_by(ttas_id) %>%
#   mutate(
#     # Forward fill x3 values within each patient, but only if the date is before or on the stop_date
#     x3 = zoo::na.locf(ifelse(is.na(stop_date) | date <= stop_date, x3, NA), na.rm = FALSE)
#   )
# 
# write.csv(combined_df_id_with_drugs_excluded, file = "cleaned_dates.csv", row.names = FALSE)
```

# Start analysis

```{r}
# # Data cleaning to ensure x3 is propagated until stop_date
# data <- combined_df_id_with_drugs_excluded %>%
#   select(ttas_id, x3, date, stop_date, basmi_score)
# 
# # Convert date and stop_date to Date type
# data$date <- as.Date(data$date, format = "%d/%m/%Y")
# data$stop_date <- as.Date(data$stop_date, format = "%d/%m/%Y")
# 
# # Function to propagate x3 and manage stop_date without removing any rows
# propagate_x3 <- function(df) {
#   df <- df %>%
#     arrange(date) %>%
#     fill(x3, .direction = "down") %>%  # Propagate x3 downwards
#     mutate(stop_date = if_else(is.na(stop_date) & !is.na(x3) & row_number() == n(), Sys.Date(), stop_date)) %>%
#     mutate(stop_date = if_else(is.na(stop_date) & !is.na(x3), lead(stop_date), stop_date)) %>%
#     mutate(x3 = if_else(!is.na(x3) & (is.na(stop_date) | date <= stop_date), x3, NA_character_)) %>%
#     mutate(stop_date = if_else(date > stop_date, NA_Date_, stop_date))  # Clear stop_date after it ends
#   
#   return(df)
# }
# 
# # Apply the function across all ttas_id
# cleaned_data <- data %>% 
#   group_by(ttas_id) %>% 
#   group_modify(~ propagate_x3(.x)) %>% 
#   ungroup()
# 
# # Write the cleaned data to a CSV file
# write.csv(cleaned_data, file = "final_cleaned_propagation_result.csv", row.names = FALSE)
```

```{r}
# df <- combined_df_id_with_drugs_excluded
# 
# data_sorted <- df %>%
#   select(ttas_id, basmi_score, x3, hlab27status, diagnosis, date, stop_date) %>%
#   arrange(ttas_id, date)
# 
# # Step 1: Identify treatment periods
# # Forward fill x3 to create a continuous treatment period indicator
# data_sorted <- data_sorted %>%
#   group_by(ttas_id) %>%
#   mutate(treatment = zoo::na.locf(x3, na.rm = FALSE)) %>%
#   ungroup()
# 
# # Step 2: Calculate avg_basmi_score_throughout_treatment for each treatment period
# data_sorted <- data_sorted %>%
#   group_by(ttas_id, treatment) %>%
#   mutate(avg_basmi_score_throughout_treatment = mean(basmi_score, na.rm = TRUE)) %>%
#   ungroup()
# 
# # Step 3: Calculate basmi_score_before based on the last known basmi_score before or on treatment initiation
# data_sorted <- data_sorted %>%
#   group_by(ttas_id) %>%
#   mutate(basmi_score_before = lag(basmi_score, default = NA_real_)) %>%
#   fill(basmi_score_before, .direction = "down") %>%
#   ungroup()
# 
# # Step 4: Filter only treatment days
# final_data <- data_sorted %>%
#   filter(!is.na(x3)) %>%
#   select(ttas_id, basmi_score, x3, hlab27status, diagnosis, date, stop_date, 
#          basmi_score_before, avg_basmi_score_throughout_treatment)
# 
# # Write to CSV or view the data
# write.csv(final_data, "final_treatment_data.csv", row.names = FALSE)
```


Basic analysis for before and after treatment
```{r}
df <- combined_df_id_with_drugs_excluded

data_sorted <- df %>%
  select(ttas_id, basmi_score, x3, hlab27status, diagnosis, date, stop_date)

data_sorted$ttas_id <- as.factor(data_sorted$ttas_id)
data_sorted$basmi_score <- as.numeric(data_sorted$basmi_score)
data_sorted$x3 <- as.factor(data_sorted$x3)
data_sorted$hlab27status <- as.factor(data_sorted$hlab27status)
data_sorted$diagnosis <- as.factor(data_sorted$diagnosis)
data_sorted$date <- as.Date(data_sorted$date)
data_sorted$stop_date <- as.Date(data_sorted$stop_date)

# If x3 is present but date == stop_date, make x3 and stop_date NA
data_sorted <- data_sorted %>%
  mutate(
    x3 = case_when(
      date == stop_date ~ NA_character_,
      TRUE ~ as.character(x3)
    ),
    stop_date = case_when(
      date == stop_date ~ NA_Date_,
      TRUE ~ stop_date
    )
  ) %>% 
  
  # Ensure x3 is still a factor
  mutate(x3 = as.factor(x3)) %>% 
  
  # If x3 is present but no start_date, make x3 and stop_date NA
  mutate(
    x3 = case_when(
      !is.na(x3) & is.na(date) ~ NA_character_,
      TRUE ~ as.character(x3)
    ),
    stop_date = case_when(
      !is.na(x3) & is.na(date) ~ NA_Date_,
      TRUE ~ stop_date
    )
  ) %>%
  # Convert x3 back to factor after the above condition
  mutate(x3 = as.factor(x3))

write.csv(data_sorted, "temp_before_data_sorted.csv", row.names = FALSE)
```

```{r}
# TODO: Clean this earlier
# Manual intervention for ttas_id 13, 72, 156, 230, 792, 974, 1105, 1099, 1224
# For ttas_id 13, if x3 is Benepali but stop_date is NA, set stop_date to current date
data_sorted <- data_sorted %>%
  mutate(
    stop_date = case_when(
      ttas_id == 13 & x3 == "Benepali" & is.na(stop_date) ~ Sys.Date(),
      TRUE ~ stop_date
    ))

# For ttas_id 72, if x3 is Cosentyx but stop_date is NA, set stop_date to current date
data_sorted <- data_sorted %>%
  mutate(
    stop_date = case_when(
      ttas_id == 72 & x3 == "Cosentyx" & is.na(stop_date) ~ Sys.Date(),
      TRUE ~ stop_date
    ))

# For ttas_id 156, if x3 is Imraldi but stop_date is NA, set stop_date to current date
data_sorted <- data_sorted %>%
  mutate(
    stop_date = case_when(
      ttas_id == 156 & x3 == "Imraldi" & is.na(stop_date) ~ Sys.Date(),
      TRUE ~ stop_date
    ))

# For ttas_id 230, if x3 is Imraldi but stop_date is NA, set stop_date to current date
data_sorted <- data_sorted %>%
  mutate(
    stop_date = case_when(
      ttas_id == 230 & x3 == "Imraldi" & is.na(stop_date) ~ Sys.Date(),
      TRUE ~ stop_date
    ))

# For ttas_id 792, if x3 is Simponi but stop_date is NA, set stop_date to current date
data_sorted <- data_sorted %>%
  mutate(
    stop_date = case_when(
      ttas_id == 792 & x3 == "Simponi" & is.na(stop_date) ~ Sys.Date(),
      TRUE ~ stop_date
    ))

# For ttas_id 984, if x3 is Cosentyx but stop_date is NA, set stop_date to current date
data_sorted <- data_sorted %>%
  mutate(
    stop_date = case_when(
      ttas_id == 984 & x3 == "Cosentyx" & is.na(stop_date) ~ Sys.Date(),
      TRUE ~ stop_date
    ))

# For ttas_id 1105, if x3 is Cosentyx but stop_date is NA, set stop_date to current date
data_sorted <- data_sorted %>%
  mutate(
    stop_date = case_when(
      ttas_id == 1105 & x3 == "Cosentyx" & is.na(stop_date) ~ Sys.Date(),
      TRUE ~ stop_date
    ))

# For ttas_id 1099
# No stop_date for past treatment Yuflyma, assume stop_date is 19/02/2024 which is one day before next entry
# For ttas_id 1099, if x3 is Yuflyma but stop_date is NA, set stop_date to 19/02/2024 
data_sorted <- data_sorted %>%
  mutate(
    stop_date = case_when(
      ttas_id == 1099 & x3 == "Yuflyma" & is.na(stop_date) ~ as.Date("2024-02-19"),
      TRUE ~ stop_date
    ))

# One of the Cosentyx entry for this patient has a stop_date of 15/01/2024 but start date of 20/02/2024, which is incorrect.
# Change the 15/01/2024 stop_date to current date
data_sorted <- data_sorted %>%
  mutate(
    stop_date = case_when(
      ttas_id == 1099 & x3 == "Cosentyx" & stop_date == as.Date("2024-01-15") ~ Sys.Date(),
      TRUE ~ stop_date
    ))

# For ttas_id 1224, if x3 is Benepali but stop_date is NA, set stop_date to current date
data_sorted <- data_sorted %>%
  mutate(
    stop_date = case_when(
      ttas_id == 1224 & x3 == "Benepali" & is.na(stop_date) ~ Sys.Date(),
      TRUE ~ stop_date
    ))

# write.csv(data_sorted, "temp_manual_intervetion_check.csv", row.names = FALSE)
```

```{r}
# # Older code: Before and immediately after basmi_score
# # Forward fill x3 to create a continuous treatment period indicator
# data_sorted <- data_sorted %>%
#   group_by(ttas_id) %>%
#   mutate(treatment = zoo::na.locf(x3, na.rm = FALSE)) %>%
#   ungroup()
# 
# # Calculate basmi_score_before based on the last known basmi_score before or on treatment initiation
# data_sorted <- data_sorted %>%
#   group_by(ttas_id) %>%
#   mutate(basmi_score_before = lag(basmi_score, default = NA_real_)) %>%
#   fill(basmi_score_before, .direction = "down") %>%
#   ungroup()
# 
# # # Obtain the basmi_score_after as the last recorded basmi_score after each treatment starts
# # data_sorted <- data_sorted %>%
# #   group_by(ttas_id, treatment) %>%
# #   mutate(basmi_score_after = lead(basmi_score, order_by = date)) %>%
# #   fill(basmi_score_after, .direction = "up") %>%
# #   ungroup() %>%
# #   group_by(ttas_id, treatment) %>%
# #   mutate(basmi_score_after = ifelse(date == max(date), basmi_score, basmi_score_after)) %>%
# #   ungroup()
# 
# # Filter only treatment days and select relevant columns
# final_data <- data_sorted %>%
#   filter(!is.na(x3)) %>%
#   select(ttas_id, x3, hlab27status, diagnosis, date, stop_date, 
#          basmi_score_before, basmi_score_after, first_treatment_date, last_treatment_date)
# 
# # Write to CSV or view the data
# write.csv(final_data, "treatment_data_before_after.csv", row.names = FALSE)
```

```{r}
# Step 1: Forward-fill x3 to create a continuous treatment period indicator
data_sorted <- data_sorted %>%
  arrange(ttas_id, date) %>%
  group_by(ttas_id) %>%
  mutate(
    treatment = zoo::na.locf(x3, na.rm = FALSE)  # Forward-fill treatment within valid periods
  ) %>%
  ungroup()

# write.csv(data_sorted, "temp_after_data_sorted_1.csv", row.names = FALSE)

# Step 2: Create a unique treatment period identifier
# TODO: Old code: Problematic as it doesn't consider stop and repeated treatment
# data_sorted <- data_sorted %>%
#   group_by(ttas_id) %>%
#   mutate(
#     treatment_period = cumsum(!is.na(treatment) & (treatment != lag(treatment, default = first(treatment)) | is.na(lag(treatment))))
#   ) %>%
#   ungroup()

# TODO: Working fine for now, hope it stays that way
data_sorted <- data_sorted %>%
  group_by(ttas_id) %>%
  mutate(
    # Flag when treatment changes or is restarted
    treatment_change = (treatment != lag(treatment, default = first(treatment)) | 
                        !is.na(stop_date) | 
                        is.na(lag(treatment))),

    # Cumulative sum of treatment_change flags to create a unique treatment period identifier
    treatment_period = cumsum(treatment_change)
  ) %>%
  ungroup()

write.csv(data_sorted, "temp_after_data_sorted_2.csv", row.names = FALSE)

# Convert treatment to character
data_sorted$treatment <- as.character(data_sorted$treatment)

# Convert dates to UNIX time
data_sorted <- data_sorted %>%
  mutate(
    start_date_unix = as.numeric(as.POSIXct(date)),
    stop_date_unix = ifelse(is.na(stop_date), NA, as.numeric(as.POSIXct(stop_date)))
  )

# Step 3: Reset treatments to NA after the stop_date using numeric UNIX time
data_sorted <- data_sorted %>%
  group_by(ttas_id, treatment_period) %>%
  mutate(
    # Check if there is any valid treatment in the period
    has_valid_treatment = any(!is.na(treatment)),
    
    # Find the unique stop_date_unix within each treatment_period
    # stop_date_for_period is identified as the maximum stop_date_unix within each treatment_period group. This assumes that each treatment_period should only have one stop_date.
    # Calculate stop_date_for_period based on whether there's a valid treatment
    stop_date_for_period = ifelse(
      !has_valid_treatment, 
      NA_real_,  # If no valid treatment, set to NA
      max(stop_date_unix, na.rm = TRUE)  # Else, find the max stop_date_unix
    ),
    
    # If there is no stop_date but there in a period, stop_date_for_period is set to current date.
    stop_date_for_period = ifelse(is.infinite(stop_date_for_period), Sys.time(), stop_date_for_period),
    
    # If start_date_unix is after the stop_date_for_period, reset treatment to NA for the row
    treatment = ifelse(!is.na(treatment) & start_date_unix > stop_date_for_period, NA_character_, treatment),
    
    # If start_date_unix is after the stop_date_for_period, reset treatment_period to NA for the row
    treatment_period = ifelse(start_date_unix > stop_date_for_period, NA_integer_, treatment_period),
    
    # If start_date_unix is after the stop_date_for_period, reset has_valid_treatment to FALSE for the row
    has_valid_treatment = ifelse(start_date_unix > stop_date_for_period, FALSE, has_valid_treatment),
    
    # If start_date_unix is after the stop_date_for_period, reset stop_date_for_period to NA for the row
    stop_date_for_period = ifelse(start_date_unix > stop_date_for_period, NA_real_, stop_date_for_period),
    
    # Add a new stop_date_for_period column in Date format
    stop_date_for_period_date_format = as.Date(as.POSIXct(stop_date_for_period, origin = "1970-01-01"))
  ) %>%
  ungroup()


# Step 4: Calculate basmi_score_before
data_sorted <- data_sorted %>%
  group_by(ttas_id) %>%
  mutate(basmi_score_before = lag(basmi_score, default = NA_real_)) %>%
  fill(basmi_score_before, .direction = "down") %>%
  ungroup()

# Step 5: Calculate overall_treatment_duration_in_days and create an index for each basmi_score in each period
# Step 1: Calculate overall_treatment_duration_in_days
data_sorted <- data_sorted %>%
  group_by(ttas_id, treatment_period) %>%
  mutate(
    overall_treatment_duration_in_days = ifelse(
      !is.na(stop_date_for_period_date_format), 
      as.numeric(difftime(stop_date_for_period_date_format, date, units = "days")), 
      NA_real_
    )
  ) %>%
  ungroup()

# Step 6: Calculate weekly time within each treatment_period
# Ensure date and stop_date_for_period_date_format are in Date format
data_sorted$date <- as.Date(data_sorted$date)

data_sorted <- data_sorted %>% 
  group_by(ttas_id, treatment_period) %>%
  mutate(
    treatment_window_weekly_time = round(as.numeric(difftime(date, first(date), units = "weeks")) + 1, 2)) %>% 
  ungroup()
  

write.csv(data_sorted, "temp_data_sorted_for_analysis_prior_to_pivot.csv", row.names = FALSE)
```


```{r}
# Pivot the basmi_score to wide format
data_sorted <- data_sorted %>%
  group_by(ttas_id, treatment_period) %>%
  mutate(
    basmi_score_index = row_number() - 1  # Create an index for each basmi_score, including NA values
  ) %>%
  ungroup()

data_wide <- data_sorted %>%
  pivot_wider(
    id_cols = c(ttas_id, treatment_period),  # Ensure id columns include ttas_id and treatment_period
    names_from = basmi_score_index, 
    names_prefix = "basmi_score_after_", 
    values_from = basmi_score
  )

# Filter on treatment day and inspect the result
# Select the columns to retain
final_data <- data_sorted %>%
  select(ttas_id, treatment_period, x3, hlab27status, diagnosis, date, stop_date, treatment, start_date_unix, stop_date_unix, has_valid_treatment, stop_date_for_period, stop_date_for_period_date_format, overall_treatment_duration_in_days, basmi_score_before) %>%
  distinct() %>%
  right_join(data_wide, by = c("ttas_id", "treatment_period"))

write.csv(final_data, "temp_data_sorted_after_pivot.csv", row.names = FALSE)
```

```{r}
# Skip start_date_unix and stop_date_unix, stop_date_for_period
basmi_analysis_data <- final_data %>%
  filter(!is.na(x3)) %>%
  select(ttas_id, treatment_period, x3, hlab27status, diagnosis, date, stop_date, treatment, has_valid_treatment, stop_date_for_period_date_format, overall_treatment_duration_in_days, basmi_score_before, starts_with("basmi_score_"))

write_csv(basmi_analysis_data, "basmi_analysis_data.csv")
```
