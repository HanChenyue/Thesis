---
title: "R Code Outputs - Appendix"
author: "Han Chenyue"
format:
  pdf:
    editor: visual
---


```{r, include=FALSE}
library(knitr)
library(tidyverse)
library(ggplot2)
library(readxl)
library(dplyr)
library(tidyr)
library(janitor)
library(lubridate)
library(kableExtra)
library(zoo)
library(lme4)
library(plotly)
library(MuMIn)
library(car)
library(lmerTest)
library(gt)
library(webshot2)
library(rmarkdown)
library(knitr)
library(broom.mixed)
```

```{r, include=FALSE}
# # Combine sheets into a single data frame
# file_path <- file_path <- "C:/Users/hn/OneDrive - University of Bath/Thesis/thesis_dataset/TTAS All data anon.xlsx"
# sheet_names <- c("Demographics", "PROMs ALL DATA", "BASMI data", "Highcost drug data")
# 
# # Perform full join
# data <- sheet_names %>%felse
# 
#   map(read_excel, path = file_path) %>%
#   reduce(full_join, by = "TTAS_ID")
```

```{r, include=FALSE}
# Load data
demographics_sheet_data <- read_excel("TTAS\ All\ data\ anon.xlsx", sheet = "Demographics")
prom_sheet_data <- read_excel("TTAS\ All\ data\ anon.xlsx", sheet = "PROMs\ ALL\ DATA")
basmi_sheet_data <- read_excel("TTAS\ All\ data\ anon.xlsx", sheet = "BASMI\ data")
drug_sheet_data <- read_excel("TTAS\ All\ data\ anon.xlsx", sheet = "Highcost\ drug\ data")

# Clean data
demographics_sheet_data <- clean_names(demographics_sheet_data)
prom_sheet_data <- clean_names(prom_sheet_data)
basmi_sheet_data <- clean_names(basmi_sheet_data)
drug_sheet_data <- clean_names(drug_sheet_data)
```

```{r, include=FALSE}
# Data Cleaning
# 1. Convert all dates column to date type
# basmi_sheet_data$date <- as.Date(basmi_sheet_data$date, format = "%d/%m/%Y")
# prom_sheet_data$date <- as.Date(prom_sheet_data$date, format = "%d/%m/%Y")
# drug_sheet_data$start_date <- as.Date(drug_sheet_data$start_date, format = "%d/%m/%Y")
# drug_sheet_data$stop_date <- as.Date(drug_sheet_data$stop_date, format = "%d/%m/%Y")

# Ensure year_quit_smoking and year_quit_vaping is numeric
prom_sheet_data$year_quit_smoking <- as.numeric(prom_sheet_data$year_quit_smoking)
prom_sheet_data$year_quit_vaping <- as.numeric(prom_sheet_data$year_quit_vaping)

# Ensure that the date columns are consistent
colnames(prom_sheet_data)[colnames(prom_sheet_data) == "date"] <- "prom_datasheet_record_date"
colnames(basmi_sheet_data)[colnames(basmi_sheet_data) == "date"] <- "basmi_datasheet_record_date"
colnames(drug_sheet_data)[colnames(drug_sheet_data) == "start_date"] <- "drug_start_date"

# Convert all date columns to a consistent format
prom_sheet_data$prom_datasheet_record_date <- as.Date(prom_sheet_data$prom_datasheet_record_date, format = "%d/%m/%Y")
basmi_sheet_data$basmi_datasheet_record_date <- as.Date(basmi_sheet_data$basmi_datasheet_record_date, format = "%d/%m/%Y")
drug_sheet_data$drug_start_date <- as.Date(drug_sheet_data$drug_start_date, format = "%d/%m/%Y")
drug_sheet_data$stop_date <- as.Date(drug_sheet_data$stop_date, format = "%d/%m/%Y")
```

```{r, include=FALSE}
# Ensure that categorical variables are factors
demographics_sheet_data$ttas_id <- as.factor(demographics_sheet_data$ttas_id)
demographics_sheet_data$diagnosis <- as.factor(demographics_sheet_data$diagnosis)
demographics_sheet_data$gender <- as.factor(demographics_sheet_data$gender)
demographics_sheet_data$hlab27status <- as.factor(demographics_sheet_data$hlab27status)

basmi_sheet_data$ttas_id <- as.factor(basmi_sheet_data$ttas_id)

prom_sheet_data$ttas_id <- as.factor(prom_sheet_data$ttas_id)
prom_sheet_data$type_of_appointment_4 <- as.factor(prom_sheet_data$type_of_appointment_4)
prom_sheet_data$type_of_appointment_5 <- as.factor(prom_sheet_data$type_of_appointment_5)
prom_sheet_data$do_you_smoke <- as.factor(prom_sheet_data$do_you_smoke)
prom_sheet_data$ecigarettes <- as.factor(prom_sheet_data$ecigarettes)

drug_sheet_data$ttas_id <- as.factor(drug_sheet_data$ttas_id)
drug_sheet_data$high_cost_drug_name <- as.factor(drug_sheet_data$high_cost_drug_name)
drug_sheet_data$x3 <- as.factor(drug_sheet_data$x3)
drug_sheet_data$high_cost_drug_stop_reason <- as.factor(drug_sheet_data$high_cost_drug_stop_reason)
drug_sheet_data$high_cost_drug_stop_reason_text <- as.factor(drug_sheet_data$high_cost_drug_stop_reason_text)
drug_sheet_data$comment <- as.factor(drug_sheet_data$comment)
```

```{r, include=FALSE}
# Demographics data cleaning
# 1. Replace all unknown and blank values with NA
demographics_sheet_data <- demographics_sheet_data %>%
  mutate(across(where(is.character), ~na_if(., "Unknown"))) #%>%
  # mutate(across(where(is.character), ~na_if(., "")))

# 2. However, if the hlba27status is "NA" or "Unknown", replace it with "undiagnosed"
demographics_sheet_data <- demographics_sheet_data %>%
  mutate(hlab27status = case_when(
    is.na(hlab27status) ~ "undiagnosed",
    hlab27status == "Unknown" ~ "undiagnosed",
    TRUE ~ hlab27status
  ))
```

```{r, include=FALSE}
# 2. Replace negative value of age_at_onset with NA for ttas_id 375 and 623
subset_data_375 <- demographics_sheet_data[demographics_sheet_data$ttas_id == 375, c("ttas_id", "age_at_onset")]
cat("Before, ttas_id for 375: ttas_id=", subset_data_375$ttas_id, ", age_at_onset=", subset_data_375$age_at_onset, "\n")
subset_data_623 <- demographics_sheet_data[demographics_sheet_data$ttas_id == 623, c("ttas_id", "age_at_onset")]
cat("Before, ttas_id for 623: ttas_id=", subset_data_623$ttas_id, ", age_at_onset=", subset_data_623$age_at_onset, "\n")

# New code
demographics_sheet_data$age_at_onset <- ifelse(demographics_sheet_data$age_at_onset < 0, NA, demographics_sheet_data$age_at_onset)

subset_data_375 <- demographics_sheet_data[demographics_sheet_data$ttas_id == 375, c("ttas_id", "age_at_onset")]
cat("After, ttas_id for 375: ttas_id=", subset_data_375$ttas_id, ", age_at_onset=", subset_data_375$age_at_onset, "\n")
subset_data_623 <- demographics_sheet_data[demographics_sheet_data$ttas_id == 623, c("ttas_id", "age_at_onset")]
cat("After, ttas_id for 623: ttas_id=", subset_data_623$ttas_id, ", age_at_onset=", subset_data_623$age_at_onset, "\n")
```

```{r, include=FALSE}
# Manual intervention for ttas_id 13, 72, 156, 230, 792, 974, 1105, 1099, 1224
# For ttas_id 13, if x3 is Benepali but stop_date is NA, set stop_date to current date
write.csv(drug_sheet_data, "temp_manual_intervetion_check_before.csv", row.names = FALSE)

drug_sheet_data <- drug_sheet_data %>%
  mutate(
    stop_date = case_when(
      ttas_id == 13 & x3 == "Benepali" & is.na(stop_date) ~ Sys.Date(),
      TRUE ~ stop_date
    ))

# For ttas_id 72, if x3 is Cosentyx but stop_date is NA, set stop_date to current date
drug_sheet_data <- drug_sheet_data %>%
  mutate(
    stop_date = case_when(
      ttas_id == 72 & x3 == "Cosentyx" & is.na(stop_date) ~ Sys.Date(),
      TRUE ~ stop_date
    ))

# For ttas_id 155, if x3 is Cosentyx but stop_date is NA, set stop_date to current date
drug_sheet_data <- drug_sheet_data %>%
  mutate(
    stop_date = case_when(
      ttas_id == 155 & x3 == "Cosentyx" & is.na(stop_date) ~ Sys.Date(),
      TRUE ~ stop_date
    ))

# For ttas_id 156, if x3 is Imraldi but stop_date is NA, set stop_date to current date
drug_sheet_data <- drug_sheet_data %>%
  mutate(
    stop_date = case_when(
      ttas_id == 156 & x3 == "Imraldi" & is.na(stop_date) ~ Sys.Date(),
      TRUE ~ stop_date
    ))

# For ttas_id 230, if x3 is Imraldi but stop_date is NA, set stop_date to current date
drug_sheet_data <- drug_sheet_data %>%
  mutate(
    stop_date = case_when(
      ttas_id == 230 & x3 == "Imraldi" & is.na(stop_date) ~ Sys.Date(),
      TRUE ~ stop_date
    ))

# For ttas_id 792, if x3 is Simponi but stop_date is NA, set stop_date to current date
drug_sheet_data <- drug_sheet_data %>%
  mutate(
    stop_date = case_when(
      ttas_id == 792 & x3 == "Simponi" & is.na(stop_date) ~ Sys.Date(),
      TRUE ~ stop_date
    ))

# For ttas_id 984, if x3 is Cosentyx but stop_date is NA, set stop_date to current date
drug_sheet_data <- drug_sheet_data %>%
  mutate(
    stop_date = case_when(
      ttas_id == 984 & x3 == "Cosentyx" & is.na(stop_date) ~ Sys.Date(),
      TRUE ~ stop_date
    ))

# For ttas_id 1105, if x3 is Cosentyx but stop_date is NA, set stop_date to current date
drug_sheet_data <- drug_sheet_data %>%
  mutate(
    stop_date = case_when(
      ttas_id == 1105 & x3 == "Cosentyx" & is.na(stop_date) ~ Sys.Date(),
      TRUE ~ stop_date
    ))

# For ttas_id 1099
# No stop_date for past treatment Yuflyma, assume stop_date is 19/02/2024 which is one day before next entry
# For ttas_id 1099, if x3 is Yuflyma but stop_date is NA, set stop_date to 19/02/2024
drug_sheet_data <- drug_sheet_data %>%
  mutate(
    stop_date = case_when(
      ttas_id == 1099 & x3 == "Yuflyma" & is.na(stop_date) ~ as.Date("2024-02-19"),
      TRUE ~ stop_date
    ))

# One of the Cosentyx entry for this patient has a stop_date of 15/01/2024 but start date of 20/02/2024, which is incorrect.
# Change the 15/01/2024 stop_date to current date
drug_sheet_data <- drug_sheet_data %>%
  mutate(
    stop_date = case_when(
      ttas_id == 1099 & x3 == "Cosentyx" & stop_date == as.Date("2024-01-15") ~ Sys.Date(),
      TRUE ~ stop_date
    ))

# For ttas_id 1224, if x3 is Benepali but stop_date is NA, set stop_date to current date
drug_sheet_data <- drug_sheet_data %>%
  mutate(
    stop_date = case_when(
      ttas_id == 1224 & x3 == "Benepali" & is.na(stop_date) ~ Sys.Date(),
      TRUE ~ stop_date
    ))

write.csv(drug_sheet_data, "temp_manual_intervetion_check_after.csv", row.names = FALSE)
```

```{r, include=FALSE}
# Summary of demographics_sheet_data
kable(summary(demographics_sheet_data)) %>% kable_styling(bootstrap_options = "striped", full_width = F)
```

```{r, include=FALSE}
# # Old code
# # The final calculation for ASQOL is wrong, replace blank values with 0 and recalculate the final score for any rows with a non-blank value in as_qol
# # Define a list of columns named 'asqol_cols' containing the columns that are used to calculate the final ASQOL score
# asqol_cols <- c("asqol_1", "asqol_2", "asqol_3", "asqol_4", "asqol_5", "asqol_6", "asqol_7", "asqol_8", "asqol_9", "asqol_10", "asqol_11", "asqol_12", "asqol_13", "asqol_14", "asqol_15", "asqol_16", "asqol_17", "asqol_18, as_qol")
# asqol_cols_1_to_18 <- c("asqol_1", "asqol_2", "asqol_3", "asqol_4", "asqol_5", "asqol_6", "asqol_7", "asqol_8", "asqol_9", "asqol_10", "asqol_11", "asqol_12", "asqol_13", "asqol_14", "asqol_15", "asqol_16", "asqol_17", "asqol_18")
# 
# # Define the function to recalculate the final ASQOL score
# recalculate_asqol <- function(row) {
#   # Check if any of the columns in `asqol_cols` are blank for a single row
#   # If blank, return NA
#   if (all(is.na(row[asqol_cols]))) {
#     return(NA)
# }
#   
#   # Else, fill the blank values with 0 for asqol_1 to asqol_18
#   row[asqol_cols_1_to_18][is.na(row[asqol_cols_1_to_18])] <- 0
#   
#   # Calculate the final ASQOL score
#   return(sum(as.numeric(row[asqol_cols_1_to_18])))
# }
# 
# # Apply the recalculation function to each row and store the result in a new column `final_asqol`
# prom_sheet_data$corrected_asqol <- apply(prom_sheet_data, 1, recalculate_asqol)
# 
# # Remake asqol_1 to asqol_18 a factor
# prom_sheet_data$asqol_1 <- as.factor(prom_sheet_data$asqol_1)
# prom_sheet_data$asqol_2 <- as.factor(prom_sheet_data$asqol_2)
# prom_sheet_data$asqol_3 <- as.factor(prom_sheet_data$asqol_3)
# prom_sheet_data$asqol_4 <- as.factor(prom_sheet_data$asqol_4)
# prom_sheet_data$asqol_5 <- as.factor(prom_sheet_data$asqol_5)
# prom_sheet_data$asqol_6 <- as.factor(prom_sheet_data$asqol_6)
# prom_sheet_data$asqol_7 <- as.factor(prom_sheet_data$asqol_7)
# prom_sheet_data$asqol_8 <- as.factor(prom_sheet_data$asqol_8)
# prom_sheet_data$asqol_9 <- as.factor(prom_sheet_data$asqol_9)
# prom_sheet_data$asqol_10 <- as.factor(prom_sheet_data$asqol_10)
# prom_sheet_data$asqol_11 <- as.factor(prom_sheet_data$asqol_11)
# prom_sheet_data$asqol_12 <- as.factor(prom_sheet_data$asqol_12)
# prom_sheet_data$asqol_13 <- as.factor(prom_sheet_data$asqol_13)
# prom_sheet_data$asqol_14 <- as.factor(prom_sheet_data$asqol_14)
# prom_sheet_data$asqol_15 <- as.factor(prom_sheet_data$asqol_15)
# prom_sheet_data$asqol_16 <- as.factor(prom_sheet_data$asqol_16)
# prom_sheet_data$asqol_17 <- as.factor(prom_sheet_data$asqol_17)
# prom_sheet_data$asqol_18 <- as.factor(prom_sheet_data$asqol_18)
# ```
# 
# ```{r, include=FALSE}
# # The final calculation for FACIT is wrong, replace blank values with 0 and recalculate the final score for any rows with a non-blank value in facit
# # Define a list of columns named 'facit_cols' containing the columns that are used to calculate the final FACIT score
# facit_cols <- c("facit_1", "facit_2", "facit_3", "facit_4", "facit_5", "facit_6", "facit_7", "facit_8", "facit_9", "facit_10", "facit_11", "facit_12", "facit_13", "facit")
# facit_cols_1_to_13 <- c("facit_1", "facit_2", "facit_3", "facit_4", "facit_5", "facit_6", "facit_7", "facit_8", "facit_9", "facit_10", "facit_11", "facit_12", "facit_13")
# 
# # Define the function to recalculate the final FACIT score
# recalculate_facit <- function(row) {
#   # Check if any of the columns in `facit_cols` are blank for a single row
#   # If blank, return NA
#   if (all(is.na(row[facit_cols]))) {
#     return(NA)
# }
#   
#   # Else, fill the blank values with 0 for facit_1 to facit_13
#   row[facit_cols_1_to_13][is.na(row[facit_cols_1_to_13])] <- 0
#   
#   # Calculate the final FACIT score
#   return(sum(as.numeric(row[facit_cols_1_to_13])))
# }
# 
# # Apply the recalculation function to each row and store the result in a new column `final_facit`
# prom_sheet_data$corrected_facit <- apply(prom_sheet_data, 1, recalculate_facit)
```

```{r, include=FALSE}
# TODO: Clean smoking and vaping columns
# Cleaning the do_you_smoke column
# Check for ttas_id that has more than one do_you_smoke column
prom_sheet_data_clean_smoke <- prom_sheet_data %>%
  filter(!is.na(do_you_smoke)) %>%  # Remove rows where do_you_smoke is NA
  group_by(ttas_id) %>%
  filter(n_distinct(do_you_smoke) > 1) %>%
  distinct(ttas_id, do_you_smoke)

write_csv(prom_sheet_data_clean_smoke, "test_check_smoking_data.csv")

# Cleaning the ecigarettes column
# Check for ttas_id that has more than one ecigarettes column
prom_sheet_data_clean_ecigarettes <- prom_sheet_data %>%
  filter(!is.na(ecigarettes)) %>%  # Remove rows where ecigarettes is NA
  group_by(ttas_id) %>%
  filter(n_distinct(ecigarettes) > 1) %>%
  distinct(ttas_id, ecigarettes)

write_csv(prom_sheet_data_clean_ecigarettes, "test_check_ecigarettes_data.csv")
```

```{r, include=FALSE}
# If contradiction exists, treat data for this patient as unreliable
# Manual intervention for ttas_id 7: Contains contradicting information
# Convert Never to NA
prom_sheet_data <- prom_sheet_data %>%
  mutate(do_you_smoke = case_when(
    ttas_id == 7 & do_you_smoke == "Never" ~ NA_character_,
    ttas_id == 7 & do_you_smoke == "Ex-smoker" ~ NA_character_,
    ttas_id == 7 & do_you_smoke == "Currently smoke" ~ NA_character_,
    TRUE ~ do_you_smoke
  ))

# Manual intervention for ttas_id 72: Contains contradicting information
# Convert Never to NA
prom_sheet_data <- prom_sheet_data %>%
  mutate(do_you_smoke = case_when(
    ttas_id == 72 & do_you_smoke == "Never" ~ NA_character_,
    ttas_id == 72 & do_you_smoke == "Ex-smoker" ~ NA_character_,
    ttas_id == 72 & do_you_smoke == "Currently smoke" ~ NA_character_,
    TRUE ~ do_you_smoke
  ))

# Manual intervention for ttas_id 118: Contains contradicting information
# Convert Ex-smoker to NA
# Convert Never to NA
prom_sheet_data <- prom_sheet_data %>%
  mutate(do_you_smoke = case_when(
    ttas_id == 118 & do_you_smoke == "Ex-smoker" ~ NA_character_,
    ttas_id == 118 & do_you_smoke == "Never" ~ NA_character_,
    ttas_id == 118 & do_you_smoke == "Currently smoke" ~ NA_character_,
    TRUE ~ do_you_smoke
  ))

# Manual intervention for ttas_id 146: Contains contradicting information
# Convert Ex-smoker to NA
# Convert Never to NA
prom_sheet_data <- prom_sheet_data %>%
  mutate(do_you_smoke = case_when(
    ttas_id == 146 & do_you_smoke == "Ex-smoker" ~ NA_character_,
    ttas_id == 146 & do_you_smoke == "Never" ~ NA_character_,
    ttas_id == 146 & do_you_smoke == "Currently smoke" ~ NA_character_,
    TRUE ~ do_you_smoke
  ))

# Manual intervention for ttas_id 176: Contains contradicting information
# Convert Ex-smoker to NA (year quit smoking is 1996 but has a Never entry in 2022)
# Convert Never to NA
prom_sheet_data <- prom_sheet_data %>%
  mutate(do_you_smoke = case_when(
    ttas_id == 176 & do_you_smoke == "Ex-smoker" ~ NA_character_,
    ttas_id == 176 & do_you_smoke == "Never" ~ NA_character_,
    ttas_id == 176 & do_you_smoke == "Currently smoke" ~ NA_character_,
    TRUE ~ do_you_smoke
  ))

# Manual intervention for ttas_id 199: Contains contradicting information
# Convert Ex-smoker to NA
# Convert Never to NA
prom_sheet_data <- prom_sheet_data %>%
  mutate(do_you_smoke = case_when(
    ttas_id == 199 & do_you_smoke == "Ex-smoker" ~ NA_character_,
    ttas_id == 199 & do_you_smoke == "Never" ~ NA_character_,
    ttas_id == 199 & do_you_smoke == "Currently smoke" ~ NA_character_,
    TRUE ~ do_you_smoke
  ))

# Manual intervention for ttas_id 214: Contains contradicting information, different values for year_quit_smoking
# Convert Ex-smoker to NA
# Convert Never to NA
prom_sheet_data <- prom_sheet_data %>%
  mutate(do_you_smoke = case_when(
    ttas_id == 214 & do_you_smoke == "Ex-smoker" ~ NA_character_,
    ttas_id == 214 & do_you_smoke == "Never" ~ NA_character_,
    ttas_id == 214 & do_you_smoke == "Currently smoke" ~ NA_character_,
    TRUE ~ do_you_smoke
  ))

# Manual intervention for ttas_id 266: Contains contradicting information
# Convert Ex-smoker to NA (year quit smoking is 2008 but has a Never entry in 2022)
# Convert Never to NA
prom_sheet_data <- prom_sheet_data %>%
  mutate(do_you_smoke = case_when(
    ttas_id == 266 & do_you_smoke == "Ex-smoker" ~ NA_character_,
    ttas_id == 266 & do_you_smoke == "Never" ~ NA_character_,
    ttas_id == 266 & do_you_smoke == "Currently smoke" ~ NA_character_,
    TRUE ~ do_you_smoke
  ))

# Manual intervention for ttas_id 306: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(do_you_smoke = case_when(
    ttas_id == 306 & do_you_smoke == "Ex-smoker" ~ NA_character_,
    ttas_id == 306 & do_you_smoke == "Never" ~ NA_character_,
    ttas_id == 306 & do_you_smoke == "Currently smoke" ~ NA_character_,
    TRUE ~ do_you_smoke
  ))

# Manual intervention for ttas_id 325: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(do_you_smoke = case_when(
    ttas_id == 325 & do_you_smoke == "Ex-smoker" ~ NA_character_,
    ttas_id == 325 & do_you_smoke == "Never" ~ NA_character_,
    ttas_id == 325 & do_you_smoke == "Currently smoke" ~ NA_character_,
    TRUE ~ do_you_smoke
  ))

# Manual intervention for ttas_id 409: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(do_you_smoke = case_when(
    ttas_id == 409 & do_you_smoke == "Ex-smoker" ~ NA_character_,
    ttas_id == 409 & do_you_smoke == "Never" ~ NA_character_,
    ttas_id == 409 & do_you_smoke == "Currently smoke" ~ NA_character_,
    TRUE ~ do_you_smoke
  ))

# Manual intervention for ttas_id 411: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(do_you_smoke = case_when(
    ttas_id == 411 & do_you_smoke == "Ex-smoker" ~ NA_character_,
    ttas_id == 411 & do_you_smoke == "Never" ~ NA_character_,
    ttas_id == 411 & do_you_smoke == "Currently smoke" ~ NA_character_,
    TRUE ~ do_you_smoke
  ))

# Manual intervention for ttas_id 428: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(do_you_smoke = case_when(
    ttas_id == 428 & do_you_smoke == "Ex-smoker" ~ NA_character_,
    ttas_id == 428 & do_you_smoke == "Never" ~ NA_character_,
    ttas_id == 428 & do_you_smoke == "Currently smoke" ~ NA_character_,
    TRUE ~ do_you_smoke
  ))

# Manual intervention for ttas_id 440: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(do_you_smoke = case_when(
    ttas_id == 440 & do_you_smoke == "Ex-smoker" ~ NA_character_,
    ttas_id == 440 & do_you_smoke == "Never" ~ NA_character_,
    ttas_id == 440 & do_you_smoke == "Currently smoke" ~ NA_character_,
    TRUE ~ do_you_smoke
  ))

# Manual intervention for ttas_id 453: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(do_you_smoke = case_when(
    ttas_id == 453 & do_you_smoke == "Ex-smoker" ~ NA_character_,
    ttas_id == 453 & do_you_smoke == "Never" ~ NA_character_,
    ttas_id == 453 & do_you_smoke == "Currently smoke" ~ NA_character_,
    TRUE ~ do_you_smoke
  ))

# Manual intervention for ttas_id 496: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(do_you_smoke = case_when(
    ttas_id == 496 & do_you_smoke == "Ex-smoker" ~ NA_character_,
    ttas_id == 496 & do_you_smoke == "Never" ~ NA_character_,
    ttas_id == 496 & do_you_smoke == "Currently smoke" ~ NA_character_,
    TRUE ~ do_you_smoke
  ))

# Manual intervention for ttas_id 722: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(do_you_smoke = case_when(
    ttas_id == 722 & do_you_smoke == "Ex-smoker" ~ NA_character_,
    ttas_id == 722 & do_you_smoke == "Never" ~ NA_character_,
    ttas_id == 722 & do_you_smoke == "Currently smoke" ~ NA_character_,
    TRUE ~ do_you_smoke
  ))

# Manual intervention for ttas_id 751: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(do_you_smoke = case_when(
    ttas_id == 751 & do_you_smoke == "Ex-smoker" ~ NA_character_,
    ttas_id == 751 & do_you_smoke == "Never" ~ NA_character_,
    ttas_id == 751 & do_you_smoke == "Currently smoke" ~ NA_character_,
    TRUE ~ do_you_smoke
  ))

# Manual intervention for ttas_id 763: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(do_you_smoke = case_when(
    ttas_id == 763 & do_you_smoke == "Ex-smoker" ~ NA_character_,
    ttas_id == 763 & do_you_smoke == "Never" ~ NA_character_,
    ttas_id == 763 & do_you_smoke == "Currently smoke" ~ NA_character_,
    TRUE ~ do_you_smoke
  ))

# Manual intervention for ttas_id 771: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(do_you_smoke = case_when(
    ttas_id == 771 & do_you_smoke == "Ex-smoker" ~ NA_character_,
    ttas_id == 771 & do_you_smoke == "Never" ~ NA_character_,
    ttas_id == 771 & do_you_smoke == "Currently smoke" ~ NA_character_,
    TRUE ~ do_you_smoke
  ))

# Manual intervention for ttas_id 788: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(do_you_smoke = case_when(
    ttas_id == 788 & do_you_smoke == "Ex-smoker" ~ NA_character_,
    ttas_id == 788 & do_you_smoke == "Never" ~ NA_character_,
    ttas_id == 788 & do_you_smoke == "Currently smoke" ~ NA_character_,
    TRUE ~ do_you_smoke
  ))

# Manual intervention for ttas_id 800 Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(do_you_smoke = case_when(
    ttas_id == 800 & do_you_smoke == "Ex-smoker" ~ NA_character_,
    ttas_id == 800 & do_you_smoke == "Never" ~ NA_character_,
    ttas_id == 800 & do_you_smoke == "Currently smoke" ~ NA_character_,
    TRUE ~ do_you_smoke
  ))

# Manual intervention for ttas_id 811: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(do_you_smoke = case_when(
    ttas_id == 811 & do_you_smoke == "Ex-smoker" ~ NA_character_,
    ttas_id == 811 & do_you_smoke == "Never" ~ NA_character_,
    ttas_id == 811 & do_you_smoke == "Currently smoke" ~ NA_character_,
    TRUE ~ do_you_smoke
  ))

# Manual intervention for ttas_id 823: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(do_you_smoke = case_when(
    ttas_id == 823 & do_you_smoke == "Ex-smoker" ~ NA_character_,
    ttas_id == 823 & do_you_smoke == "Never" ~ NA_character_,
    ttas_id == 823 & do_you_smoke == "Currently smoke" ~ NA_character_,
    TRUE ~ do_you_smoke
  ))

# Manual intervention for ttas_id 835: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(do_you_smoke = case_when(
    ttas_id == 835 & do_you_smoke == "Ex-smoker" ~ NA_character_,
    ttas_id == 835 & do_you_smoke == "Never" ~ NA_character_,
    ttas_id == 835 & do_you_smoke == "Currently smoke" ~ NA_character_,
    TRUE ~ do_you_smoke
  ))

# Manual intervention for ttas_id 857: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(do_you_smoke = case_when(
    ttas_id == 857 & do_you_smoke == "Ex-smoker" ~ NA_character_,
    ttas_id == 857 & do_you_smoke == "Never" ~ NA_character_,
    ttas_id == 857 & do_you_smoke == "Currently smoke" ~ NA_character_,
    TRUE ~ do_you_smoke
  ))

# Manual intervention for ttas_id 872: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(do_you_smoke = case_when(
    ttas_id == 872 & do_you_smoke == "Ex-smoker" ~ NA_character_,
    ttas_id == 872 & do_you_smoke == "Never" ~ NA_character_,
    ttas_id == 872 & do_you_smoke == "Currently smoke" ~ NA_character_,
    TRUE ~ do_you_smoke
  ))

# Manual intervention for ttas_id 893: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(do_you_smoke = case_when(
    ttas_id == 893 & do_you_smoke == "Ex-smoker" ~ NA_character_,
    ttas_id == 893 & do_you_smoke == "Never" ~ NA_character_,
    ttas_id == 893 & do_you_smoke == "Currently smoke" ~ NA_character_,
    TRUE ~ do_you_smoke
  ))

# Manual intervention for ttas_id 928: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(do_you_smoke = case_when(
    ttas_id == 928 & do_you_smoke == "Ex-smoker" ~ NA_character_,
    ttas_id == 928 & do_you_smoke == "Never" ~ NA_character_,
    ttas_id == 928 & do_you_smoke == "Currently smoke" ~ NA_character_,
    TRUE ~ do_you_smoke
  ))

# Manual intervention for ttas_id 935: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(do_you_smoke = case_when(
    ttas_id == 935 & do_you_smoke == "Ex-smoker" ~ NA_character_,
    ttas_id == 935 & do_you_smoke == "Never" ~ NA_character_,
    ttas_id == 935 & do_you_smoke == "Currently smoke" ~ NA_character_,
    TRUE ~ do_you_smoke
  ))

# Manual intervention for ttas_id 938: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(do_you_smoke = case_when(
    ttas_id == 938 & do_you_smoke == "Ex-smoker" ~ NA_character_,
    ttas_id == 938 & do_you_smoke == "Never" ~ NA_character_,
    ttas_id == 938 & do_you_smoke == "Currently smoke" ~ NA_character_,
    TRUE ~ do_you_smoke
  ))

# Manual intervention for ttas_id 1021: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(do_you_smoke = case_when(
    ttas_id == 1021 & do_you_smoke == "Ex-smoker" ~ NA_character_,
    ttas_id == 1021 & do_you_smoke == "Never" ~ NA_character_,
    ttas_id == 1021 & do_you_smoke == "Currently smoke" ~ NA_character_,
    TRUE ~ do_you_smoke
  ))

# Manual intervention for ttas_id 1039: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(do_you_smoke = case_when(
    ttas_id == 1039 & do_you_smoke == "Ex-smoker" ~ NA_character_,
    ttas_id == 1039 & do_you_smoke == "Never" ~ NA_character_,
    ttas_id == 1039 & do_you_smoke == "Currently smoke" ~ NA_character_,
    TRUE ~ do_you_smoke
  ))

# Manual intervention for ttas_id 1040: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(do_you_smoke = case_when(
    ttas_id == 1040 & do_you_smoke == "Ex-smoker" ~ NA_character_,
    ttas_id == 1040 & do_you_smoke == "Never" ~ NA_character_,
    ttas_id == 1040 & do_you_smoke == "Currently smoke" ~ NA_character_,
    TRUE ~ do_you_smoke
  ))

# Manual intervention for ttas_id 1055: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(do_you_smoke = case_when(
    ttas_id == 1055 & do_you_smoke == "Ex-smoker" ~ NA_character_,
    ttas_id == 1055 & do_you_smoke == "Never" ~ NA_character_,
    ttas_id == 1055 & do_you_smoke == "Currently smoke" ~ NA_character_,
    TRUE ~ do_you_smoke
  ))

# Manual intervention for ttas_id 1064: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(do_you_smoke = case_when(
    ttas_id == 1064 & do_you_smoke == "Ex-smoker" ~ NA_character_,
    ttas_id == 1064 & do_you_smoke == "Never" ~ NA_character_,
    ttas_id == 1064 & do_you_smoke == "Currently smoke" ~ NA_character_,
    TRUE ~ do_you_smoke
  ))

# Manual intervention for ttas_id 1083: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(do_you_smoke = case_when(
    ttas_id == 1083 & do_you_smoke == "Ex-smoker" ~ NA_character_,
    ttas_id == 1083 & do_you_smoke == "Never" ~ NA_character_,
    ttas_id == 1083 & do_you_smoke == "Currently smoke" ~ NA_character_,
    TRUE ~ do_you_smoke
  ))

# Manual intervention for ttas_id 1086: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(do_you_smoke = case_when(
    ttas_id == 1086 & do_you_smoke == "Ex-smoker" ~ NA_character_,
    ttas_id == 1086 & do_you_smoke == "Never" ~ NA_character_,
    ttas_id == 1086 & do_you_smoke == "Currently smoke" ~ NA_character_,
    TRUE ~ do_you_smoke
  ))

# Manual intervention for ttas_id 1103: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(do_you_smoke = case_when(
    ttas_id == 1103 & do_you_smoke == "Ex-smoker" ~ NA_character_,
    ttas_id == 1103 & do_you_smoke == "Never" ~ NA_character_,
    ttas_id == 1103 & do_you_smoke == "Currently smoke" ~ NA_character_,
    TRUE ~ do_you_smoke
  ))

# Manual intervention for ttas_id 1110: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(do_you_smoke = case_when(
    ttas_id == 1110 & do_you_smoke == "Ex-smoker" ~ NA_character_,
    ttas_id == 1110 & do_you_smoke == "Never" ~ NA_character_,
    ttas_id == 1110 & do_you_smoke == "Currently smoke" ~ NA_character_,
    TRUE ~ do_you_smoke
  ))

# Manual intervention for ttas_id 1137: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(do_you_smoke = case_when(
    ttas_id == 1137 & do_you_smoke == "Ex-smoker" ~ NA_character_,
    ttas_id == 1137 & do_you_smoke == "Never" ~ NA_character_,
    ttas_id == 1137 & do_you_smoke == "Currently smoke" ~ NA_character_,
    TRUE ~ do_you_smoke
  ))

# Manual intervention for ttas_id 1207: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(do_you_smoke = case_when(
    ttas_id == 1207 & do_you_smoke == "Ex-smoker" ~ NA_character_,
    ttas_id == 1207 & do_you_smoke == "Never" ~ NA_character_,
    ttas_id == 1207 & do_you_smoke == "Currently smoke" ~ NA_character_,
    TRUE ~ do_you_smoke
  ))

# Manual intervention for ttas_id 1233: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(do_you_smoke = case_when(
    ttas_id == 1233 & do_you_smoke == "Ex-smoker" ~ NA_character_,
    ttas_id == 1233 & do_you_smoke == "Never" ~ NA_character_,
    ttas_id == 1233 & do_you_smoke == "Currently smoke" ~ NA_character_,
    TRUE ~ do_you_smoke
  ))
```

```{r, include=FALSE}
# Manual intervention for ttas_id 73: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(ecigarettes = case_when(
    ttas_id == 73 & ecigarettes == "Previously used E-cigarettes" ~ NA_character_,
    ttas_id == 73 & ecigarettes == "Currently use E-cigarettes" ~ NA_character_,
    ttas_id == 73 & ecigarettes == "Never" ~ NA_character_,
    TRUE ~ ecigarettes
  ))

# Manual intervention for ttas_id 74: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(ecigarettes = case_when(
    ttas_id == 74 & ecigarettes == "Previously used E-cigarettes" ~ NA_character_,
    ttas_id == 74 & ecigarettes == "Currently use E-cigarettes" ~ NA_character_,
    ttas_id == 74 & ecigarettes == "Never" ~ NA_character_,
    TRUE ~ ecigarettes
  ))

# Manual intervention for ttas_id 133: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(ecigarettes = case_when(
    ttas_id == 133 & ecigarettes == "Previously used E-cigarettes" ~ NA_character_,
    ttas_id == 133 & ecigarettes == "Currently use E-cigarettes" ~ NA_character_,
    ttas_id == 133 & ecigarettes == "Never" ~ NA_character_,
    TRUE ~ ecigarettes
  ))

# Manual intervention for ttas_id 201: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(ecigarettes = case_when(
    ttas_id == 201 & ecigarettes == "Previously used E-cigarettes" ~ NA_character_,
    ttas_id == 201 & ecigarettes == "Currently use E-cigarettes" ~ NA_character_,
    ttas_id == 201 & ecigarettes == "Never" ~ NA_character_,
    TRUE ~ ecigarettes
  ))

# Manual intervention for ttas_id 280: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(ecigarettes = case_when(
    ttas_id == 280 & ecigarettes == "Previously used E-cigarettes" ~ NA_character_,
    ttas_id == 280 & ecigarettes == "Currently use E-cigarettes" ~ NA_character_,
    ttas_id == 280 & ecigarettes == "Never" ~ NA_character_,
    TRUE ~ ecigarettes
  ))

# Manual intervention for ttas_id 448: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(ecigarettes = case_when(
    ttas_id == 448 & ecigarettes == "Previously used E-cigarettes" ~ NA_character_,
    ttas_id == 448 & ecigarettes == "Currently use E-cigarettes" ~ NA_character_,
    ttas_id == 448 & ecigarettes == "Never" ~ NA_character_,
    TRUE ~ ecigarettes
  ))

# Manual intervention for ttas_id 759: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(ecigarettes = case_when(
    ttas_id == 759 & ecigarettes == "Previously used E-cigarettes" ~ NA_character_,
    ttas_id == 759 & ecigarettes == "Currently use E-cigarettes" ~ NA_character_,
    ttas_id == 759 & ecigarettes == "Never" ~ NA_character_,
    TRUE ~ ecigarettes
  ))

# Manual intervention for ttas_id 771: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(ecigarettes = case_when(
    ttas_id == 771 & ecigarettes == "Previously used E-cigarettes" ~ NA_character_,
    ttas_id == 771 & ecigarettes == "Currently use E-cigarettes" ~ NA_character_,
    ttas_id == 771 & ecigarettes == "Never" ~ NA_character_,
    TRUE ~ ecigarettes
  ))

# Manual intervention for ttas_id 888: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(ecigarettes = case_when(
    ttas_id == 888 & ecigarettes == "Previously used E-cigarettes" ~ NA_character_,
    ttas_id == 888 & ecigarettes == "Currently use E-cigarettes" ~ NA_character_,
    ttas_id == 888 & ecigarettes == "Never" ~ NA_character_,
    TRUE ~ ecigarettes
  ))

# Manual intervention for ttas_id 907: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(ecigarettes = case_when(
    ttas_id == 907 & ecigarettes == "Previously used E-cigarettes" ~ NA_character_,
    ttas_id == 907 & ecigarettes == "Currently use E-cigarettes" ~ NA_character_,
    ttas_id == 907 & ecigarettes == "Never" ~ NA_character_,
    TRUE ~ ecigarettes
  ))

# Manual intervention for ttas_id 926: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(ecigarettes = case_when(
    ttas_id == 926 & ecigarettes == "Previously used E-cigarettes" ~ NA_character_,
    ttas_id == 926 & ecigarettes == "Currently use E-cigarettes" ~ NA_character_,
    ttas_id == 926 & ecigarettes == "Never" ~ NA_character_,
    TRUE ~ ecigarettes
  ))

# Manual intervention for ttas_id 955: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(ecigarettes = case_when(
    ttas_id == 955 & ecigarettes == "Previously used E-cigarettes" ~ NA_character_,
    ttas_id == 955 & ecigarettes == "Currently use E-cigarettes" ~ NA_character_,
    ttas_id == 955 & ecigarettes == "Never" ~ NA_character_,
    TRUE ~ ecigarettes
  ))

# Manual intervention for ttas_id 1077: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(ecigarettes = case_when(
    ttas_id == 1077 & ecigarettes == "Previously used E-cigarettes" ~ NA_character_,
    ttas_id == 1077 & ecigarettes == "Currently use E-cigarettes" ~ NA_character_,
    ttas_id == 1077 & ecigarettes == "Never" ~ NA_character_,
    TRUE ~ ecigarettes
  ))

# Manual intervention for ttas_id 1083: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(ecigarettes = case_when(
    ttas_id == 1083 & ecigarettes == "Previously used E-cigarettes" ~ NA_character_,
    ttas_id == 1083 & ecigarettes == "Currently use E-cigarettes" ~ NA_character_,
    ttas_id == 1083 & ecigarettes == "Never" ~ NA_character_,
    TRUE ~ ecigarettes
  ))

# Manual intervention for ttas_id 1085: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(ecigarettes = case_when(
    ttas_id == 1085 & ecigarettes == "Previously used E-cigarettes" ~ NA_character_,
    ttas_id == 1085 & ecigarettes == "Currently use E-cigarettes" ~ NA_character_,
    ttas_id == 1085 & ecigarettes == "Never" ~ NA_character_,
    TRUE ~ ecigarettes
  ))

# Manual intervention for ttas_id 1137: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(ecigarettes = case_when(
    ttas_id == 1137 & ecigarettes == "Previously used E-cigarettes" ~ NA_character_,
    ttas_id == 1137 & ecigarettes == "Currently use E-cigarettes" ~ NA_character_,
    ttas_id == 1137 & ecigarettes == "Never" ~ NA_character_,
    TRUE ~ ecigarettes
  ))

# Manual intervention for ttas_id 1138: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(ecigarettes = case_when(
    ttas_id == 1138 & ecigarettes == "Previously used E-cigarettes" ~ NA_character_,
    ttas_id == 1138 & ecigarettes == "Currently use E-cigarettes" ~ NA_character_,
    ttas_id == 1138 & ecigarettes == "Never" ~ NA_character_,
    TRUE ~ ecigarettes
  ))

# Manual intervention for ttas_id 1178: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(ecigarettes = case_when(
    ttas_id == 1178 & ecigarettes == "Previously used E-cigarettes" ~ NA_character_,
    ttas_id == 1178 & ecigarettes == "Currently use E-cigarettes" ~ NA_character_,
    ttas_id == 1178 & ecigarettes == "Never" ~ NA_character_,
    TRUE ~ ecigarettes
  ))

# Manual intervention for ttas_id 1199: Contains contradicting information
prom_sheet_data <- prom_sheet_data %>%
  mutate(ecigarettes = case_when(
    ttas_id == 1199 & ecigarettes == "Previously used E-cigarettes" ~ NA_character_,
    ttas_id == 1199 & ecigarettes == "Currently use E-cigarettes" ~ NA_character_,
    ttas_id == 1199 & ecigarettes == "Never" ~ NA_character_,
    TRUE ~ ecigarettes
  ))
```

```{r, include=FALSE}
# This is justified because we do not have any exact date on the last known smoking status of the patient should they have quitted smoking year
# Create a new column for each patient's last known smoking status
# If the patient has never smoked, the value is "never"
# If the patient has quitted smoking, the value is "ex-smoker"
# If the patient is currently smoking, the value is "smoker"
# If there is no information, the value is "no information"
prom_sheet_data <- prom_sheet_data %>%
  arrange(ttas_id, prom_datasheet_record_date) %>%
  group_by(ttas_id) %>%
  # Find the latest non-NA smoking status for each ttas_id
  mutate(latest_smoke = last(na.omit(do_you_smoke)),
         last_known_smoking_status = case_when(
           latest_smoke == "Never" ~ "never",  # Handle "Never"
           latest_smoke == "Ex-smoker" ~ "ex-smoker",  # Handle "Ex-smoker"
           latest_smoke == "Currently smoke" ~ "smoker",  # Handle "Currently smoke"
           is.na(latest_smoke) ~ "no information",  # If all values are NA
           TRUE ~ "no information"
         )) %>%
  ungroup()

# Do the same for vaping
prom_sheet_data <- prom_sheet_data %>%
  arrange(ttas_id, prom_datasheet_record_date) %>%
  group_by(ttas_id) %>%
  # Find the latest non-NA vaping status for each ttas_id
  mutate(latest_vape = last(na.omit(ecigarettes)),
         last_known_vaping_status = case_when(
           latest_vape == "Never" ~ "never",  # Handle "Never"
           latest_vape == "Previously used E-cigarettes" ~ "ex-vaper",  # Handle "Previously used E-cigarettes"
           latest_vape == "Currently use E-cigarettes" ~ "vaper",  # Handle "Currently use E-cigarettes"
           is.na(latest_vape) ~ "no information",  # If all values are NA
           TRUE ~ "no information"
         )) %>%
  ungroup()

write_csv(prom_sheet_data, "test_last_known_smoking_and_vaping_status.csv")
```

```{r, include=FALSE}
# ASQOL
# Check for any negative values in as_qol and turn them into NA
prom_sheet_data$as_qol <- ifelse(prom_sheet_data$as_qol < 0, NA, prom_sheet_data$as_qol)
```

```{r, include=FALSE}
# FACIT
# Check for any negative values in facit and turn them into NA
prom_sheet_data$facit <- ifelse(prom_sheet_data$facit < 0, NA, prom_sheet_data$facit)
```

```{r, include=FALSE}
# # The final calculation for Jenkins Sleep Scale is wrong, replace blank values with 0 and recalculate the final score for any rows with a non-blank value in jenkins_sleep_scale
# # Define a list of columns named 'jenkins_sleep_scale_cols' containing the columns that are used to calculate the final Jenkins Sleep Scale score
# jenkins_sleep_scale_cols <- c("jenkins_sleep_1", "jenkins_sleep_2", "jenkins_sleep_3", "jenkins_sleep_4", "jenkins_sleep_scale")
# jenkins_sleep_scale_cols_1_to_4 <- c("jenkins_sleep_1", "jenkins_sleep_2", "jenkins_sleep_3", "jenkins_sleep_4")
# 
# # Define the function to recalculate the final Jenkins Sleep Scale score
# recalculate_jenkins_sleep_scale <- function(row) {
#   # Check if any of the columns in `jenkins_sleep_scale_cols` are blank for a single row
#   # If blank, return NA
#   if (all(is.na(row[jenkins_sleep_scale_cols]))) {
#     return(NA)
#   }
#   
#   # Else, fill the blank values with 0 for jenkins_sleep_1 to jenkins_sleep_4
#   row[jenkins_sleep_scale_cols_1_to_4][is.na(row[jenkins_sleep_scale_cols_1_to_4])] <- 0
#   
#   # Calculate the final Jenkins Sleep Scale score
#   return(sum(as.numeric(row[jenkins_sleep_scale_cols_1_to_4])))
# }
# 
# # Apply the recalculation function to each row and store the result in a new column `final_jenkins_sleep_scale`
# prom_sheet_data$corrected_jenkins_sleep_scale <- apply(prom_sheet_data, 1, recalculate_jenkins_sleep_scale)
```


```{r, include=FALSE}
# Calculating the WPAI scoring
# Ensure wpai_1 to wpai_6 are numeric
prom_sheet_data$wpai_1 <- as.numeric(prom_sheet_data$wpai_1)
prom_sheet_data$wpai_2 <- as.numeric(prom_sheet_data$wpai_2)
prom_sheet_data$wpai_3 <- as.numeric(prom_sheet_data$wpai_3)
prom_sheet_data$wpai_4 <- as.numeric(prom_sheet_data$wpai_4)
prom_sheet_data$wpai_5 <- as.numeric(prom_sheet_data$wpai_5)
prom_sheet_data$wpai_6 <- as.numeric(prom_sheet_data$wpai_6)

# Presenteeism: wpai_5/10 x 100%
# Condition: wpai_1 needs to be 1 and wpai_4 needs to be non-zero
calc_presenteeism <- function(q1, q4, q5){
  if (!is.na(q1) & !is.na(q4) & !is.na(q5) & q1 == 1 & q4 != 0) {
    return((q5 / 10) * 100)
  }
  else {
    return(NA)
  }
}

# Absenteeism: (wpai_2 / (wpai_2 + wpai_3 + wpai_4)) x 100%
# Condition: wpai_1 needs to be 1
calc_absenteeism <- function(q1, q2, q3, q4){
  if (!is.na(q1) & !is.na(q2) & !is.na(q3) & !is.na(q4) & q1 == 1) {
    return((q2 / (q2 + q3 + q4)) * 100)
  }
  else {
    return(NA)
  }
}

# WPL
# Condition: wpai_1 needs to be 1 and wpai_4 needs to be non-zero
calc_wpl <- function(q1, q2, q4, q5){
  if (!is.na(q1) & !is.na(q2) & !is.na(q4) & !is.na(q5) & q1 == 1 & q4 != 0) {
    return(((q2 / (q2 + q4)) + ((1 - (q2 / (q2 + q4))) * (q5 / 10))) * 100)
  } else {
    return(NA)
  }
}

# Daily activity impairment
calc_daily_activity_impairment <- function(q6) {
  if (!is.na(q6)) {
    return((q6 / 10) * 100)
  } else {
    return(NA)
  }
}

# Create new columns for the WPAI scoring
prom_sheet_data <- prom_sheet_data %>% 
  rowwise() %>%
  mutate(
    presenteeism = calc_presenteeism(wpai_1, wpai_4, wpai_5),
    absenteeism = calc_absenteeism(wpai_1, wpai_2, wpai_3, wpai_4),
    wpl = calc_wpl(wpai_1, wpai_2, wpai_4, wpai_5),
    daily_activity_impairment = calc_daily_activity_impairment(wpai_6)
  ) %>% 
  ungroup()

# write_csv(prom_sheet_data, "check_wpai_data.csv")
```

```{r, include=FALSE}
# Write to csv to check the data
# write_csv(prom_sheet_data, "data_check_prom_sheet_data.csv")
```

```{r, include=FALSE}
# Histogram for age_at_onset
hist(demographics_sheet_data$age_at_onset, main = "Histogram of Age at Onset", xlab = "Age at Onset")
```

```{r, include=FALSE}
# Kernel density plot for age_at_onset
plot(density(demographics_sheet_data$age_at_onset, na.rm = TRUE), main = "Kernel Density Plot of Age at Onset", xlab = "Age at Onset")
```

```{r, include=FALSE}
# Sorted data against index for age_at_onset
plot(sort(demographics_sheet_data$age_at_onset, na.last = NA), main = "Sorted Age at Onset", xlab = "Index", ylab = "Age at Onset")
```

```{r, include=FALSE}
# Histogram for age_at_diag
hist(demographics_sheet_data$age_at_diag, main = "Histogram of Age at Diagnosis", xlab = "Age at Diagnosis")
```

```{r, include=FALSE}
# Kernel density plot for age_at_diag
plot(density(demographics_sheet_data$age_at_diag, na.rm = TRUE), main = "Kernel Density Plot of Age at Diagnosis", xlab = "Age at Diagnosis")
```

```{r, include=FALSE}
# Sorted data against index for age_at_diag
plot(sort(demographics_sheet_data$age_at_diag, na.last = NA), main = "Sorted Age at Diagnosis", xlab = "Index", ylab = "Age at Diagnosis")
```

```{r, include=FALSE}
# Histogram for age_at_diag
hist(demographics_sheet_data$age_at_diag, main = "Histogram of Age at Diagnosis", xlab = "Age at Diagnosis")
```

```{r, include=FALSE}
# Kernel density plot for age_at_diag
plot(density(demographics_sheet_data$age_at_diag, na.rm = TRUE), main = "Kernel Density Plot of Age at Diagnosis", xlab = "Age at Diagnosis")
```

```{r, include=FALSE}
# Sorted data against index for age_at_diag
plot(sort(demographics_sheet_data$age_at_diag, na.last = NA), main = "Sorted Age at Diagnosis", xlab = "Index", ylab = "Age at Diagnosis")
```

```{r, include=FALSE}
# Summary of basmi_sheet_data
kable(summary(basmi_sheet_data)) %>% kable_styling(bootstrap_options = "striped", full_width = F)

# Some basmi_patient_height doesn't make sense as it is too low
# 16 entries with basmi_patient_height < 100
# No changes made to the data for now as the BASMI score will be the core focus
```

```{r, include=FALSE}
# Histogram for age_at_basmi
hist(basmi_sheet_data$age_at_basmi, main = "Histogram of Age at BASMI", xlab = "Age at BASMI")
```

```{r, include=FALSE}
# Kernel density plot for age_at_basmi
plot(density(basmi_sheet_data$age_at_basmi, na.rm = TRUE), main = "Kernel Density Plot of Age at BASMI", xlab = "Age at BASMI")
```

```{r, include=FALSE}
# Sorted data against index for age_at_basmi
plot(sort(basmi_sheet_data$age_at_basmi, na.last = NA), main = "Sorted Age at BASMI", xlab = "Index", ylab = "Age at BASMI")
```

```{r, include=FALSE}
# Histogram for basmi_score
hist(basmi_sheet_data$basmi_score, main = "Histogram of BASMI Score", xlab = "BASMI Score")
```

```{r, include=FALSE}
# Kernel density plot for basmi_score
plot(density(basmi_sheet_data$basmi_score, na.rm = TRUE), main = "Kernel Density Plot of BASMI Score", xlab = "BASMI Score")
```

```{r, include=FALSE}
# Sorted data against index for basmi_score
plot(sort(basmi_sheet_data$basmi_score, na.last = NA), main = "Sorted BASMI Score", xlab = "Index", ylab = "BASMI Score")
```

```{r, include=TRUE}
# Plotting the BASMI score against age_at_basmi
ggplot(basmi_sheet_data, aes(x = age_at_basmi, y = basmi_score)) +
  geom_point() +
  geom_smooth(method = "loess", se = FALSE, colour = "red") +
  # geom_smooth(method = "lm", se = FALSE, colour = "blue") +
  labs(title = "BASMI Score against Age at BASMI", x = "Age at BASMI", y = "BASMI Score")

# Save the plot
ggsave("basmi_score_vs_age_at_basmi.png")
```

```{r, include=FALSE}
lm_basmi <- lm(basmi_score ~ age_at_basmi, data = basmi_sheet_data)
summary(lm_basmi)
```

```{r, include=FALSE}
# Summary of prom_sheet_data
kable(summary(prom_sheet_data)) %>% kable_styling(bootstrap_options = "striped", full_width = F)
```















```{r, include=FALSE}
# Full join the data
combined_df <- full_join(basmi_sheet_data, prom_sheet_data, 
                         by = c("ttas_id",
                                "basmi_datasheet_record_date" = "prom_datasheet_record_date"))

combined_df <- combined_df %>% arrange(ttas_id, basmi_datasheet_record_date)

combined_df <- full_join(combined_df, drug_sheet_data, 
                         by = c("ttas_id",
                                "basmi_datasheet_record_date" = "drug_start_date"))

combined_df <- combined_df %>% arrange(ttas_id, basmi_datasheet_record_date)

combined_df <- full_join(combined_df, demographics_sheet_data, by = "ttas_id")

# Rename 'basmi_datasheet_record_date' to 'date'
combined_df <- combined_df %>% rename(date = basmi_datasheet_record_date)
```

```{r, include=FALSE}
combined_df <- combined_df %>% 
  group_by(ttas_id) %>%
    # Fill NA values for last_known_smoking_status and last_known_vaping_status
  fill(last_known_smoking_status, last_known_vaping_status, .direction = "downup") %>%
  ungroup()

# If last_known_smoking_status is NA, set it to "no information"
combined_df$last_known_smoking_status[is.na(combined_df$last_known_smoking_status)] <- "no information"

# If last_known_vaping_status is NA, set it to "no information"
combined_df$last_known_vaping_status[is.na(combined_df$last_known_vaping_status)] <- "no information"
```

```{r, include=FALSE}
write_csv(combined_df, "test_combined_df.csv")
write_csv(drug_sheet_data, "test_drug_sheet_data.csv")
```

```{r, include=FALSE}
drug_colours <- c(
"Remicade" = "blue", "Remsima" = "skyblue", "Cosentyx" = "orange", 
"Humira" = "green", "Cimzia" = "purple", "Imraldi" = "red",
"Enbrel" = "brown", "Yuflyma" = "yellow", "Benepali" = "pink",
"Amgevita" = "cyan", "Simponi" = "magenta", "Stelara" = "darkgreen",
"Xeljanz" = "gold", "Mabthera" = "darkblue", "Rinvoq" = "lightgreen",
"Otezla" = "gray", "Taltz" = "lightblue", "Bimzelx" = "darkred",
"RoActemra" = "turquoise"
)

timeline_data <- combined_df %>%
  select(ttas_id, date, basmi_score, basdai, basfi, patient_global, back_pain_at_night, back_pain_anytime, as_qol, facit, jenkins_sleep_1, jenkins_sleep_2, jenkins_sleep_3, jenkins_sleep_4, presenteeism, absenteeism, wpl, daily_activity_impairment, margolis) %>%
  # select(ttas_id, date, basmi_score, basdai, basfi, as_qol) %>%
  # pivot_longer(cols = c(basmi_score, basdai, basfi, as_qol),
  pivot_longer(cols = c(basmi_score, basdai, basfi, patient_global, back_pain_at_night, back_pain_anytime, as_qol, facit, jenkins_sleep_1, jenkins_sleep_2, jenkins_sleep_3, jenkins_sleep_4, presenteeism, absenteeism, wpl, daily_activity_impairment, margolis),
               names_to = "Measure",
               values_to = "Score")

timeline_data$date <- as.Date(timeline_data$date)
drug_sheet_data$drug_start_date <- as.Date(drug_sheet_data$drug_start_date)
drug_sheet_data$stop_date <- as.Date(drug_sheet_data$stop_date)
unique_ids <- unique(timeline_data$ttas_id)
```

```{r, warning=FALSE, include=FALSE}
# output_folder <- "timeline_plots"
# dir.create(output_folder, showWarnings = FALSE)
# 
# # Create log file connection outside the loop
# log_file <- file(paste0(output_folder, "/plot_warnings.txt"), open = "wt")
# 
# # Function to capture and write all warnings to the log file
# log_warning <- function(w) {
#   cat(conditionMessage(w), file = log_file, append = TRUE, sep = "\n")
# }
# 
# for (current_id in unique_ids){
#   filtered_data <- timeline_data %>% filter(ttas_id == current_id)
#   filtered_drug_data <- drug_sheet_data %>% filter(ttas_id == current_id)
#   
#   # Replace NA stop_date values with a default (e.g., today's date)
#   filtered_drug_data <- filtered_drug_data %>%
#     mutate(
#       stop_date = if_else(
#         is.na(stop_date), 
#         Sys.Date(),  # Replace NA with today's date
#         stop_date
#       )
#     )
# 
#   # Check and log warnings in one step
#   if (nrow(filtered_data) == 0) {
#     cat(paste("No timeline data found for TTAS ID:", current_id), file = log_file, append = TRUE, sep = "\n")
#   } 
#   if (nrow(filtered_drug_data) == 0) {
#     cat(paste("No drug data found for TTAS ID:", current_id), file = log_file, append = TRUE, sep = "\n")
#   }
#   
# 
#   
#   plot <- ggplot(filtered_data, aes(x = date, y = Score, colour = Measure)) +
#     geom_point() +
#     geom_line() +
#     geom_rect(
#       data = filtered_drug_data,
#       inherit.aes = FALSE,
#       aes(
#         xmin = drug_start_date,
#         xmax = stop_date,
#         fill = x3
#       ),
#       ymin = -Inf,
#       ymax = Inf,
#       alpha = 0.5
#       ) +
#     # geom_text(
#     #   # Add drug names labels
#     #   data = filtered_drug_data,
#     #   inherit.aes = FALSE,
#     #   aes(
#     #     x = drug_start_date + (stop_date - drug_start_date) / 2,  # Calculate midpoint
#     #     y = Inf - 5,  # Offset from max Score
#     #     label = x3
#     #     ),
#     #   ) +
#     # Use a colour pallete with enough colours for all drugs
#     scale_fill_manual(values = drug_colours, na.value = "gray") +
#     facet_wrap(~ ttas_id, ncol = 1, scales = "free_y") +
#     labs(title = paste("Timeline plot for TTAS ID:", current_id))
#   
#   file_name <- paste(output_folder, "/timeline_plot_", current_id, ".png")
#   ggsave(file_name, plot, width = 10, height = 6, dpi = 300)
# }
# 
# # Close the log file connection
# close(log_file)
```

```{r, warning=FALSE, include=FALSE}
# # Filtered out ttas_id with drugs only
# ids_with_drug_data <- unique(drug_sheet_data$ttas_id)
# ids_in_timeline_data <- unique(timeline_data$ttas_id)
# 
# ids_without_drug_data <- setdiff(ids_in_timeline_data, ids_with_drug_data)
# 
# # Filter out the ttas_id without drug data
# combined_df_id_with_drugs <- combined_df %>% filter(ttas_id %in% ids_with_drug_data)
# 
# write_csv(combined_df_id_with_drugs, "test_combined_df_id_with_drugs.csv")
# 
# output_folder <- "timeline_plots_drugs_only"
# dir.create(output_folder, showWarnings = FALSE)
# 
# unique_ids_drugs_only <- unique(combined_df_id_with_drugs$ttas_id)
# 
# cat("Checking number of unique ids with drugs data: ", length(unique(combined_df_id_with_drugs$ttas_id)), "\n")
# cat("Checking declared variable is the same: ", length(unique_ids_drugs_only))
# 
# for (current_id in unique_ids_drugs_only){
#   filtered_data <- timeline_data %>% filter(ttas_id == current_id)
#   filtered_drug_data <- drug_sheet_data %>% filter(ttas_id == current_id)
#   
#   # Replace NA stop_date values with a default (e.g., today's date)
#   filtered_drug_data <- filtered_drug_data %>%
#     mutate(
#       stop_date = if_else(
#         is.na(stop_date), 
#         Sys.Date(),  # Replace NA with today's date
#         stop_date
#       )
#     )
# 
#   # Check and log warnings in one step
#   if (nrow(filtered_data) == 0) {
#     cat(paste("No timeline data found for TTAS ID:", current_id), file = log_file, append = TRUE, sep = "\n")
#   } 
#   
#   plot <- ggplot(filtered_data, aes(x = date, y = Score, colour = Measure)) +
#     geom_point() +
#     geom_line() +
#     geom_rect(
#       data = filtered_drug_data,
#       inherit.aes = FALSE,
#       aes(
#         xmin = drug_start_date,
#         xmax = stop_date,
#         fill = x3
#       ),
#       ymin = -Inf,
#       ymax = Inf,
#       alpha = 0.5
#       ) +
#     # geom_text(
#     #   # Add drug names labels
#     #   data = filtered_drug_data,
#     #   inherit.aes = FALSE,
#     #   aes(
#     #     x = drug_start_date + (stop_date - drug_start_date) / 2,  # Calculate midpoint
#     #     y = Inf - 5,  # Offset from max Score
#     #     label = x3
#     #     ),
#     #   ) +
#     # Use a colour pallete with enough colours for all drugs
#     scale_fill_manual(values = drug_colours, na.value = "gray") +
#     facet_wrap(~ ttas_id, ncol = 1, scales = "free_y") +
#     labs(title = paste("Timeline plot for TTAS ID:", current_id))
#   
#   file_name <- paste(output_folder, "/timeline_plot_", current_id, ".png")
#   ggsave(file_name, plot, width = 10, height = 6, dpi = 300)
# }
```

```{r, warning=FALSE, include=FALSE}
# Filtered out ttas_id with drugs only
ids_with_drug_data <- unique(drug_sheet_data$ttas_id)
ids_in_timeline_data <- unique(timeline_data$ttas_id)

ids_without_drug_data <- setdiff(ids_in_timeline_data, ids_with_drug_data)

# Filter out the ttas_id without drug data
combined_df_id_with_drugs <- combined_df %>% filter(ttas_id %in% ids_with_drug_data)

# write_csv(combined_df_id_with_drugs, "test_combined_df_id_with_drugs.csv")

output_folder_2 <- "timeline_plots_drugs_only_with_exclusions"
dir.create(output_folder_2, showWarnings = FALSE)

unique_ids_drugs_only <- unique(combined_df_id_with_drugs$ttas_id)

# Data cleaning
# Excluding the following ids
exclude_ids <- c(38, 555, 872, 924, 974, 988, 1028, 1032, 1035, 1038, 1051, 1069, 1144, 1149, 1162, 1197, 1212)

# Write csv without excluded ids
combined_df_id_with_drugs_excluded <- combined_df_id_with_drugs %>% filter(!ttas_id %in% exclude_ids)

# Select the columns to write to the csv
combined_df_id_with_drugs_excluded <- combined_df_id_with_drugs_excluded %>%
  select(ttas_id, gender, hlab27status, diagnosis, age_at_onset, age_at_diag, date, do_you_smoke, smoke_in_a_day, years_smoked, year_quit_smoking, ecigarettes, vape_in_a_day, years_vaped, year_quit_vaping, age_at_basmi, basmi_score, age_at_prom, basdai, basfi, patient_global, back_pain_at_night, back_pain_anytime, as_qol, jenkins_sleep_1, jenkins_sleep_2, jenkins_sleep_3, jenkins_sleep_4, presenteeism, absenteeism, wpl, daily_activity_impairment, facit, margolis, x3, stop_date, high_cost_drug_stop_reason, high_cost_drug_stop_reason_text, age_at_start_date, comment)
write_csv(combined_df_id_with_drugs_excluded, "combined_df_id_with_drugs_excluded.csv")


# Including patients with and without drug data but exclude the ids in the exclude_ids list
combined_df_with_and_without_drugs_excluded <- combined_df %>% filter(!ttas_id %in% exclude_ids)
write_csv(combined_df_with_and_without_drugs_excluded, "test_combined_df_with_and_without_drugs_excluded.csv")

# Including all patients with and without drug data: For analysis
combined_df_with_and_without_drugs <- combined_df
write_csv(combined_df_with_and_without_drugs, "test_combined_df_with_and_without_drugs.csv")
```


```{r, warning=FALSE, include=FALSE}
# Checkpoint start: Uncomment to recreate the plots
# for (current_id in unique_ids_drugs_only){
#   
#   if (current_id %in% exclude_ids) {
#     next # Skip the current iteration if the current_id is in the exclude_ids list
#   }
#   
#   filtered_data <- timeline_data %>% filter(ttas_id == current_id)
#   filtered_drug_data <- drug_sheet_data %>% filter(ttas_id == current_id)
#   
#   # Replace NA stop_date values with a default (e.g., today's date)
#   filtered_drug_data <- filtered_drug_data %>%
#     mutate(
#       stop_date = if_else(
#         is.na(stop_date), 
#         Sys.Date(),  # Replace NA with today's date
#         stop_date
#       )
#     )
# 
#   # Check and log warnings in one step
#   if (nrow(filtered_data) == 0) {
#     cat(paste("No timeline data found for TTAS ID:", current_id), file = log_file, append = TRUE, sep = "\n")
#   } 
#   
#   # Get patient info
#   patient_info <- combined_df_id_with_drugs_excluded %>% filter(ttas_id == current_id) %>% 
#     select(
#       gender, hlab27status, diagnosis, age_at_onset, age_at_diag
#     ) %>% 
#     distinct() %>%
#     unite("Gender, HLAB27 Status, Diagnosis", gender, hlab27status, diagnosis, sep = " | ", remove = FALSE, na.rm = FALSE) %>% 
#     pull("Gender, HLAB27 Status, Diagnosis")
#   
#   plot <- ggplot(filtered_data, aes(x = date, y = Score, colour = Measure)) +
#     geom_point() +
#     geom_line() +
#     geom_rect(
#       data = filtered_drug_data,
#       inherit.aes = FALSE,
#       aes(
#         xmin = drug_start_date,
#         xmax = stop_date,
#         fill = x3
#       ),
#       ymin = -Inf,
#       ymax = Inf,
#       alpha = 0.5
#       ) +
#     # geom_text(
#     #   # Add drug names labels
#     #   data = filtered_drug_data,
#     #   inherit.aes = FALSE,
#     #   aes(
#     #     x = drug_start_date + (stop_date - drug_start_date) / 2,  # Calculate midpoint
#     #     y = Inf - 5,  # Offset from max Score
#     #     label = x3
#     #     ),
#     #   ) +
#     # Use a colour pallete with enough colours for all drugs
#     scale_fill_manual(values = drug_colours, na.value = "gray") +
#     facet_wrap(~ ttas_id, ncol = 1, scales = "free_y") +
#     labs(title = paste0("Timeline plot for TTAS ID:", current_id), x = "Date", y = "Score") +
#     scale_colour_discrete(
#       labels = c(
#         "absenteeism" = "Absenteeism",
#         "as_qol" = "AsQoL",
#         "back_pain_anytime" = "Back Pain Anytime",
#         "back_pain_at_night" = "Back Pain at Night",
#         "basdai" = "BASDAI",
#         "basfi" = "BASFI",
#         "basmi_score" = "BASMI Score",
#         "daily_activity_impairment" = "Daily Activity Impairment",
#         "facit" = "FACIT",
#         "jenkins_sleep_1" = "Jenkins Sleep 1",
#         "jenkins_sleep_2" = "Jenkins Sleep 2",
#         "jenkins_sleep_3" = "Jenkins Sleep 3",
#         "jenkins_sleep_4" = "Jenkins Sleep 4",
#         "margolis" = "Margolis",
#         "patient_global" = "Patient Global",
#         "presenteeism" = "Presenteeism",
#         "wpl" = "WPL"
#       )) +
#     ggtitle(paste0("Gender, HLAB27 Status, Diagnosis: ", patient_info))
#   
#   file_name <- paste0(output_folder_2, "/", current_id, "_overall.png")
#   ggsave(file_name, plot, width = 10, height = 6, dpi = 300)
# }
```

```{r, warning=FALSE, include=FALSE}
# # Create plot for BASMI score only
# 
# timeline_data_basmi <- combined_df %>%
#   select(ttas_id, date, basmi_score) %>%
#   pivot_longer(cols = c(basmi_score),
#                names_to = "Measure",
#                values_to = "Score")
# 
# 
# for (current_id in unique_ids_drugs_only){
#   
#   if (current_id %in% exclude_ids) {
#     next # Skip the current iteration if the current_id is in the exclude_ids list
#   }
#   
#   filtered_data <- timeline_data_basmi %>% filter(ttas_id == current_id)
#   filtered_drug_data <- drug_sheet_data %>% filter(ttas_id == current_id)
#   
#   # Replace NA stop_date values with a default (e.g., today's date)
#   filtered_drug_data <- filtered_drug_data %>%
#     mutate(
#       stop_date = if_else(
#         is.na(stop_date), 
#         Sys.Date(),  # Replace NA with today's date
#         stop_date
#       )
#     )
#   
#   # Check and log warnings in one step
#   if (nrow(filtered_data) == 0) {
#     cat(paste("No timeline data found for TTAS ID:", current_id), file = log_file, append = TRUE, sep = "\n")
#   }
#   
#   # Get patient info
#   patient_info <- combined_df_id_with_drugs_excluded %>% filter(ttas_id == current_id) %>% 
#     select(
#       gender, hlab27status, diagnosis, age_at_onset, age_at_diag
#     ) %>% 
#     distinct() %>%
#     unite("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis", gender, hlab27status, diagnosis, age_at_onset, age_at_diag, sep = " | ", remove = FALSE, na.rm = FALSE) %>% 
#     pull("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis")
#   
#   plot <- ggplot(filtered_data, aes(x = date, y = Score)) +
#     geom_point() +
#     geom_line() +
#     geom_rect(
#       data = filtered_drug_data,
#       inherit.aes = FALSE,
#       aes(
#         xmin = drug_start_date,
#         xmax = stop_date,
#         fill = x3
#       ),
#       ymin = -Inf,
#       ymax = Inf,
#       alpha = 0.5
#     ) +
#     # geom_text(
#     #   # Add drug names labels
#     #   data = filtered_drug_data,
#     #   inherit.aes = FALSE,
#     #   aes(
#     #     x = drug_start_date + (stop_date - drug_start_date) / 2,  # Calculate midpoint
#     #     y = Inf - 5,  # Offset from max Score
#     #     label = x3
#     #   ),
#     # ) +
#     
#     # Use a colour pallete with enough colours for all drugs
#     scale_fill_manual(values = drug_colours, na.value = "gray") +
#     facet_wrap(~ ttas_id, ncol = 1, scales = "free_y") +
#     labs(title = paste0("BASMI timeline plot for TTAS ID:", current_id)) +
#     ggtitle(paste0("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis: ", patient_info))
#   
#   file_name <- paste0(output_folder_2, "/", current_id, "_timeline_plot_basmi.png")
#   ggsave(file_name, plot, width = 10, height = 6, dpi = 300)
# }
```

```{r, warning=FALSE, include=FALSE}
# # Create plot for BASFI score only
# 
# timeline_data_basfi <- combined_df %>%
#   select(ttas_id, date, basfi) %>%
#   pivot_longer(cols = c(basfi),
#                names_to = "Measure",
#                values_to = "Score")
# 
# for (current_id in unique_ids_drugs_only){
#   
#   if (current_id %in% exclude_ids) {
#     next # Skip the current iteration if the current_id is in the exclude_ids list
#   }
#   
#   filtered_data <- timeline_data_basfi %>% filter(ttas_id == current_id)
#   filtered_drug_data <- drug_sheet_data %>% filter(ttas_id == current_id)
#   
#   # Replace NA stop_date values with a default (e.g., today's date)
#   filtered_drug_data <- filtered_drug_data %>%
#     mutate(
#       stop_date = if_else(
#         is.na(stop_date), 
#         Sys.Date(),  # Replace NA with today's date
#         stop_date
#       )
#     )
#   
#   # Check and log warnings in one step
#   if (nrow(filtered_data) == 0) {
#     cat(paste("No timeline data found for TTAS ID:", current_id), file = log_file, append = TRUE, sep = "\n")
#   }
#   
#   # Get patient info
#   patient_info <- combined_df_id_with_drugs_excluded %>% filter(ttas_id == current_id) %>% 
#     select(
#       gender, hlab27status, diagnosis, age_at_onset, age_at_diag
#     ) %>% 
#     distinct() %>%
#     unite("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis", gender, hlab27status, diagnosis, age_at_onset, age_at_diag, sep = " | ", remove = FALSE, na.rm = FALSE) %>% 
#     pull("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis")
#   
#   plot <- ggplot(filtered_data, aes(x = date, y = Score)) +
#     geom_point() +
#     geom_line() +
#     geom_rect(
#       data = filtered_drug_data,
#       inherit.aes = FALSE,
#       aes(
#         xmin = drug_start_date,
#         xmax = stop_date,
#         fill = x3
#       ),
#       ymin = -Inf,
#       ymax = Inf,
#       alpha = 0.5
#     ) +
#     # geom_text(
#     #   # Add drug names labels
#     #   data = filtered_drug_data,
#     #   inherit.aes = FALSE,
#     #   aes(
#     #     x = drug_start_date + (stop_date - drug_start_date) / 2,  # Calculate midpoint
#     #     y = Inf - 5,  # Offset from max Score
#     #     label = x3
#     #   ),
#     # ) +
#     # Use a colour pallete with enough colours for all drugs
#     scale_fill_manual(values = drug_colours, na.value = "gray") +
#     facet_wrap(~ ttas_id, ncol = 1, scales = "free_y") +
#     labs(title = paste0("BASFI timeline plot for TTAS ID:", current_id)) +
#     ggtitle(paste0("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis: ", patient_info))
#   
#   file_name <- paste0(output_folder_2, "/", current_id, "_timeline_plot_basfi.png")
#   ggsave(file_name, plot, width = 10, height = 6, dpi = 300)
# }
```

```{r, warning=FALSE, include=FALSE}
# # Create plot for patient global score only
# 
# timeline_data_patient_global <- combined_df %>%
#   select(ttas_id, date, patient_global) %>%
#   pivot_longer(cols = c(patient_global),
#                names_to = "Measure",
#                values_to = "Score")
# 
# for (current_id in unique_ids_drugs_only){
#   
#   if (current_id %in% exclude_ids) {
#     next # Skip the current iteration if the current_id is in the exclude_ids list
#   }
#   
#   filtered_data <- timeline_data_patient_global %>% filter(ttas_id == current_id)
#   filtered_drug_data <- drug_sheet_data %>% filter(ttas_id == current_id)
#   
#   # Replace NA stop_date values with a default (e.g., today's date)
#   filtered_drug_data <- filtered_drug_data %>%
#     mutate(
#       stop_date = if_else(
#         is.na(stop_date), 
#         Sys.Date(),  # Replace NA with today's date
#         stop_date
#       )
#     )
#   
#   # Check and log warnings in one step
#   if (nrow(filtered_data) == 0) {
#     cat(paste("No timeline data found for TTAS ID:", current_id), file = log_file, append = TRUE, sep = "\n")
#   }
#   
#   # Get patient info
#   patient_info <- combined_df_id_with_drugs_excluded %>% filter(ttas_id == current_id) %>% 
#     select(
#       gender, hlab27status, diagnosis, age_at_onset, age_at_diag
#     ) %>% 
#     distinct() %>%
#     unite("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis", gender, hlab27status, diagnosis, age_at_onset, age_at_diag, sep = " | ", remove = FALSE, na.rm = FALSE) %>% 
#     pull("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis")
#   
#   plot <- ggplot(filtered_data, aes(x = date, y = Score)) +
#     geom_point() +
#     geom_line() +
#     geom_rect(
#       data = filtered_drug_data,
#       inherit.aes = FALSE,
#       aes(
#         xmin = drug_start_date,
#         xmax = stop_date,
#         fill = x3
#       ),
#       ymin = -Inf,
#       ymax = Inf,
#       alpha = 0.5
#     ) +
#     # geom_text(
#     #   # Add drug names labels
#     #   data = filtered_drug_data,
#     #   inherit.aes = FALSE,
#     #   aes(
#     #     x = drug_start_date + (stop_date - drug_start_date) / 2,  # Calculate midpoint
#     #     y = Inf - 5,  # Offset from max Score
#     #     label = x3
#     #   ),
#     # ) +
#     # Use a colour pallete with enough colours for all drugs
#     scale_fill_manual(values = drug_colours, na.value = "gray") +
#     facet_wrap(~ ttas_id, ncol = 1, scales = "free_y") +
#     labs(title = paste0("Patient Global timeline plot for TTAS ID:", current_id)) +
#     ggtitle(paste0("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis: ", patient_info))
#   
#   file_name <- paste0(output_folder_2, "/", current_id, "_timeline_plot_patient_global.png")
#   ggsave(file_name, plot, width = 10, height = 6, dpi = 300)
# }
```

```{r, warning=FALSE, include=FALSE}
# # Create plot for back pain at night and back pain anytime score only
# 
# timeline_data_back_pain <- combined_df %>%
#   select(ttas_id, date, back_pain_at_night, back_pain_anytime) %>%
#   pivot_longer(cols = c(back_pain_at_night, back_pain_anytime),
#                names_to = "Measure",
#                values_to = "Score")
# 
# for (current_id in unique_ids_drugs_only){
#   
#   if (current_id %in% exclude_ids) {
#     next # Skip the current iteration if the current_id is in the exclude_ids list
#   }
#   
#   filtered_data <- timeline_data_back_pain %>% filter(ttas_id == current_id)
#   filtered_drug_data <- drug_sheet_data %>% filter(ttas_id == current_id)
#   
#   # Replace NA stop_date values with a default (e.g., today's date)
#   filtered_drug_data <- filtered_drug_data %>%
#     mutate(
#       stop_date = if_else(
#         is.na(stop_date), 
#         Sys.Date(),  # Replace NA with today's date
#         stop_date
#       )
#     )
#   
#   # Check and log warnings in one step
#   if (nrow(filtered_data) == 0) {
#     cat(paste("No timeline data found for TTAS ID:", current_id), file = log_file, append = TRUE, sep = "\n")
#   }
# 
#   # Get patient info
#   patient_info <- combined_df_id_with_drugs_excluded %>% filter(ttas_id == current_id) %>% 
#     select(
#       gender, hlab27status, diagnosis, age_at_onset, age_at_diag
#     ) %>% 
#     distinct() %>%
#     unite("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis", gender, hlab27status, diagnosis, age_at_onset, age_at_diag, sep = " | ", remove = FALSE, na.rm = FALSE) %>% 
#     pull("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis")
# 
#   plot <- ggplot(filtered_data, aes(x = date, y = Score, colour = Measure)) +
#     geom_point() +
#     geom_line() +
#     geom_rect(
#       data = filtered_drug_data,
#       inherit.aes = FALSE,
#       aes(
#         xmin = drug_start_date,
#         xmax = stop_date,
#         fill = x3
#       ),
#       ymin = -Inf,
#       ymax = Inf,
#       alpha = 0.5
#     ) +
#     # geom_text(
#     #   # Add drug names labels
#     #   data = filtered_drug_data,
#     #   inherit.aes = FALSE,
#     #   aes(
#     #     x = drug_start_date + (stop_date - drug_start_date) / 2,  # Calculate midpoint
#     #     y = Inf - 5,  # Offset from max Score
#     #     label = x3
#     #   ),
#     # ) +
#     # Use a colour pallete with enough colours for all drugs
#     scale_fill_manual(values = drug_colours, na.value = "gray") +
#     facet_wrap(~ ttas_id, ncol = 1, scales = "free_y") +
#     labs(title = paste0("Back Pain timeline plot for TTAS ID:", current_id)) +
#     ggtitle(paste0("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis: ", patient_info))
# 
#   file_name <- paste0(output_folder_2, "/", current_id, "_timeline_plot_back_pain.png")
#   ggsave(file_name, plot, width = 10, height = 6, dpi = 300)
# }
```

```{r, warning=FALSE, include=FALSE}
# # Create plot for ASQoL score only
# 
# timeline_data_as_qol <- combined_df %>%
#   select(ttas_id, date, as_qol) %>%
#   pivot_longer(cols = c(as_qol),
#                names_to = "Measure",
#                values_to = "Score")
# 
# for (current_id in unique_ids_drugs_only){
#   
#   if (current_id %in% exclude_ids) {
#     next # Skip the current iteration if the current_id is in the exclude_ids list
#   }
#   
#   # Get patient info
#   patient_info <- combined_df_id_with_drugs_excluded %>% filter(ttas_id == current_id) %>% 
#     select(
#       gender, hlab27status, diagnosis, age_at_onset, age_at_diag
#     ) %>% 
#     distinct() %>%
#     unite("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis", gender, hlab27status, diagnosis, age_at_onset, age_at_diag, sep = " | ", remove = FALSE, na.rm = FALSE) %>% 
#     pull("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis")
#   
#   filtered_data <- timeline_data_as_qol %>% filter(ttas_id == current_id)
#   filtered_drug_data <- drug_sheet_data %>% filter(ttas_id == current_id)
#   
#   # Replace NA stop_date values with a default (e.g., today's date)
#   filtered_drug_data <- filtered_drug_data %>%
#     mutate(
#       stop_date = if_else(
#         is.na(stop_date), 
#         Sys.Date(),  # Replace NA with today's date
#         stop_date
#       )
#     )
#   
#   # Check and log warnings in one step
#   if (nrow(filtered_data) == 0) {
#     cat(paste("No timeline data found for TTAS ID:", current_id), file = log_file, append = TRUE, sep = "\n")
#   }
#   
#   plot <- ggplot(filtered_data, aes(x = date, y = Score)) +
#     geom_point() +
#     geom_line() +
#     geom_rect(
#       data = filtered_drug_data,
#       inherit.aes = FALSE,
#       aes(
#         xmin = drug_start_date,
#         xmax = stop_date,
#         fill = x3
#       ),
#       ymin = -Inf,
#       ymax = Inf,
#       alpha = 0.5
#     ) +
#     # geom_text(
#     #   # Add drug names labels
#     #   data = filtered_drug_data,
#     #   inherit.aes = FALSE,
#     #   aes(
#     #     x = drug_start_date + (stop_date - drug_start_date) / 2,  # Calculate midpoint
#     #     y = Inf - 5,  # Offset from max Score
#     #     label = x3
#     #   ),
#     # ) +
#     # Use a colour pallete with enough colours for all drugs
#     scale_fill_manual(values = drug_colours, na.value = "gray") +
#     facet_wrap(~ ttas_id, ncol = 1, scales = "free_y") +
#     labs(title = paste0("ASQoL timeline plot for TTAS ID:", current_id)) +
#     ggtitle(paste0("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis: ", patient_info))
#   
#   file_name <- paste0(output_folder_2, "/", current_id, "_timeline_plot_asqol.png")
#   ggsave(file_name, plot, width = 10, height = 6, dpi = 300)
# }
```

```{r, warning=FALSE, include=FALSE}
# # Create plot for FACIT score only
# 
# timeline_data_facit <- combined_df %>%
#   select(ttas_id, date, facit) %>%
#   pivot_longer(cols = c(facit),
#                names_to = "Measure",
#                values_to = "Score")
# 
# for (current_id in unique_ids_drugs_only){
#   
#   if (current_id %in% exclude_ids) {
#     next # Skip the current iteration if the current_id is in the exclude_ids list
#   }
#   
#   # Get patient info
#   patient_info <- combined_df_id_with_drugs_excluded %>% filter(ttas_id == current_id) %>% 
#     select(
#       gender, hlab27status, diagnosis, age_at_onset, age_at_diag
#     ) %>% 
#     distinct() %>%
#     unite("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis", gender, hlab27status, diagnosis, age_at_onset, age_at_diag, sep = " | ", remove = FALSE, na.rm = FALSE) %>% 
#     pull("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis")
#   
#   filtered_data <- timeline_data_facit %>% filter(ttas_id == current_id)
#   filtered_drug_data <- drug_sheet_data %>% filter(ttas_id == current_id)
#   
#   # Replace NA stop_date values with a default (e.g., today's date)
#   filtered_drug_data <- filtered_drug_data %>%
#     mutate(
#       stop_date = if_else(
#         is.na(stop_date), 
#         Sys.Date(),  # Replace NA with today's date
#         stop_date
#       )
#     )
#   
#   # Check and log warnings in one step
#   if (nrow(filtered_data) == 0) {
#     cat(paste("No timeline data found for TTAS ID:", current_id), file = log_file, append = TRUE, sep = "\n")
#   }
# 
#   # Get patient info
#   patient_info <- combined_df_id_with_drugs_excluded %>% filter(ttas_id == current_id) %>% 
#     select(
#       gender, hlab27status, diagnosis, age_at_onset, age_at_diag
#     ) %>% 
#     distinct() %>%
#     unite("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis", gender, hlab27status, diagnosis, age_at_onset, age_at_diag, sep = " | ", remove = FALSE, na.rm = FALSE) %>% 
#     pull("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis")
# 
#   plot <- ggplot(filtered_data, aes(x = date, y = Score)) +
#     geom_point() +
#     geom_line() +
#     geom_rect(
#       data = filtered_drug_data,
#       inherit.aes = FALSE,
#       aes(
#         xmin = drug_start_date,
#         xmax = stop_date,
#         fill = x3
#       ),
#       ymin = -Inf,
#       ymax = Inf,
#       alpha = 0.5
#     ) +
#     # geom_text(
#     #   # Add drug names labels
#     #   data = filtered_drug_data,
#     #   inherit.aes = FALSE,
#     #   aes(
#     #     x = drug_start_date + (stop_date - drug_start_date) / 2,  # Calculate midpoint
#     #     y = Inf - 5,  # Offset from max Score
#     #     label = x3
#     #   ),
#     # ) +
#     # Use a colour pallete with enough colours for all drugs
#     scale_fill_manual(values = drug_colours, na.value = "gray") +
#     facet_wrap(~ ttas_id, ncol = 1, scales = "free_y") +
#     labs(title = paste0("FACIT timeline plot for TTAS ID:", current_id)) +
#     ggtitle(paste0("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis: ", patient_info))
#   
#   file_name <- paste0(output_folder_2, "/", current_id, "_timeline_plot_facit.png")
#   ggsave(file_name, plot, width = 10, height = 6, dpi = 300)
# }
```

```{r, warning=FALSE, include=FALSE}
# # Create plot for Margolis score only
# 
# timeline_data_margolis <- combined_df %>%
#   select(ttas_id, date, margolis) %>%
#   pivot_longer(cols = c(margolis),
#                names_to = "Measure",
#                values_to = "Score")
# 
# for (current_id in unique_ids_drugs_only){
#   
#   if (current_id %in% exclude_ids) {
#     next # Skip the current iteration if the current_id is in the exclude_ids list
#   }
#   
#   filtered_data <- timeline_data_margolis %>% filter(ttas_id == current_id)
#   filtered_drug_data <- drug_sheet_data %>% filter(ttas_id == current_id)
#   
#   # Replace NA stop_date values with a default (e.g., today's date)
#   filtered_drug_data <- filtered_drug_data %>%
#     mutate(
#       stop_date = if_else(
#         is.na(stop_date), 
#         Sys.Date(),  # Replace NA with today's date
#         stop_date
#       )
#     )
#   
#   # Check and log warnings in one step
#   if (nrow(filtered_data) == 0) {
#     cat(paste("No timeline data found for TTAS ID:", current_id), file = log_file, append = TRUE, sep = "\n")
#   }
# 
#   # Get patient info
#   patient_info <- combined_df_id_with_drugs_excluded %>% filter(ttas_id == current_id) %>% 
#     select(
#       gender, hlab27status, diagnosis, age_at_onset, age_at_diag
#     ) %>% 
#     distinct() %>%
#     unite("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis", gender, hlab27status, diagnosis, age_at_onset, age_at_diag, sep = " | ", remove = FALSE, na.rm = FALSE) %>% 
#     pull("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis")
#   
#   plot <- ggplot(filtered_data, aes(x = date, y = Score)) +
#     geom_point() +
#     geom_line() +
#     geom_rect(
#       data = filtered_drug_data,
#       inherit.aes = FALSE,
#       aes(
#         xmin = drug_start_date,
#         xmax = stop_date,
#         fill = x3
#       ),
#       ymin = -Inf,
#       ymax = Inf,
#       alpha = 0.5
#     ) +
#     # geom_text(
#     #   # Add drug names labels
#     #   data = filtered_drug_data,
#     #   inherit.aes = FALSE,
#     #   aes(
#     #     x = drug_start_date + (stop_date - drug_start_date) / 2,  # Calculate midpoint
#     #     y = Inf - 5,  # Offset from max Score
#     #     label = x3
#     #   ),
#     # ) +
#     # Use a colour pallete with enough colours for all drugs
#     scale_fill_manual(values = drug_colours, na.value = "gray") +
#     facet_wrap(~ ttas_id, ncol = 1, scales = "free_y") +
#     labs(title = paste0("Margolis timeline plot for TTAS ID:", current_id)) +
#     ggtitle(paste0("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis: ", patient_info))
# 
#   
#   file_name <- paste0(output_folder_2, "/", current_id, "_timeline_plot_margolis.png")
#   ggsave(file_name, plot, width = 10, height = 6, dpi = 300)
# }
```

```{r, warning=FALSE, include=FALSE}
# # Create plot for WPAI only
# 
# timeline_data_wpai <- combined_df %>%
#   select(ttas_id, date, presenteeism, absenteeism, wpl, daily_activity_impairment) %>%
#   pivot_longer(cols = c(presenteeism, absenteeism, wpl, daily_activity_impairment),
#                names_to = "Measure",
#                values_to = "Score")
# 
# for (current_id in unique_ids_drugs_only){
#   
#   if (current_id %in% exclude_ids) {
#     next # Skip the current iteration if the current_id is in the exclude_ids list
#   }
#   
#   filtered_data <- timeline_data_wpai %>% filter(ttas_id == current_id)
#   filtered_drug_data <- drug_sheet_data %>% filter(ttas_id == current_id)
#   
#   # Replace NA stop_date values with a default (e.g., today's date)
#   filtered_drug_data <- filtered_drug_data %>%
#     mutate(
#       stop_date = if_else(
#         is.na(stop_date), 
#         Sys.Date(),  # Replace NA with today's date
#         stop_date
#       )
#     )
#   
#   # Check and log warnings in one step
#   if (nrow(filtered_data) == 0) {
#     cat(paste("No timeline data found for TTAS ID:", current_id), file = log_file, append = TRUE, sep = "\n")
#   }
#   
#   # Get patient info
#   patient_info <- combined_df_id_with_drugs_excluded %>% filter(ttas_id == current_id) %>% 
#     select(
#       gender, hlab27status, diagnosis, age_at_onset, age_at_diag
#     ) %>% 
#     distinct() %>%
#     unite("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis", gender, hlab27status, diagnosis, age_at_onset, age_at_diag, sep = " | ", remove = FALSE, na.rm = FALSE) %>% 
#     pull("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis")
# 
#   plot <- ggplot(filtered_data, aes(x = date, y = Score, colour = Measure)) +
#     geom_point() +
#     geom_line() +
#     geom_rect(
#       data = filtered_drug_data,
#       inherit.aes = FALSE,
#       aes(
#         xmin = drug_start_date,
#         xmax = stop_date,
#         fill = x3
#       ),
#       ymin = -Inf,
#       ymax = Inf,
#       alpha = 0.5
#     ) +
#     # geom_text(
#     #   # Add drug names labels
#     #   data = filtered_drug_data,
#     #   inherit.aes = FALSE,
#     #   aes(
#     #     x = drug_start_date + (stop_date - drug_start_date) / 2,  # Calculate midpoint
#     #     y = Inf - 5,  # Offset from max Score
#     #     label = x3
#     #   ),
#     # ) +
#     # Use a colour pallete with enough colours for all drugs
#     scale_fill_manual(values = drug_colours, na.value = "gray") +
#     facet_wrap(~ ttas_id, ncol = 1, scales = "free_y") +
#     labs(title = paste0("WPAI timeline plot for TTAS ID:", current_id)) +
#     ggtitle(paste0("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis: ", patient_info))
# 
#   
#   file_name <- paste0(output_folder_2, "/", current_id, "_timeline_plot_wpai.png")
#   ggsave(file_name, plot, width = 10, height = 6, dpi = 300)
# }
```

```{r, warning=FALSE, include=FALSE}
# # Create plot for Jenkins Sleep 
# 
# timeline_data_jenkins_sleep_scale <- combined_df %>%
#   select(ttas_id, date, jenkins_sleep_1, jenkins_sleep_2, jenkins_sleep_3, jenkins_sleep_4) %>%
#   pivot_longer(cols = c(jenkins_sleep_1, jenkins_sleep_2, jenkins_sleep_3, jenkins_sleep_4),
#                names_to = "Measure",
#                values_to = "Score")
# 
# for (current_id in unique_ids_drugs_only){
#   
#   if (current_id %in% exclude_ids) {
#     next # Skip the current iteration if the current_id is in the exclude_ids list
#   }
#   
#   filtered_data <- timeline_data_jenkins_sleep_scale %>% filter(ttas_id == current_id)
#   filtered_drug_data <- drug_sheet_data %>% filter(ttas_id == current_id)
#   
#   # Replace NA stop_date values with a default (e.g., today's date)
#   filtered_drug_data <- filtered_drug_data %>%
#     mutate(
#       stop_date = if_else(
#         is.na(stop_date), 
#         Sys.Date(),  # Replace NA with today's date
#         stop_date
#       )
#     )
#   
#   # Check and log warnings in one step
#   if (nrow(filtered_data) == 0) {
#     cat(paste("No timeline data found for TTAS ID:", current_id), file = log_file, append = TRUE, sep = "\n")
#   }
# 
#   # Get patient info
#   patient_info <- combined_df_id_with_drugs_excluded %>% filter(ttas_id == current_id) %>% 
#     select(
#       gender, hlab27status, diagnosis, age_at_onset, age_at_diag
#     ) %>% 
#     distinct() %>%
#     unite("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis", gender, hlab27status, diagnosis, age_at_onset, age_at_diag, sep = " | ", remove = FALSE, na.rm = FALSE) %>% 
#     pull("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis")
# 
#   plot <- ggplot(filtered_data, aes(x = date, y = Score)) +
#     geom_point() +
#     geom_line() +
#     geom_rect(
#       data = filtered_drug_data,
#       inherit.aes = FALSE,
#       aes(
#         xmin = drug_start_date,
#         xmax = stop_date,
#         fill = x3
#       ),
#       ymin = -Inf,
#       ymax = Inf,
#       alpha = 0.5
#     ) +
#     # geom_text(
#     #   # Add drug names labels
#     #   data = filtered_drug_data,
#     #   inherit.aes = FALSE,
#     #   aes(
#     #     x = drug_start_date + (stop_date - drug_start_date) / 2,  # Calculate midpoint
#     #     y = Inf - 5,  # Offset from max Score
#     #     label = x3
#     #   ),
#     # ) +
#     # Use a colour pallete with enough colours for all drugs
#     scale_fill_manual(values = drug_colours, na.value = "gray") +
#     facet_wrap(~ ttas_id, ncol = 1, scales = "free_y") +
#     labs(title = paste0("Jenkins Sleep Scale timeline plot for TTAS ID:", current_id)) +
#     ggtitle(paste0("Gender, HLAB27 Status, Diagnosis, Age at Onset, Age at Diagnosis: ", patient_info))
#   
#   file_name <- paste0(output_folder_2, "/", current_id, "_timeline_plot_jenkins.png")
#   ggsave(file_name, plot, width = 10, height = 6, dpi = 300)
# }
```

```{r, include=FALSE}
# Checkpoint end: Uncomment to recreate the plots
```

```{r, include=FALSE}
# Start analysis
# Old code
# # Reduce the amount of NA in combined_df_id_with_drugs_excluded
# # Impute x3 (Treatment): For any row where x3 is NA, if there is a valid stop_date, we should impute x3 with the last known treatment. If stop_date is also NA, the treatment continues to the present, and x3 should reflect the last known treatment.
# 
# # Ensure the data is arranged by ttas_id first and then by date
# combined_df_id_with_drugs_excluded <- combined_df_id_with_drugs_excluded %>% arrange(ttas_id, date)
# 
# # Impute x3 (Treatment) for each ttas_id based on start_date and stop_date
# combined_df_id_with_drugs_excluded <- combined_df_id_with_drugs_excluded %>%
#   group_by(ttas_id) %>%
#   mutate(
#     # Forward fill x3 values within each patient, but only if the date is before or on the stop_date
#     x3 = zoo::na.locf(ifelse(is.na(stop_date) | date <= stop_date, x3, NA), na.rm = FALSE)
#   )
# 
# write.csv(combined_df_id_with_drugs_excluded, file = "cleaned_dates.csv", row.names = FALSE)
```


```{r, include=FALSE}
# # Data cleaning to ensure x3 is propagated until stop_date
# data <- combined_df_id_with_drugs_excluded %>%
#   select(ttas_id, x3, date, stop_date, basmi_score)
# 
# # Convert date and stop_date to Date type
# data$date <- as.Date(data$date, format = "%d/%m/%Y")
# data$stop_date <- as.Date(data$stop_date, format = "%d/%m/%Y")
# 
# # Function to propagate x3 and manage stop_date without removing any rows
# propagate_x3 <- function(df) {
#   df <- df %>%
#     arrange(date) %>%
#     fill(x3, .direction = "down") %>%  # Propagate x3 downwards
#     mutate(stop_date = if_else(is.na(stop_date) & !is.na(x3) & row_number() == n(), Sys.Date(), stop_date)) %>%
#     mutate(stop_date = if_else(is.na(stop_date) & !is.na(x3), lead(stop_date), stop_date)) %>%
#     mutate(x3 = if_else(!is.na(x3) & (is.na(stop_date) | date <= stop_date), x3, NA_character_)) %>%
#     mutate(stop_date = if_else(date > stop_date, NA_Date_, stop_date))  # Clear stop_date after it ends
#   
#   return(df)
# }
# 
# # Apply the function across all ttas_id
# cleaned_data <- data %>% 
#   group_by(ttas_id) %>% 
#   group_modify(~ propagate_x3(.x)) %>% 
#   ungroup()
# 
# # Write the cleaned data to a CSV file
# write.csv(cleaned_data, file = "final_cleaned_propagation_result.csv", row.names = FALSE)
```

```{r, include=FALSE}
# df <- combined_df_id_with_drugs_excluded
# 
# data_sorted <- df %>%
#   select(ttas_id, basmi_score, x3, hlab27status, diagnosis, date, stop_date) %>%
#   arrange(ttas_id, date)
# 
# # Step 1: Identify treatment periods
# # Forward fill x3 to create a continuous treatment period indicator
# data_sorted <- data_sorted %>%
#   group_by(ttas_id) %>%
#   mutate(treatment = zoo::na.locf(x3, na.rm = FALSE)) %>%
#   ungroup()
# 
# # Step 2: Calculate avg_basmi_score_throughout_treatment for each treatment period
# data_sorted <- data_sorted %>%
#   group_by(ttas_id, treatment) %>%
#   mutate(avg_basmi_score_throughout_treatment = mean(basmi_score, na.rm = TRUE)) %>%
#   ungroup()
# 
# # Step 3: Calculate basmi_score_before based on the last known basmi_score before or on treatment initiation
# data_sorted <- data_sorted %>%
#   group_by(ttas_id) %>%
#   mutate(basmi_score_before = lag(basmi_score, default = NA_real_)) %>%
#   fill(basmi_score_before, .direction = "down") %>%
#   ungroup()
# 
# # Step 4: Filter only treatment days
# final_data <- data_sorted %>%
#   filter(!is.na(x3)) %>%
#   select(ttas_id, basmi_score, x3, hlab27status, diagnosis, date, stop_date, 
#          basmi_score_before, avg_basmi_score_throughout_treatment)
# 
# # Write to CSV or view the data
# write.csv(final_data, "final_treatment_data.csv", row.names = FALSE)
```


```{r, include=FALSE}
# # Old code
# # Code for users with drugs only
# df <- combined_df_id_with_drugs_excluded
# 
# data_sorted <- df %>%
#   select(ttas_id, x3, gender, hlab27status, age_at_onset, age_at_diag, age_at_basmi, diagnosis, date, stop_date, basmi_score)
# 
# data_sorted$ttas_id <- as.factor(data_sorted$ttas_id)
# data_sorted$x3 <- as.factor(data_sorted$x3)
# data_sorted$gender <- as.factor(data_sorted$gender)
# data_sorted$hlab27status <- as.factor(data_sorted$hlab27status)
# data_sorted$age_at_onset <- as.numeric(data_sorted$age_at_onset)
# data_sorted$age_at_diag <- as.numeric(data_sorted$age_at_diag)
# data_sorted$age_at_basmi <- as.numeric(data_sorted$age_at_basmi)
# data_sorted$diagnosis <- as.factor(data_sorted$diagnosis)
# data_sorted$date <- as.Date(data_sorted$date)
# data_sorted$stop_date <- as.Date(data_sorted$stop_date)
# data_sorted$basmi_score <- as.numeric(data_sorted$basmi_score)
# 
# # If x3 is present but date == stop_date, make x3 and stop_date NA
# data_sorted <- data_sorted %>%
#   mutate(
#     x3 = case_when(
#       date == stop_date ~ NA_character_,
#       TRUE ~ as.character(x3)
#     ),
#     stop_date = case_when(
#       date == stop_date ~ NA_Date_,
#       TRUE ~ stop_date
#     )
#   ) %>% 
#   
#   # Ensure x3 is still a factor
#   mutate(x3 = as.factor(x3)) %>% 
#   
#   # If x3 is present but no start_date, make x3 and stop_date NA
#   mutate(
#     x3 = case_when(
#       !is.na(x3) & is.na(date) ~ NA_character_,
#       TRUE ~ as.character(x3)
#     ),
#     stop_date = case_when(
#       !is.na(x3) & is.na(date) ~ NA_Date_,
#       TRUE ~ stop_date
#     )
#   ) %>%
#   # Convert x3 back to factor after the above condition
#   mutate(x3 = as.factor(x3))
# 
# write.csv(data_sorted, "temp_before_data_sorted.csv", row.names = FALSE)
```

```{r, include=FALSE}
# Old code: Without excluded ids
# dataframe <- combined_df_with_and_without_drugs_excluded

# New code: With excluded ids
dataframe <- combined_df_with_and_without_drugs

dataframe_sorted <- dataframe %>%
  select(ttas_id, x3, gender, hlab27status, age_at_basmi, age_at_prom, diagnosis, date, stop_date, last_known_smoking_status, last_known_vaping_status, basmi_score, basdai, basfi, patient_global, back_pain_at_night, back_pain_anytime, as_qol, jenkins_sleep_1, jenkins_sleep_2, jenkins_sleep_3, jenkins_sleep_4, wpl, daily_activity_impairment, presenteeism, absenteeism, facit, margolis)

dataframe_sorted$ttas_id <- as.factor(dataframe_sorted$ttas_id)
dataframe_sorted$x3 <- as.factor(dataframe_sorted$x3)
dataframe_sorted$gender <- as.factor(dataframe_sorted$gender)
dataframe_sorted$hlab27status <- as.factor(dataframe_sorted$hlab27status)
dataframe_sorted$age_at_basmi <- as.numeric(dataframe_sorted$age_at_basmi)
dataframe_sorted$age_at_prom <- as.numeric(dataframe_sorted$age_at_prom)
dataframe_sorted$diagnosis <- as.factor(dataframe_sorted$diagnosis)
dataframe_sorted$date <- as.Date(dataframe_sorted$date)
dataframe_sorted$stop_date <- as.Date(dataframe_sorted$stop_date)
dataframe_sorted$last_known_smoking_status <- as.factor(dataframe_sorted$last_known_smoking_status)
dataframe_sorted$last_known_vaping_status <- as.factor(dataframe_sorted$last_known_vaping_status)
dataframe_sorted$basmi_score <- as.numeric(dataframe_sorted$basmi_score)
dataframe_sorted$basdai <- as.numeric(dataframe_sorted$basdai)
dataframe_sorted$basfi <- as.numeric(dataframe_sorted$basfi)
dataframe_sorted$patient_global <- as.numeric(dataframe_sorted$patient_global)
dataframe_sorted$back_pain_at_night <- as.numeric(dataframe_sorted$back_pain_at_night)
dataframe_sorted$back_pain_anytime <- as.numeric(dataframe_sorted$back_pain_anytime)
dataframe_sorted$as_qol <- as.numeric(dataframe_sorted$as_qol)
dataframe_sorted$jenkins_sleep_1 <- as.numeric(dataframe_sorted$jenkins_sleep_1)
dataframe_sorted$jenkins_sleep_2 <- as.numeric(dataframe_sorted$jenkins_sleep_2)
dataframe_sorted$jenkins_sleep_3 <- as.numeric(dataframe_sorted$jenkins_sleep_3)
dataframe_sorted$jenkins_sleep_4 <- as.numeric(dataframe_sorted$jenkins_sleep_4)
dataframe_sorted$wpl <- as.numeric(dataframe_sorted$wpl)
dataframe_sorted$daily_activity_impairment <- as.numeric(dataframe_sorted$daily_activity_impairment)
dataframe_sorted$presenteeism <- as.numeric(dataframe_sorted$presenteeism)
dataframe_sorted$absenteeism <- as.numeric(dataframe_sorted$absenteeism)
dataframe_sorted$facit <- as.numeric(dataframe_sorted$facit)
dataframe_sorted$margolis <- as.numeric(dataframe_sorted$margolis)


# If x3 is present but date == stop_date, make x3 and stop_date NA
dataframe_sorted <- dataframe_sorted %>%
  mutate(
    x3 = case_when(
      date == stop_date ~ NA_character_,
      TRUE ~ as.character(x3)
    ),
    stop_date = case_when(
      date == stop_date ~ NA_Date_,
      TRUE ~ stop_date
    )
  ) %>% 
  
  # Ensure x3 is still a factor
  mutate(x3 = as.factor(x3)) %>% 
  
  # If x3 is present but no start_date, make x3 and stop_date NA
  mutate(
    x3 = case_when(
      !is.na(x3) & is.na(date) ~ NA_character_,
      TRUE ~ as.character(x3)
    ),
    stop_date = case_when(
      !is.na(x3) & is.na(date) ~ NA_Date_,
      TRUE ~ stop_date
    )
  ) %>%
  # Convert x3 back to factor after the above condition
  mutate(x3 = as.factor(x3))

write.csv(dataframe_sorted, "temp_dataframe_before_data_sorted.csv", row.names = FALSE)
```

```{r, include=FALSE}
# # Manual intervention for ttas_id 13, 72, 156, 230, 792, 974, 1105, 1099, 1224
# # For ttas_id 13, if x3 is Benepali but stop_date is NA, set stop_date to current date
# data_sorted <- data_sorted %>%
#   mutate(
#     stop_date = case_when(
#       ttas_id == 13 & x3 == "Benepali" & is.na(stop_date) ~ Sys.Date(),
#       TRUE ~ stop_date
#     ))
# 
# # For ttas_id 72, if x3 is Cosentyx but stop_date is NA, set stop_date to current date
# data_sorted <- data_sorted %>%
#   mutate(
#     stop_date = case_when(
#       ttas_id == 72 & x3 == "Cosentyx" & is.na(stop_date) ~ Sys.Date(),
#       TRUE ~ stop_date
#     ))
# 
# # For ttas_id 156, if x3 is Imraldi but stop_date is NA, set stop_date to current date
# data_sorted <- data_sorted %>%
#   mutate(
#     stop_date = case_when(
#       ttas_id == 156 & x3 == "Imraldi" & is.na(stop_date) ~ Sys.Date(),
#       TRUE ~ stop_date
#     ))
# 
# # For ttas_id 230, if x3 is Imraldi but stop_date is NA, set stop_date to current date
# data_sorted <- data_sorted %>%
#   mutate(
#     stop_date = case_when(
#       ttas_id == 230 & x3 == "Imraldi" & is.na(stop_date) ~ Sys.Date(),
#       TRUE ~ stop_date
#     ))
# 
# # For ttas_id 792, if x3 is Simponi but stop_date is NA, set stop_date to current date
# data_sorted <- data_sorted %>%
#   mutate(
#     stop_date = case_when(
#       ttas_id == 792 & x3 == "Simponi" & is.na(stop_date) ~ Sys.Date(),
#       TRUE ~ stop_date
#     ))
# 
# # For ttas_id 984, if x3 is Cosentyx but stop_date is NA, set stop_date to current date
# data_sorted <- data_sorted %>%
#   mutate(
#     stop_date = case_when(
#       ttas_id == 984 & x3 == "Cosentyx" & is.na(stop_date) ~ Sys.Date(),
#       TRUE ~ stop_date
#     ))
# 
# # For ttas_id 1105, if x3 is Cosentyx but stop_date is NA, set stop_date to current date
# data_sorted <- data_sorted %>%
#   mutate(
#     stop_date = case_when(
#       ttas_id == 1105 & x3 == "Cosentyx" & is.na(stop_date) ~ Sys.Date(),
#       TRUE ~ stop_date
#     ))
# 
# # For ttas_id 1099
# # No stop_date for past treatment Yuflyma, assume stop_date is 19/02/2024 which is one day before next entry
# # For ttas_id 1099, if x3 is Yuflyma but stop_date is NA, set stop_date to 19/02/2024 
# data_sorted <- data_sorted %>%
#   mutate(
#     stop_date = case_when(
#       ttas_id == 1099 & x3 == "Yuflyma" & is.na(stop_date) ~ as.Date("2024-02-19"),
#       TRUE ~ stop_date
#     ))
# 
# # One of the Cosentyx entry for this patient has a stop_date of 15/01/2024 but start date of 20/02/2024, which is incorrect.
# # Change the 15/01/2024 stop_date to current date
# data_sorted <- data_sorted %>%
#   mutate(
#     stop_date = case_when(
#       ttas_id == 1099 & x3 == "Cosentyx" & stop_date == as.Date("2024-01-15") ~ Sys.Date(),
#       TRUE ~ stop_date
#     ))
# 
# # For ttas_id 1224, if x3 is Benepali but stop_date is NA, set stop_date to current date
# data_sorted <- data_sorted %>%
#   mutate(
#     stop_date = case_when(
#       ttas_id == 1224 & x3 == "Benepali" & is.na(stop_date) ~ Sys.Date(),
#       TRUE ~ stop_date
#     ))
# 
# # write.csv(data_sorted, "temp_manual_intervetion_check.csv", row.names = FALSE)
```

```{r, include=FALSE}
# # Older code: Before and immediately after basmi_score
# # Forward fill x3 to create a continuous treatment period indicator
# data_sorted <- data_sorted %>%
#   group_by(ttas_id) %>%
#   mutate(treatment = zoo::na.locf(x3, na.rm = FALSE)) %>%
#   ungroup()
# 
# # Calculate basmi_score_before based on the last known basmi_score before or on treatment initiation
# data_sorted <- data_sorted %>%
#   group_by(ttas_id) %>%
#   mutate(basmi_score_before = lag(basmi_score, default = NA_real_)) %>%
#   fill(basmi_score_before, .direction = "down") %>%
#   ungroup()
# 
# # # Obtain the basmi_score_after as the last recorded basmi_score after each treatment starts
# # data_sorted <- data_sorted %>%
# #   group_by(ttas_id, treatment) %>%
# #   mutate(basmi_score_after = lead(basmi_score, order_by = date)) %>%
# #   fill(basmi_score_after, .direction = "up") %>%
# #   ungroup() %>%
# #   group_by(ttas_id, treatment) %>%
# #   mutate(basmi_score_after = ifelse(date == max(date), basmi_score, basmi_score_after)) %>%
# #   ungroup()
# 
# # Filter only treatment days and select relevant columns
# final_data <- data_sorted %>%
#   filter(!is.na(x3)) %>%
#   select(ttas_id, x3, hlab27status, diagnosis, date, stop_date, 
#          basmi_score_before, basmi_score_after, first_treatment_date, last_treatment_date)
# 
# # Write to CSV or view the data
# write.csv(final_data, "treatment_data_before_after.csv", row.names = FALSE)
```

```{r, include=FALSE}
# # Step 1: Forward-fill x3 to create a continuous treatment period indicator
# data_sorted <- data_sorted %>%
#   arrange(ttas_id, date) %>%
#   group_by(ttas_id) %>%
#   mutate(
#     treatment = zoo::na.locf(x3, na.rm = FALSE)  # Forward-fill treatment within valid periods
#   ) %>%
#   ungroup()
# 
# write.csv(data_sorted, "temp_after_data_sorted_1.csv", row.names = FALSE)
# 
# # Step 2: Create a unique treatment period identifier
# # Old code: Problematic as it doesn't consider stop and repeated treatment
# # data_sorted <- data_sorted %>%
# #   group_by(ttas_id) %>%
# #   mutate(
# #     treatment_period_unique_identifier = cumsum(!is.na(treatment) & (treatment != lag(treatment, default = first(treatment)) | is.na(lag(treatment))))
# #   ) %>%
# #   ungroup()
# 
# # TODO: Working fine for now, hope it stays that way
# data_sorted <- data_sorted %>%
#   group_by(ttas_id) %>%
#   mutate(
#     # Flag when treatment changes or is restarted
#     treatment_change = (treatment != lag(treatment, default = first(treatment)) | 
#                         !is.na(stop_date) | 
#                         is.na(lag(treatment))),
# 
#     # Cumulative sum of treatment_change flags to create a unique treatment period identifier
#     treatment_period_unique_identifier = cumsum(treatment_change)
#   ) %>%
#   ungroup()
# 
# write.csv(data_sorted, "temp_after_data_sorted_2.csv", row.names = FALSE)
# 
# # Convert treatment to character
# data_sorted$treatment <- as.character(data_sorted$treatment)
# 
# # Convert dates to UNIX time
# data_sorted <- data_sorted %>%
#   mutate(
#     start_date_unix = as.numeric(as.POSIXct(date)),
#     stop_date_unix = ifelse(is.na(stop_date), NA, as.numeric(as.POSIXct(stop_date)))
#   )
# 
# # Step 3: Reset treatments to NA after the stop_date using numeric UNIX time
# data_sorted <- data_sorted %>%
#   group_by(ttas_id, treatment_period_unique_identifier) %>%
#   mutate(
#     # Check if there is any valid treatment in the period
#     has_valid_treatment = any(!is.na(treatment)),
#     
#     # Find the unique stop_date_unix within each treatment_period_unique_identifier
#     # stop_date_for_period is identified as the maximum stop_date_unix within each treatment_period_unique_identifier group. This assumes that each treatment_period_unique_identifier should only have one stop_date.
#     # Calculate stop_date_for_period based on whether there's a valid treatment
#     stop_date_for_period = ifelse(
#       !has_valid_treatment, 
#       NA_real_,  # If no valid treatment, set to NA
#       max(stop_date_unix, na.rm = TRUE)  # Else, find the max stop_date_unix
#     ),
#     
#     # If there is no stop_date but there in a period, stop_date_for_period is set to current date.
#     stop_date_for_period = ifelse(is.infinite(stop_date_for_period), Sys.time(), stop_date_for_period),
#     
#     # If start_date_unix is after the stop_date_for_period, reset treatment to NA for the row
#     treatment = ifelse(!is.na(treatment) & start_date_unix > stop_date_for_period, NA_character_, treatment),
#     
#     # If start_date_unix is after the stop_date_for_period, reset treatment_period_unique_identifier to NA for the row
#     treatment_period_unique_identifier = ifelse(start_date_unix > stop_date_for_period, NA_integer_, treatment_period_unique_identifier),
#     
#     # If start_date_unix is after the stop_date_for_period, reset has_valid_treatment to FALSE for the row
#     has_valid_treatment = ifelse(start_date_unix > stop_date_for_period, FALSE, has_valid_treatment),
#     
#     # If start_date_unix is after the stop_date_for_period, reset stop_date_for_period to NA for the row
#     stop_date_for_period = ifelse(start_date_unix > stop_date_for_period, NA_real_, stop_date_for_period),
#     
#     # Add a new stop_date_for_period column in Date format
#     stop_date_for_period_date_format = as.Date(as.POSIXct(stop_date_for_period, origin = "1970-01-01"))
#   ) %>%
#   ungroup()
# 
# 
# # # Step 4: Calculate basmi_score_before
# # data_sorted <- data_sorted %>%
# #   group_by(ttas_id) %>%
# #   mutate(basmi_score_before_treatment = lag(basmi_score, default = NA_real_)) %>%
# #   fill(basmi_score_before_treatment, .direction = "down") %>%
# #   ungroup()
# 
# # Step 5: Calculate overall_treatment_duration_in_days and create an index for each basmi_score in each period
# # Step 1: Calculate overall_treatment_duration_in_days
# data_sorted <- data_sorted %>%
#   group_by(ttas_id, treatment_period_unique_identifier) %>%
#   mutate(
#     overall_treatment_duration_in_days = ifelse(
#       !is.na(stop_date_for_period_date_format), 
#       as.numeric(difftime(stop_date_for_period_date_format, date, units = "days")), 
#       NA_real_
#     )
#   ) %>%
#   ungroup()
# 
# # Step 6: Calculate weekly time within each treatment_period_unique_identifier
# # Ensure date and stop_date_for_period_date_format are in Date format
# data_sorted$date <- as.Date(data_sorted$date)
# 
# data_sorted <- data_sorted %>% 
#   group_by(ttas_id, treatment_period_unique_identifier) %>%
#   mutate(
#     # treatment_window_weekly_time = round(as.numeric(difftime(date, first(date), units = "weeks")) + 1, 2)
#     treatment_window_weekly_time = round(as.numeric(difftime(date, first(date), units = "weeks")) + 0, 2)
#     ) %>% 
#   ungroup()
#   
# 
# write.csv(data_sorted, "temp_data_sorted_for_analysis_prior_to_pivot.csv", row.names = FALSE)
```

```{r, include=FALSE}
# Old code: When the we assume every patients has his/her own unique treatment period without any differentiation
# # General longitudinal analysis
# longitudinal_analysis_data <- data_sorted %>% 
#   filter(!is.na(treatment)) %>%
#   select(ttas_id, gender, hlab27status, age_at_onset, age_at_diag, age_at_basmi, diagnosis, treatment, treatment_period_unique_identifier, date, stop_date_for_period_date_format, overall_treatment_duration_in_days, treatment_window_weekly_time, basmi_score)
# 
# # Create the zeroth time row
# # zeroth_rows <- longitudinal_analysis_data %>% 
# #   group_by(ttas_id, treatment_period_unique_identifier) %>% 
# #   slice(1) %>%
# #   mutate(
# #     treatment_window_weekly_time = 0,
# #     basmi_score = basmi_score_before_treatment
# #   )
# 
# # longitudinal_analysis_data_with_zeroth <- longitudinal_analysis_data %>% 
# #   bind_rows(zeroth_rows) %>% 
# #   arrange(ttas_id, treatment_period_unique_identifier, treatment_window_weekly_time)
# 
# # Extra cleaning
# # Drop basmi_score with NA
# longitudinal_analysis_data_filtered <- longitudinal_analysis_data%>%
#   filter(!is.na(basmi_score))
# # For each ttas_id, if there is only one treatment_period_unique_identifier, drop the row
# longitudinal_analysis_data_filtered <- longitudinal_analysis_data_filtered %>%
#   group_by(ttas_id, treatment_period_unique_identifier) %>%
#   filter(n() > 1) %>% # Keep only groups with more than one row after filtering out NAs
#   ungroup()
# 
# write.csv(longitudinal_analysis_data, "longitudinal_analysis_data.csv", row.names = FALSE)
# # write.csv(longitudinal_analysis_data_with_zeroth, "longitudinal_analysis_data_with_zeroth.csv", row.names = FALSE)
# write.csv(longitudinal_analysis_data_filtered, "longitudinal_analysis_data_filtered.csv", row.names = FALSE)
```

```{r, include=FALSE}
# # Ensure that longitudinal_analysis_data_filtered has the correct data types
# longitudinal_analysis_data_filtered$ttas_id <- as.factor(longitudinal_analysis_data_filtered$ttas_id)
# longitudinal_analysis_data_filtered$gender <- as.factor(longitudinal_analysis_data_filtered$gender)
# longitudinal_analysis_data_filtered$hlab27status <- as.factor(longitudinal_analysis_data_filtered$hlab27status)
# longitudinal_analysis_data_filtered$diagnosis <- as.factor(longitudinal_analysis_data_filtered$diagnosis)
# longitudinal_analysis_data_filtered$treatment <- as.factor(longitudinal_analysis_data_filtered$treatment)
# longitudinal_analysis_data_filtered$treatment_period_unique_identifier <- as.factor(longitudinal_analysis_data_filtered$treatment_period_unique_identifier)
# 
# longitudinal_analysis_data_filtered$date <- as.Date(longitudinal_analysis_data_filtered$date)
# longitudinal_analysis_data_filtered$stop_date_for_period_date_format <- as.Date(longitudinal_analysis_data_filtered$stop_date_for_period_date_format)
# 
# longitudinal_analysis_data_filtered$age_at_onset <- as.numeric(longitudinal_analysis_data_filtered$age_at_onset)
# longitudinal_analysis_data_filtered$age_at_diag <- as.numeric(longitudinal_analysis_data_filtered$age_at_diag)
# longitudinal_analysis_data_filtered$age_at_basmi <- as.numeric(longitudinal_analysis_data_filtered$age_at_basmi)
# longitudinal_analysis_data_filtered$overall_treatment_duration_in_days <- as.numeric(longitudinal_analysis_data_filtered$overall_treatment_duration_in_days)
# longitudinal_analysis_data_filtered$treatment_window_weekly_time <- as.numeric(longitudinal_analysis_data_filtered$treatment_window_weekly_time)
# longitudinal_analysis_data_filtered$basmi_score <- as.numeric(longitudinal_analysis_data_filtered$basmi_score)
```

```{r, include=FALSE}
# Plot the data
# test_model_1 <- lmer(basmi_score ~ treatment + treatment_window_weekly_time + age_at_onset + age_at_diag + age_at_basmi + gender + hlab27status + (1 | ttas_id), data = longitudinal_analysis_data_filtered)
# print(summary(test_model_1), corr = TRUE)
```

```{r, include=FALSE}
# # Pivot the basmi_score to wide format
# data_sorted <- data_sorted %>%
#   group_by(ttas_id, treatment_period_unique_identifier) %>%
#   mutate(
#     basmi_score_index = row_number() - 1  # Create an index for each basmi_score, including NA values
#   ) %>%
#   ungroup()
# 
# data_wide <- data_sorted %>%
#   pivot_wider(
#     id_cols = c(ttas_id, treatment_period_unique_identifier),  # Ensure id columns include ttas_id and treatment_period_unique_identifier
#     names_from = basmi_score_index,
#     names_prefix = "basmi_score_after_",
#     values_from = basmi_score
#   )
# 
# # Filter on treatment day and inspect the result
# # Select the columns to retain
# pivot_data <- data_sorted %>%
#   select(ttas_id, treatment_period_unique_identifier, x3, hlab27status, diagnosis, date, stop_date, treatment, start_date_unix, stop_date_unix, has_valid_treatment, stop_date_for_period, stop_date_for_period_date_format, overall_treatment_duration_in_days, basmi_score_before) %>%
#   distinct() %>%
#   right_join(data_wide, by = c("ttas_id", "treatment_period_unique_identifier"))
# 
# write.csv(pivot_data, "temp_data_sorted_after_pivot.csv", row.names = FALSE)
```

```{r, include=FALSE}
# # Skip start_date_unix and stop_date_unix, stop_date_for_period
# basmi_analysis_data <- pivot_data %>%
#   filter(!is.na(x3)) %>%
#   select(ttas_id, treatment_period_unique_identifier, x3, hlab27status, diagnosis, date, stop_date, treatment, has_valid_treatment, stop_date_for_period_date_format, overall_treatment_duration_in_days, basmi_score_before, starts_with("basmi_score_"))
# 
# write_csv(basmi_analysis_data, "basmi_analysis_data.csv")
```
```{r, include=FALSE}
# Step 1: Forward fill x3 to create a continuous treatment period indicator
dataframe_sorted <- dataframe_sorted %>%
  group_by(ttas_id) %>%
  mutate(treatment = zoo::na.locf(x3, na.rm = FALSE)) %>%
  ungroup()

write.csv(dataframe_sorted, "temp_dataframe_after_data_sorted_1.csv", row.names = FALSE)

# Step 2: Create a unique identifier for each treatment period
dataframe_sorted <- dataframe_sorted %>%
  group_by(ttas_id) %>%
  mutate(
    # Flag when treatment changes or is restarted
    treatment_change = (treatment != lag(treatment, default = first(treatment)) | 
                        !is.na(stop_date) | 
                        is.na(lag(treatment))),

    # Cumulative sum of treatment_change flags to create a unique treatment period identifier
    treatment_period_unique_identifier = cumsum(treatment_change)
  ) %>%
  ungroup()

write.csv(dataframe_sorted, "temp_dataframe_after_data_sorted_2.csv", row.names = FALSE)

# Convert treatment to character
dataframe_sorted$treatment <- as.character(dataframe_sorted$treatment)

# Convert dates to UNIX time
dataframe_sorted <- dataframe_sorted %>%
  mutate(
    start_date_unix = as.numeric(as.POSIXct(date)),
    stop_date_unix = ifelse(is.na(stop_date), NA, as.numeric(as.POSIXct(stop_date)))
  )

# Step 3: Reset treatments to NA after the stop_date using numeric UNIX time
dataframe_sorted <- dataframe_sorted %>%
  group_by(ttas_id, treatment_period_unique_identifier) %>%
  mutate(
    # Check if there is any valid treatment in the period
    has_valid_treatment = any(!is.na(treatment)),
    
    # Find the unique stop_date_unix within each treatment_period_unique_identifier
    # stop_date_for_period is identified as the maximum stop_date_unix within each treatment_period_unique_identifier group. This assumes that each treatment_period_unique_identifier should only have one stop_date.
    # Calculate stop_date_for_period based on whether there's a valid treatment
    stop_date_for_period = ifelse(
      !has_valid_treatment, 
      NA_real_,  # If no valid treatment, set to NA
      max(stop_date_unix, na.rm = TRUE)  # Else, find the max stop_date_unix
    ),
    
    # If there is no stop_date but there in a period, stop_date_for_period is set to current date.
    stop_date_for_period = ifelse(is.infinite(stop_date_for_period), Sys.time(), stop_date_for_period),
    
    # If start_date_unix is after the stop_date_for_period, reset treatment to NA for the row
    treatment = ifelse(!is.na(treatment) & start_date_unix > stop_date_for_period, NA_character_, treatment),
    
    # If start_date_unix is after the stop_date_for_period, reset treatment_period_unique_identifier to NA for the row
    treatment_period_unique_identifier = ifelse(start_date_unix > stop_date_for_period, NA_integer_, treatment_period_unique_identifier),
    
    # If start_date_unix is after the stop_date_for_period, reset has_valid_treatment to FALSE for the row
    has_valid_treatment = ifelse(start_date_unix > stop_date_for_period, FALSE, has_valid_treatment),
    
    # If start_date_unix is after the stop_date_for_period, reset stop_date_for_period to NA for the row
    stop_date_for_period = ifelse(start_date_unix > stop_date_for_period, NA_real_, stop_date_for_period),
    
    # Add a new stop_date_for_period column in Date format
    stop_date_for_period_date_format = as.Date(as.POSIXct(stop_date_for_period, origin = "1970-01-01"))
  ) %>%
  ungroup()

write.csv(dataframe_sorted, "temp_dataframe_after_data_sorted_3.csv", row.names = FALSE)

# Step 4: Now fill all the NA values in treatment columns with "standard_non-high_cost_drug_treatment"
dataframe_sorted <- dataframe_sorted %>%
  mutate(
    treatment = ifelse(is.na(treatment), "standard_non-high_cost_drug_treatment", treatment)
  )

write.csv(dataframe_sorted, "temp_dataframe_after_data_sorted_4.csv", row.names = FALSE)

# Step 5: Create a true unique identifier for each treatment period
dataframe_sorted <- dataframe_sorted %>%
  group_by(ttas_id) %>%
  mutate(
    treatment_order = cumsum(treatment != lag(treatment, default = first(treatment)) | is.na(lag(treatment)))
  ) %>%
  ungroup()

write.csv(dataframe_sorted, "temp_dataframe_after_data_sorted_5.csv", row.names = FALSE)

# Step 6: Create a new stop_date for each treatment_order if there is no stop_date for treatment = "standard_non-high_cost_drug_treatment"
# If treatment_order precedes another one, set stop_date_for_period to the next start_date_unix - 1
# If treatment_order is the last one, set stop_date_for_period to current date
dataframe_sorted<- dataframe_sorted %>% 
  group_by(ttas_id) %>%
  arrange(ttas_id, start_date_unix) %>%
  mutate(
    # Create a helper column that identifies the start date of the next non-standard treatment period
    next_non_standard_start = lead(ifelse(treatment != "standard_non-high_cost_drug_treatment", start_date_unix, as.numeric(NA)), 
                                   default = as.numeric(Sys.time())),
    
    # Assign stop_date_for_period for "standard_non-high_cost_drug_treatment" periods
    stop_date_for_period = ifelse(
      treatment == "standard_non-high_cost_drug_treatment" & is.na(stop_date_for_period),
      next_non_standard_start - 1,
      stop_date_for_period
    )
  ) %>%
  ungroup()

write.csv(dataframe_sorted, "temp_dataframe_after_data_sorted_6.csv", row.names = FALSE)

# Step 7: Fill the stop_date_for_period within each treatment_order
dataframe_sorted<- dataframe_sorted%>%
  group_by(ttas_id, treatment_order) %>%
  fill(stop_date_for_period, .direction = "downup") %>%
  ungroup()

write.csv(dataframe_sorted, "temp_dataframe_after_data_sorted_7.csv", row.names = FALSE)

# Convert the stop_date_for_period to Date format for "standard_non-high_cost_drug_treatment" periods
dataframe_sorted<- dataframe_sorted%>%
  mutate(
    stop_date_for_period_date_format = as.Date(as.POSIXct(stop_date_for_period, origin = "1970-01-01"))
  )

write.csv(dataframe_sorted, "temp_dataframe_after_data_sorted_8.csv", row.names = FALSE)

# Step 8: Calculate overall_treatment_duration_in_days and create an index for each basmi_score in each period
# Calculate overall_treatment_duration_in_days
dataframe_sorted<- dataframe_sorted%>%
  group_by(ttas_id, treatment_order) %>%
  mutate(
    overall_treatment_duration_in_days = ifelse(
      !is.na(stop_date_for_period_date_format), 
      as.numeric(difftime(stop_date_for_period_date_format, date, units = "days")), 
      NA_real_
    )
  ) %>%
  ungroup()

write.csv(dataframe_sorted, "temp_dataframe_after_data_sorted_9.csv", row.names = FALSE)

# Step 9: Calculate weekly time within each treatment_order
# Ensure date and stop_date_for_period_date_format are in Date format
dataframe_sorted$date <- as.Date(dataframe_sorted$date)
dataframe_sorted$stop_date_for_period_date_format <- as.Date(dataframe_sorted$stop_date_for_period_date_format)

dataframe_sorted<- dataframe_sorted%>% 
  group_by(ttas_id, treatment_order) %>%
  mutate(
    treatment_window_weekly_time = round(as.numeric(difftime(date, first(date), units = "weeks")) + 0, 2)
    ) %>% 
  ungroup()

write.csv(dataframe_sorted, "temp_dataframe_after_data_sorted_10.csv", row.names = FALSE)

# Step 10: Calculate the daily and weekly time within each ttas_id
dataframe_sorted<- dataframe_sorted%>%
  group_by(ttas_id) %>%
  mutate(
    time_in_days = as.numeric(difftime(date, first(date), units = "days")),
    time_in_weeks = round(as.numeric(difftime(date, first(date), units = "weeks")) + 0, 2),
    time_in_months = round(time_in_weeks / 4.34524, 2),
    time_in_years = round(time_in_weeks / 52.1429, 2)
    ) %>% 
  ungroup()

write.csv(dataframe_sorted, "temp_dataframe_after_data_sorted_11.csv", row.names = FALSE)
```

# BASMI Score analysis

```{r, include=FALSE}
# BASMI score only
# General longitudinal analysis for those with and without drugs
dataframe_sorted_basmi<- dataframe_sorted %>%
  filter(!is.na(basmi_score)) %>%
  select(ttas_id, gender, hlab27status, age_at_basmi, diagnosis, treatment, last_known_smoking_status, last_known_vaping_status, treatment_order, date, stop_date_for_period_date_format, overall_treatment_duration_in_days, treatment_window_weekly_time, time_in_days, time_in_weeks, time_in_months, time_in_years, basmi_score)

write.csv(dataframe_sorted_basmi, "temp_dataframe_after_dataframe_sorted_for_analysis.csv", row.names = FALSE)

# Ignore if there is only one instance of row per treatment_period_unique_identifier in each ttas_id
dataframe_sorted_basmi <- dataframe_sorted_basmi %>%
  group_by(ttas_id, treatment_order) %>%
  filter(n() > 1) %>% # Keep only groups with more than one row after filtering out NAs
  ungroup()

write.csv(dataframe_sorted_basmi, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered.csv", row.names = FALSE)
```

```{r, include=FALSE}
# Reclassify the drugs
dataframe_sorted_and_reclassified_basmi <- dataframe_sorted_basmi %>%
  mutate(treatment_reclassified = case_when(
    treatment %in% c("Amgevita", "Humira", "Imraldi", "Yuflyma", "Benepali", "Enbrel", "Simponi", "Remicade", "Remsima", "Cimzia") ~ "Anti-TNF",
    treatment %in% c("Cosentyx", "Taltz", "Bimzelx") ~ "Anti-IL17",
    treatment %in% c("Rinvoq", "Xeljanz") ~ "JAK Inhibitor",
    treatment %in% c("Mabthera", "RoActemra", "Stelara", "Otezla") ~ "drop",
    treatment == "standard_non-high_cost_drug_treatment" ~ "Standard Non-High Cost Drug Treatment",
    TRUE ~ treatment  # Keep original treatment value if no match
  ))

write.csv(dataframe_sorted_and_reclassified_basmi, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered_with_treatment_category.csv", row.names = FALSE)
```

```{r, include=FALSE}
# If diagnosis is "Undifferentiated spondyloarthritis (uSpA) (17 ttas_id)" and "Axial SpA- No subgroup" (1 ttas_id), remove it as most of them are on standard treatment and is their representation is limited
dataframe_sorted_and_reclassified_basmi <- dataframe_sorted_and_reclassified_basmi %>%
  filter(diagnosis != "Undifferentiated spondyloarthritis (uSpA)" & diagnosis != "Axial SpA- No subgroup")

write.csv(dataframe_sorted_and_reclassified_basmi, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered_with_treatment_category_and_diagnosis.csv", row.names = FALSE)

# If treatment_reclassified is "drop", remove the row
dataframe_sorted_and_reclassified_basmi <- dataframe_sorted_and_reclassified_basmi %>%
  filter(treatment_reclassified != "drop")

write.csv(dataframe_sorted_and_reclassified_basmi, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered_with_treatment_category_and_diagnosis_and_treatment_reclassified.csv", row.names = FALSE)
```

```{r, include=FALSE, fig.width= 15, fig.height = 15}
data_tt1 <- dataframe_sorted_and_reclassified_basmi %>% 
  filter(ttas_id %in% c(1, 2, 3, 4))

custom_labels <- c(
  "1.1" = "Patient 1, Standard Non-High Cost Drug Treatment",
  "1.2" = "Patient 1, Anti-TNF",
  "1.4" = "Patient 1, Anti-TNF",
  "2.1" = "Patient 2, Standard Non-High Cost Drug Treatment",
  "3.1" = "Patient 3, Standard Non-High Cost Drug Treatment",
  "3.2" = "Patient 3, Anti-TNF",
  "3.4" = "Patient 3, Anti-TNF",
  "3.6" = "Patient 3, Anti-IL17",
  "4.1" = "Patient 4, Standard Non-High Cost Drug Treatment",
  "4.2" = "Patient 4, Anti-TNF"
)
  
# ggplot(data_tt1, aes(x = time_in_weeks, y = basmi_score,
# ggplot(data_tt1, aes(x = time_in_days, y = basmi_score,
# ggplot(data_tt1, aes(x = time_in_months, y = basmi_score,
ggplot(data_tt1, aes(x = time_in_years, y = basmi_score,
                     colour = interaction(factor(ttas_id),
                                          factor(treatment_order)
                                          ))) +
  geom_point(alpha = 0.75) +
  geom_line(alpha = 0.75) +
  labs(title = "BASMI Score Over Time by Treatment Periods for Patient 1 to Patient 4", 
       # x = "Time (Weeks)",
       # x = "Time (Days)",
       # x = "Time (Months)",
       x = "Time (Years)",
       y = "BASMI Score", 
       colour = "Patient and Treatment Period") +
  facet_wrap(~ttas_id, ncol = 1) +
  scale_colour_manual(labels = custom_labels, values = scales::hue_pal()(length(custom_labels))) +
  theme(legend.position = "bottom",
        text = element_text(size = 20),          # Overall text size
        plot.title = element_text(size = 22),    # Title size
        axis.title = element_text(size = 18),    # Axis title size
        axis.text = element_text(size = 16),     # Axis text size
        legend.box = "horizontal",               # Legend box orientation
        legend.text = element_text(size = 10),   # Legend text size
        legend.title = element_text(size = 12)   # Legend title size
        )
        

# Save image with size 15 x 15
ggplot2::ggsave("basmi_score_over_time_by_treatment_periods_for_patient_1_to_patient_4.png", width = 15, height = 15)
```

```{r, include=FALSE}
# Ensure that dataframe_sorted_and_reclassified_basmi has the correct data types
dataframe_sorted_and_reclassified_basmi$ttas_id <- as.factor(dataframe_sorted_and_reclassified_basmi$ttas_id)
dataframe_sorted_and_reclassified_basmi$gender <- as.factor(dataframe_sorted_and_reclassified_basmi$gender)
dataframe_sorted_and_reclassified_basmi$hlab27status <- as.factor(dataframe_sorted_and_reclassified_basmi$hlab27status)
dataframe_sorted_and_reclassified_basmi$age_at_basmi <- as.numeric(dataframe_sorted_and_reclassified_basmi$age_at_basmi)
dataframe_sorted_and_reclassified_basmi$diagnosis <- as.factor(dataframe_sorted_and_reclassified_basmi$diagnosis)
dataframe_sorted_and_reclassified_basmi$treatment <- as.factor(dataframe_sorted_and_reclassified_basmi$treatment)
dataframe_sorted_and_reclassified_basmi$treatment_order <- as.factor(dataframe_sorted_and_reclassified_basmi$treatment_order)
dataframe_sorted_and_reclassified_basmi$treatment_reclassified <- as.factor(dataframe_sorted_and_reclassified_basmi$treatment_reclassified)
dataframe_sorted_and_reclassified_basmi$date <- as.Date(dataframe_sorted_and_reclassified_basmi$date)
dataframe_sorted_and_reclassified_basmi$stop_date_for_period_date_format <- as.Date(dataframe_sorted_and_reclassified_basmi$stop_date_for_period_date_format)
dataframe_sorted_and_reclassified_basmi$overall_treatment_duration_in_days <- as.numeric(dataframe_sorted_and_reclassified_basmi$overall_treatment_duration_in_days)
dataframe_sorted_and_reclassified_basmi$treatment_window_weekly_time <- as.numeric(dataframe_sorted_and_reclassified_basmi$treatment_window_weekly_time)
dataframe_sorted_and_reclassified_basmi$basmi_score <- as.numeric(dataframe_sorted_and_reclassified_basmi$basmi_score)
dataframe_sorted_and_reclassified_basmi$time_in_days <- as.numeric(dataframe_sorted_and_reclassified_basmi$time_in_days)
dataframe_sorted_and_reclassified_basmi$time_in_weeks <- as.numeric(dataframe_sorted_and_reclassified_basmi$time_in_weeks)
dataframe_sorted_and_reclassified_basmi$time_in_months <- as.numeric(dataframe_sorted_and_reclassified_basmi$time_in_months)
dataframe_sorted_and_reclassified_basmi$time_in_years <- as.numeric(dataframe_sorted_and_reclassified_basmi$time_in_years)
dataframe_sorted_and_reclassified_basmi$last_known_smoking_status <- as.factor(dataframe_sorted_and_reclassified_basmi$last_known_smoking_status)
dataframe_sorted_and_reclassified_basmi$last_known_vaping_status <- as.factor(dataframe_sorted_and_reclassified_basmi$last_known_vaping_status)
```
# Filter out those with treatment_order 
```{r, include=TRUE}
# Filter rows where treatment_order > 3 and select unique ttas_id
filtered_ttas_id_more_than_3 <- dataframe_sorted_and_reclassified_basmi %>%
  filter(treatment_order %in% as.character(3:15)) %>%
  distinct(ttas_id)                  # Select unique ttas_id

# Filter out those with treatment_order > 4 and select unique ttas_id
filtered_ttas_id_more_than_4 <- dataframe_sorted_and_reclassified_basmi %>%
  filter(treatment_order %in% as.character(4:15)) %>%
  distinct(ttas_id)                  # Select unique ttas_id

# Filter out those with treatment_order > 5 and select unique ttas_id
filtered_ttas_id_more_than_5 <- dataframe_sorted_and_reclassified_basmi %>%
  filter(treatment_order %in% as.character(5:15)) %>%
  distinct(ttas_id)                  # Select unique ttas_id

# Filter out those with treatment_order > 6 and select unique ttas_id
filtered_ttas_id_more_than_6 <- dataframe_sorted_and_reclassified_basmi %>%
  filter(treatment_order %in% as.character(6:15)) %>%
  distinct(ttas_id)                  # Select unique ttas_id

# Filter out those with treatment_order > 7 and select unique ttas_id
filtered_ttas_id_more_than_7 <- dataframe_sorted_and_reclassified_basmi %>%
  filter(treatment_order %in% as.character(7:15)) %>%
  distinct(ttas_id)                  # Select unique ttas_id

# Filter out those with treatment_order > 8 and select unique ttas_id
filtered_ttas_id_more_than_8 <- dataframe_sorted_and_reclassified_basmi %>%
  filter(treatment_order %in% as.character(8:15)) %>%
  distinct(ttas_id)                  # Select unique ttas_id

# View the result
print(filtered_ttas_id_more_than_3)
print(filtered_ttas_id_more_than_4)
print(filtered_ttas_id_more_than_5)
print(filtered_ttas_id_more_than_6)
print(filtered_ttas_id_more_than_7)
print(filtered_ttas_id_more_than_8)
```

```{r}
# Print the all rows with ttas_id shown in filter_ttas_id_more_than_8
filtered_ttas_id_more_than_8_characteristics <- demographics_sheet_data %>%
  filter(ttas_id %in% filtered_ttas_id_more_than_8$ttas_id)

print(filtered_ttas_id_more_than_8_characteristics)
```

```{r}
# Print the all rows with ttas_id shown in filter_ttas_id_more_than_7
filtered_ttas_id_more_than_7_characteristics <- demographics_sheet_data %>%
  filter(ttas_id %in% filtered_ttas_id_more_than_7$ttas_id)

print(filtered_ttas_id_more_than_7_characteristics)
```

```{r}
# Print the all rows with ttas_id shown in filter_ttas_id_more_than_6
filtered_ttas_id_more_than_6_characteristics <- demographics_sheet_data %>%
  filter(ttas_id %in% filtered_ttas_id_more_than_6$ttas_id)

print(filtered_ttas_id_more_than_6_characteristics)
```
  

```{r, include=FALSE}
# # Run an lmer model for dataframe_sorted_and_reclassified_basmi
# model_1 <- lmer(basmi_score ~ gender + hlab27status + age_at_basmi + diagnosis + treatment_reclassified + treatment_window_weekly_time + (1 | ttas_id/treatment_order), data = dataframe_sorted_and_reclassified_basmi)
# 
# model_1_vif <- vif(model_1)
# print(summary(model_1, corr = TRUE))
# model_1_vif
```

```{r, include=FALSE}
# Encountered error: boundary (singular) fit: see ?isSingular
# model_2 <- lmer(basmi_score ~ gender + hlab27status + age_at_basmi + diagnosis + treatment_reclassified + treatment_window_weekly_time + (1 + treatment_window_weekly_time | ttas_id/treatment_order), data = dataframe_sorted_and_reclassified_basmi)
# model_3 <- lmer(basmi_score ~ gender + hlab27status + age_at_basmi + diagnosis + treatment_reclassified + treatment_window_weekly_time + (treatment_window_weekly_time | ttas_id/treatment_order), data = dataframe_sorted_and_reclassified_basmi)

# Model failed to converge. Model is nearly unidentifiable: very large eigenvalue
# model_4 <- lmer(basmi_score ~ gender + hlab27status + age_at_basmi + diagnosis + treatment_reclassified + treatment_window_weekly_time + (age_at_basmi | ttas_id/treatment_order), data = dataframe_sorted_and_reclassified_basmi)
```

```{r, include=FALSE}
# model_5 <- lmer(basmi_score ~ gender + hlab27status + age_at_basmi + diagnosis + treatment_reclassified*gender + treatment_window_weekly_time + (1 | ttas_id/treatment_order), data = dataframe_sorted_and_reclassified_basmi)
# 
# model_5_vif <- vif(model_5)
# print(summary(model_5, corr = TRUE))
# model_5_vif
```

```{r, include=FALSE}
# model_6 <- lmer(basmi_score ~ gender + hlab27status + age_at_basmi + diagnosis + treatment_reclassified*diagnosis + treatment_window_weekly_time + (1 | ttas_id/treatment_order), data = dataframe_sorted_and_reclassified_basmi)
# 
# model_6_vif <- vif(model_6)
# print(summary(model_6, corr = TRUE))
# model_6_vif
```
```{r, include=FALSE}
# model_6_lmerTest <- lmerTest::lmer(basmi_score ~ gender + hlab27status + age_at_basmi + diagnosis + treatment_reclassified*diagnosis + treatment_window_weekly_time + (1 | ttas_id/treatment_order), data = dataframe_sorted_and_reclassified_basmi)
# 
# summary(model_6_lmerTest)
```

```{r, include=FALSE}
# # Check the normality of residuals of model_6
# residuals_model_6 <- residuals(model_6)
# 
# # Shapiro-Wilk test
# # shapiro.test(residuals_model_6)
# 
# # QQ plot
# qqnorm(residuals_model_6)
# qqline(residuals_model_6)
# 
# # Histogram
# hist(residuals_model_6)
```

```{r, include=FALSE}
# Normality of random effects for model_6
# ranef_model_6 <- ranef(model_6, condVar = TRUE)
# 
# # Plot QQ plot for random intercepts at the patient level
# qqnorm(ranef_model_6$ttas_id[,1])
# qqline(ranef_model_6$ttas_id[,1])

# Plot QQ plot for random intercepts at the treatment period level within each patient
# qqnorm(ranef_model_6$ttas_id:treatment_order[,1])
# qqline(ranef_model_6$ttas_id:treatment_order[,1])
```

```{r, include=FALSE}
# Fitted values from the model
# fitted_values_model_6 <- fitted(model_6)
# 
# # Residuals vs. Fitted values
# plot(fitted_values_model_6, residuals_model_6, 
#      main = "Residuals vs Fitted", 
#      xlab = "Fitted Values", 
#      ylab = "Residuals")
# abline(h = 0, col = "red")
# 
# # Residuals vs. Age at BASMI
# plot(dataframe_sorted_and_reclassified_basmi$age_at_basmi, residuals_model_6, 
#      main = "Residuals vs Age at BASMI", 
#      xlab = "Age at BASMI", 
#      ylab = "Residuals")
# abline(h = 0, col = "red")

```

```{r, include=FALSE}
# # Plot Residuals vs Fitted values again for homoscedasticity check
# plot(fitted_values_model_6, residuals_model_6, 
#      main = "Residuals vs Fitted", 
#      xlab = "Fitted Values", 
#      ylab = "Residuals")
# abline(h = 0, col = "red")
```

```{r, include=FALSE}
# # If you have a time variable in your data, plot Residuals vs Time
# plot(dataframe_sorted_and_reclassified_basmi$treatment_window_weekly_time, residuals_model_6,
#      main = "Residuals vs Time", 
#      xlab = "Time (Weeks)", 
#      ylab = "Residuals")
# abline(h = 0, col = "red")
```

```{r, include=FALSE}
# Fixed-effect model matrix is rank deficient so dropping 2 column / coefficient
# model_7 <- lmer(basmi_score ~ gender + hlab27status + age_at_basmi + diagnosis + treatment_reclassified*hlab27status + treatment_window_weekly_time + (1 | ttas_id/treatment_order), data = dataframe_sorted_and_reclassified_basmi)

# Fixed-effect model matrix is rank deficient so dropping 2 columns / coefficients
# model_8 <- lmer(basmi_score ~ gender + hlab27status + age_at_basmi + diagnosis + treatment_reclassified*gender*diagnosis + treatment_window_weekly_time + (1 | ttas_id/treatment_order), data = dataframe_sorted_and_reclassified_basmi)
```

```{r, include=FALSE}
# model_9 <- lmer(basmi_score ~ gender + hlab27status +  diagnosis * treatment_reclassified + age_at_basmi + treatment_window_weekly_time + (treatment_window_weekly_time | ttas_id/treatment_order), data = dataframe_sorted_and_reclassified_basmi)
# 
# model_9_vif <- vif(model_9)
# print(summary(model_9, corr = TRUE))
# model_9_vif
```
```{r, include=FALSE}
# model_10 <- lmer(basmi_score ~ gender + hlab27status + age_at_basmi + diagnosis + treatment_reclassified + poly(treatment_window_weekly_time, 2) + treatment_window_weekly_time * treatment_reclassified + (1 | ttas_id/treatment_order)
# , data = dataframe_sorted_and_reclassified_basmi)
```

```{r, include=FALSE}
# model_1 <- lmer(basmi_score ~ gender + hlab27status + last_known_smoking_status + last_known_vaping_status + age_at_basmi + diagnosis + treatment_order + treatment_reclassified*diagnosis + time_in_years + (time_in_years | ttas_id), data = dataframe_sorted_and_reclassified_basmi)
# 
# model_1
# model_11_vif <- vif(model_11)
# print(summary(model_11, corr = TRUE))
# model_11_vif
```

```{r, include=FALSE}
# Old code: When time_in_year is not a random variable
# model_12 <- lmer(basmi_score ~ gender + hlab27status + age_at_basmi + diagnosis + treatment_order + treatment_reclassified*diagnosis + time_in_years + (1 | ttas_id), data = dataframe_sorted_and_reclassified_basmi)
# 
# model_12_vif <- vif(model_12)
# print(summary(model_12, corr = TRUE))
# model_12_vif
```

```{r, include=FALSE}
# Conduct F-test for model_11 and model_12
# anova(model_11, model_12)
```

```{r, include=FALSE}
# Questions for the professor
# Update: Scaling the time variable to years has resolved convergence issue as weeks can go up to 3 digits value but basmi_score is between 0 and 10.
# TODO: Don't go into too much detail int optimisation
# Question to ask: Is the F-test to compare full and reduced to check whether interaction terms are significant correct? Or was it for something else?
# Reduced model encountered a convergence error, hence I tweaked the optimizer and maxfun, model_11_full is slightly different from model_11 but I believe it is the correct one. Should I include this in the report?
# Should I include a brief overview of the bobqa optimizer and maxfun in the report?
```

# lme4 code for treatment and diagnosis: BASMI score

```{r, include=TRUE}
# Make sure that the reference level for treatment_reclassified is
# "Standard Non-High Cost Drug Treatment"
dataframe_sorted_and_reclassified_basmi$treatment_reclassified <-
  relevel(dataframe_sorted_and_reclassified_basmi$treatment_reclassified,
          ref = "Standard Non-High Cost Drug Treatment")

# Make sure that the reference level for hlba27status is "undiagnosed"
dataframe_sorted_and_reclassified_basmi$hlab27status <-
  relevel(dataframe_sorted_and_reclassified_basmi$hlab27status,
          ref = "undiagnosed")

# Make sure that the reference level for diagnosis is "Axial SpA- nr-axSpA"
dataframe_sorted_and_reclassified_basmi$diagnosis <-
  relevel(dataframe_sorted_and_reclassified_basmi$diagnosis,
          ref = "Axial SpA- AS")

# Make sure that the reference level for treatment_order is 1
dataframe_sorted_and_reclassified_basmi$treatment_order <-
  relevel(dataframe_sorted_and_reclassified_basmi$treatment_order,
          ref = 1)

# Make sure that the reference level for last_known_smoking_status is
# "no information"
dataframe_sorted_and_reclassified_basmi$last_known_smoking_status <-
  relevel(dataframe_sorted_and_reclassified_basmi$last_known_smoking_status,
          ref = "no information")

# Make sure that the reference level for last_known_vaping_status is
# "no information"
dataframe_sorted_and_reclassified_basmi$last_known_vaping_status <-
  relevel(dataframe_sorted_and_reclassified_basmi$last_known_vaping_status,
          ref = "no information")
```

```{r, include=TRUE}
model_treatment_diagnosis_basmi_full <- lmer(
  basmi_score ~ gender + hlab27status + age_at_basmi +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +
    treatment_reclassified * diagnosis +
    time_in_years + (time_in_years | ttas_id),
                     data = dataframe_sorted_and_reclassified_basmi,
                     control = lmerControl(optimizer = "bobyqa",
                                           optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
model_treatment_diagnosis_basmi_reduced <- lmer(
  basmi_score ~ gender + hlab27status + age_at_basmi +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +
    treatment_reclassified +
    time_in_years + (time_in_years | ttas_id),
                        data = dataframe_sorted_and_reclassified_basmi,
                        control = lmerControl(optimizer = "bobyqa",
                                              optCtrl = list(maxfun = 2e5)))
```

```{r, include=FALSE}
# # Test model
# test_model <- lmer(
#   basmi_score ~ gender + hlab27status + age_at_basmi +
#     treatment_order + last_known_smoking_status +
#     last_known_vaping_status +
#     treatment_reclassified * diagnosis +
#     time_in_years + (time_in_years | ttas_id),
#                      data = dataframe_sorted_and_reclassified_basmi,
#                      control = lmerControl(optimizer = "bobyqa",
#                                            optCtrl = list(maxfun = 2e5)))
# print(summary(test_model, corr = FALSE))
```

```{r, include=TRUE}
print(summary(model_treatment_diagnosis_basmi_full, corr = FALSE))
```

```{r, include = TRUE}
print(summary(model_treatment_diagnosis_basmi_reduced, corr = FALSE))
```

```{r, include=TRUE}
anova(model_treatment_diagnosis_basmi_full, model_treatment_diagnosis_basmi_reduced)
```

```{r, include=FALSE}
# Sanity check multicollinearity
model_treatment_diagnosis_basmi_full_vif <- vif(model_treatment_diagnosis_basmi_full)
model_treatment_diagnosis_basmi_reduced_vif <- vif(model_treatment_diagnosis_basmi_reduced)
model_treatment_diagnosis_basmi_full_vif
model_treatment_diagnosis_basmi_reduced_vif
```

## For BASMI only: Plot predicted lmer() geom_line
```{r, include=FALSE, fig.height=15, fig.width=15}
model_treatment_diagnosis_basmi_full_plot_lines <- lmer(
  basmi_score ~ gender + hlab27status + age_at_basmi +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +
    treatment_reclassified * diagnosis +
    time_in_years + (time_in_years | ttas_id),
                     data = dataframe_sorted_and_reclassified_basmi,
                     control = lmerControl(optimizer = "bobyqa",
                                           optCtrl = list(maxfun = 2e5)))

model_treatment_diagnosis_basmi_reduced_plot_lines <- lmer(
  basmi_score ~ gender + hlab27status + age_at_basmi +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +
    treatment_reclassified +
    time_in_years + (time_in_years | ttas_id),
                        data = dataframe_sorted_and_reclassified_basmi,
                        control = lmerControl(optimizer = "bobyqa",
                                              optCtrl = list(maxfun = 2e5)))

# Ensure that the categorical variables in `data_tt1` are factors
data_tt1$gender <- factor(data_tt1$gender)
data_tt1$hlab27status <- factor(data_tt1$hlab27status)
data_tt1$diagnosis <- factor(data_tt1$diagnosis)
data_tt1$treatment_order <- factor(data_tt1$treatment_order)
data_tt1$last_known_smoking_status <- factor(data_tt1$last_known_smoking_status)
data_tt1$last_known_vaping_status <- factor(data_tt1$last_known_vaping_status)
data_tt1$treatment_reclassified <- factor(data_tt1$treatment_reclassified)

# Predict fitted values for the data
data_tt1$predicted_basmi_score_full <- predict(model_treatment_diagnosis_basmi_full_plot_lines, newdata = data_tt1)
data_tt1$predicted_basmi_score_reduced <- predict(model_treatment_diagnosis_basmi_reduced_plot_lines, newdata = data_tt1)

# Plot with fitted lines from the lmer model
ggplot(data_tt1, aes(x = time_in_years, y = basmi_score,
                     colour = interaction(factor(ttas_id),
                                          factor(treatment_order)))) +
  # Plot the original data points
  geom_point(alpha = 0.75) +
  geom_line(alpha = 0.75) +
  
  # Add the predicted values from the full model as dashed lines
  geom_line(aes(y = predicted_basmi_score_full), linetype = "dashed", size = 1, color = "red", alpha = 0.5) +
  
  # Add the predicted values from the reduced model as dotted lines
  geom_line(aes(y = predicted_basmi_score_reduced), linetype = "dotted", size = 1, color = "blue", alpha = 0.5) +
  
  labs(title = "BASMI Score Over Time by Treatment Periods for Patient 1 to Patient 4", 
       x = "Time (Years)",
       y = "BASMI Score", 
       colour = "Patient and Treatment Period",
       linetype = "Model Type (Full or Reduced)"
       ) +
  
  facet_wrap(~ttas_id, ncol = 1) +
  
  scale_colour_manual(labels = custom_labels, values = scales::hue_pal()(length(custom_labels))) +
  theme(legend.position = "bottom",
        text = element_text(size = 20),          # Overall text size
        plot.title = element_text(size = 22),    # Title size
        axis.title = element_text(size = 18),    # Axis title size
        axis.text = element_text(size = 16),     # Axis text size
        legend.box = "horizontal",               # Legend box orientation
        legend.text = element_text(size = 10),   # Legend text size
        legend.title = element_text(size = 12)   # Legend title size
        )

# Save the plot as an image
ggsave("basmi_score_with_lmer_lines_full_and_reduced.png", width = 15, height = 15)

```


## lme4 code for treatment and gender: BASMI score
```{r, include=TRUE}
model_treatment_gender_basmi_full <- lmer(
  basmi_score ~ gender + hlab27status + age_at_basmi +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +
    treatment_reclassified * gender +
    time_in_years + (time_in_years | ttas_id),
                     data = dataframe_sorted_and_reclassified_basmi,
                     control = lmerControl(optimizer = "bobyqa",
                                           optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
model_treatment_gender_basmi_reduced <- lmer(
  basmi_score ~ gender + hlab27status + age_at_basmi +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +
    treatment_reclassified +
    time_in_years + (time_in_years | ttas_id),
                        data = dataframe_sorted_and_reclassified_basmi,
                        control = lmerControl(optimizer = "bobyqa",
                                              optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
print(summary(model_treatment_gender_basmi_full, corr = FALSE))
```

```{r}
print(summary(model_treatment_gender_basmi_reduced, corr = FALSE))
```

```{r, include=TRUE}
anova(model_treatment_gender_basmi_full,
      model_treatment_gender_basmi_reduced)
```

# BASDAI Score analysis
```{r, include=FALSE}
# BASDAI score only
# General longitudinal analysis for those with and without drugs
dataframe_sorted_basdai <- dataframe_sorted %>%
  filter(!is.na(basdai)) %>%
  select(ttas_id, gender, hlab27status, age_at_prom, diagnosis, treatment, last_known_smoking_status, last_known_vaping_status, treatment_order, date, stop_date_for_period_date_format, overall_treatment_duration_in_days, treatment_window_weekly_time, time_in_days, time_in_weeks, time_in_months, time_in_years, basdai)

write.csv(dataframe_sorted_basdai, "temp_dataframe_after_dataframe_sorted_for_analysis_basdai.csv", row.names = FALSE)

# Ignore if there is only one instance of row per treatment_period_unique_identifier in each ttas_id
dataframe_sorted_basdai <- dataframe_sorted_basdai %>%
  group_by(ttas_id, treatment_order) %>%
  filter(n() > 1) %>% # Keep only groups with more than one row after filtering out NAs
  ungroup()

write.csv(dataframe_sorted_basdai, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered.csv", row.names = FALSE)
```

```{r, include=FALSE}
# Reclassify the drugs
dataframe_sorted_and_reclassified_basdai <- dataframe_sorted_basdai %>%
  mutate(treatment_reclassified = case_when(
    treatment %in% c("Amgevita", "Humira", "Imraldi", "Yuflyma", "Benepali", "Enbrel", "Simponi", "Remicade", "Remsima", "Cimzia") ~ "Anti-TNF",
    treatment %in% c("Cosentyx", "Taltz", "Bimzelx") ~ "Anti-IL17",
    treatment %in% c("Rinvoq", "Xeljanz") ~ "JAK Inhibitor",
    treatment %in% c("Mabthera", "RoActemra", "Stelara", "Otezla") ~ "drop",
    treatment == "standard_non-high_cost_drug_treatment" ~ "Standard Non-High Cost Drug Treatment",
    TRUE ~ treatment  # Keep original treatment value if no match
  ))

write.csv(dataframe_sorted_and_reclassified_basdai, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered_with_treatment_category_basdai.csv", row.names = FALSE)
```

```{r, include=FALSE}
# If diagnosis is "Undifferentiated spondyloarthritis (uSpA) (17 ttas_id)" and "Axial SpA- No subgroup" (1 ttas_id), remove it as most of them are on standard treatment and is their representation is limited
dataframe_sorted_and_reclassified_basdai <- dataframe_sorted_and_reclassified_basdai %>%
  filter(diagnosis != "Undifferentiated spondyloarthritis (uSpA)" & diagnosis != "Axial SpA- No subgroup")

write.csv(dataframe_sorted_and_reclassified_basdai, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered_with_treatment_category_and_diagnosis_basdai.csv", row.names = FALSE)

# If treatment_reclassified is "drop", remove the row
dataframe_sorted_and_reclassified_basdai <- dataframe_sorted_and_reclassified_basdai %>%
  filter(treatment_reclassified != "drop")

write.csv(dataframe_sorted_and_reclassified_basdai, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered_with_treatment_category_and_diagnosis_and_treatment_reclassified_basdai.csv", row.names = FALSE)
```

```{r, include=FALSE}
# Ensure that dataframe_sorted_and_reclassified_basdai has the correct data types
dataframe_sorted_and_reclassified_basdai$ttas_id <- as.factor(dataframe_sorted_and_reclassified_basdai$ttas_id)
dataframe_sorted_and_reclassified_basdai$gender <- as.factor(dataframe_sorted_and_reclassified_basdai$gender)
dataframe_sorted_and_reclassified_basdai$hlab27status <- as.factor(dataframe_sorted_and_reclassified_basdai$hlab27status)
dataframe_sorted_and_reclassified_basdai$age_at_prom <- as.numeric(dataframe_sorted_and_reclassified_basdai$age_at_prom)
dataframe_sorted_and_reclassified_basdai$diagnosis <- as.factor(dataframe_sorted_and_reclassified_basdai$diagnosis)
dataframe_sorted_and_reclassified_basdai$treatment <- as.factor(dataframe_sorted_and_reclassified_basdai$treatment)
dataframe_sorted_and_reclassified_basdai$treatment_order <- as.factor(dataframe_sorted_and_reclassified_basdai$treatment_order)
dataframe_sorted_and_reclassified_basdai$treatment_reclassified <- as.factor(dataframe_sorted_and_reclassified_basdai$treatment_reclassified)
dataframe_sorted_and_reclassified_basdai$date <- as.Date(dataframe_sorted_and_reclassified_basdai$date)
dataframe_sorted_and_reclassified_basdai$stop_date_for_period_date_format <- as.Date(dataframe_sorted_and_reclassified_basdai$stop_date_for_period_date_format)
dataframe_sorted_and_reclassified_basdai$overall_treatment_duration_in_days <- as.numeric(dataframe_sorted_and_reclassified_basdai$overall_treatment_duration_in_days)
dataframe_sorted_and_reclassified_basdai$treatment_window_weekly_time <- as.numeric(dataframe_sorted_and_reclassified_basdai$treatment_window_weekly_time)
dataframe_sorted_and_reclassified_basdai$basdai <- as.numeric(dataframe_sorted_and_reclassified_basdai$basdai)
dataframe_sorted_and_reclassified_basdai$time_in_days <- as.numeric(dataframe_sorted_and_reclassified_basdai$time_in_days)
dataframe_sorted_and_reclassified_basdai$time_in_weeks <- as.numeric(dataframe_sorted_and_reclassified_basdai$time_in_weeks)
dataframe_sorted_and_reclassified_basdai$time_in_months <- as.numeric(dataframe_sorted_and_reclassified_basdai$time_in_months)
dataframe_sorted_and_reclassified_basdai$time_in_years <- as.numeric(dataframe_sorted_and_reclassified_basdai$time_in_years)
dataframe_sorted_and_reclassified_basdai$last_known_smoking_status <- as.factor(dataframe_sorted_and_reclassified_basdai$last_known_smoking_status)
dataframe_sorted_and_reclassified_basdai$last_known_vaping_status <- as.factor(dataframe_sorted_and_reclassified_basdai$last_known_vaping_status)
```

# lme4 code for treatment and diagnosis: BASDAI score

```{r, include=FALSE}
# Make sure that the reference level for treatment_reclassified is
# "Standard Non-High Cost Drug Treatment"
dataframe_sorted_and_reclassified_basdai$treatment_reclassified <-
  relevel(dataframe_sorted_and_reclassified_basdai$treatment_reclassified,
          ref = "Standard Non-High Cost Drug Treatment")

# Make sure that the reference level for hlba27status is "undiagnosed"
dataframe_sorted_and_reclassified_basdai$hlab27status <-
  relevel(dataframe_sorted_and_reclassified_basdai$hlab27status,
          ref = "undiagnosed")

# Make sure that the reference level for diagnosis is "Axial SpA- nr-axSpA"
dataframe_sorted_and_reclassified_basdai$diagnosis <-
  relevel(dataframe_sorted_and_reclassified_basdai$diagnosis,
          ref = "Axial SpA- AS")

# Make sure that the reference level for treatment_order is 1
dataframe_sorted_and_reclassified_basdai$treatment_order <-
  relevel(dataframe_sorted_and_reclassified_basdai$treatment_order,
          ref = 1)

# Make sure that the reference level for last_known_smoking_status is
# "no information"
dataframe_sorted_and_reclassified_basdai$last_known_smoking_status <-
  relevel(dataframe_sorted_and_reclassified_basdai$last_known_smoking_status,
          ref = "no information")

# Make sure that the reference level for last_known_vaping_status is
# "no information"
dataframe_sorted_and_reclassified_basdai$last_known_vaping_status <-
  relevel(dataframe_sorted_and_reclassified_basdai$last_known_vaping_status,
          ref = "no information")
```

```{r, include=TRUE}
# Define the full and reduced models
model_treatment_diagnosis_basdai_full <- lmer(
  basdai ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified * diagnosis +
    time_in_years + (time_in_years | ttas_id),
                     data = dataframe_sorted_and_reclassified_basdai,
                     control = lmerControl(optimizer = "bobyqa",
                                           optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
model_treatment_diagnosis_basdai_reduced <- lmer(
  basdai ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified +
    time_in_years + (time_in_years | ttas_id),
                      data = dataframe_sorted_and_reclassified_basdai,
                      control = lmerControl(optimizer = "bobyqa",
                                            optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
print(summary(model_treatment_diagnosis_basdai_full, corr = FALSE))
```

```{r, include=TRUE}
print(summary(model_treatment_diagnosis_basdai_reduced, corr = FALSE))
```

```{r, include=TRUE}
anova(model_treatment_diagnosis_basdai_full,
      model_treatment_diagnosis_basdai_reduced)
```

# lme4 code for treatment and gender: BASDAI score 

```{r, include=TRUE}
# Define the full and reduced models
model_treatment_gender_basdai_full <- lmer(
  basdai ~ hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified * gender +
    time_in_years + (time_in_years | ttas_id),
                     data = dataframe_sorted_and_reclassified_basdai,
                     control = lmerControl(optimizer = "bobyqa",
                                           optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
model_treatment_gender_basdai_reduced <- lmer(
  basdai ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified +
    time_in_years + (time_in_years | ttas_id),
                      data = dataframe_sorted_and_reclassified_basdai,
                      control = lmerControl(optimizer = "bobyqa",
                                            optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
print(summary(model_treatment_gender_basdai_full, corr = FALSE))
```

```{r, include=TRUE}
print(summary(model_treatment_gender_basdai_reduced, corr = FALSE))
```

```{r, include=TRUE}
anova(model_treatment_gender_basdai_full,
      model_treatment_gender_basdai_reduced)
```

# BASFI score

```{r, include=FALSE}
# BASFI score only
# General longitudinal analysis for those with and without drugs
dataframe_sorted_basfi <- dataframe_sorted %>%
  filter(!is.na(basfi)) %>%
  select(ttas_id, gender, hlab27status, age_at_prom, diagnosis, treatment, last_known_smoking_status, last_known_vaping_status, treatment_order, date, stop_date_for_period_date_format, overall_treatment_duration_in_days, treatment_window_weekly_time, time_in_days, time_in_weeks, time_in_months, time_in_years, basfi)

write.csv(dataframe_sorted_basfi, "temp_dataframe_after_dataframe_sorted_for_analysis_basfi.csv", row.names = FALSE)

# Ignore if there is only one instance of row per treatment_period_unique_identifier in each ttas_id
dataframe_sorted_basfi <- dataframe_sorted_basfi %>%
  group_by(ttas_id, treatment_order) %>%
  filter(n() > 1) %>% # Keep only groups with more than one row after filtering out NAs
  ungroup()

write.csv(dataframe_sorted_basfi, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered.csv", row.names = FALSE)
```

```{r, include=FALSE}
# Reclassify the drugs
dataframe_sorted_and_reclassified_basfi <- dataframe_sorted_basfi %>%
  mutate(treatment_reclassified = case_when(
    treatment %in% c("Amgevita", "Humira", "Imraldi", "Yuflyma", "Benepali", "Enbrel", "Simponi", "Remicade", "Remsima", "Cimzia") ~ "Anti-TNF",
    treatment %in% c("Cosentyx", "Taltz", "Bimzelx") ~ "Anti-IL17",
    treatment %in% c("Rinvoq", "Xeljanz") ~ "JAK Inhibitor",
    treatment %in% c("Mabthera", "RoActemra", "Stelara", "Otezla") ~ "drop",
    treatment == "standard_non-high_cost_drug_treatment" ~ "Standard Non-High Cost Drug Treatment",
    TRUE ~ treatment  # Keep original treatment value if no match
  ))

write.csv(dataframe_sorted_and_reclassified_basfi, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered_with_treatment_category_basfi.csv", row.names = FALSE)
```

```{r, include=FALSE}
# If diagnosis is "Undifferentiated spondyloarthritis (uSpA) (17 ttas_id)" and "Axial SpA- No subgroup" (1 ttas_id), remove it as most of them are on standard treatment and is their representation is limited
dataframe_sorted_and_reclassified_basfi <- dataframe_sorted_and_reclassified_basfi %>%
  filter(diagnosis != "Undifferentiated spondyloarthritis (uSpA)" & diagnosis != "Axial SpA- No subgroup")

write.csv(dataframe_sorted_and_reclassified_basfi, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered_with_treatment_category_and_diagnosis_basfi.csv", row.names = FALSE)

# If treatment_reclassified is "drop", remove the row
dataframe_sorted_and_reclassified_basfi <- dataframe_sorted_and_reclassified_basfi %>%
  filter(treatment_reclassified != "drop")

write.csv(dataframe_sorted_and_reclassified_basfi, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered_with_treatment_category_and_diagnosis_and_treatment_reclassified_basfi.csv", row.names = FALSE)
```

```{r, include=FALSE}
# Ensure that dataframe_sorted_and_reclassified_basfi has the correct data types
dataframe_sorted_and_reclassified_basfi$ttas_id <- as.factor(dataframe_sorted_and_reclassified_basfi$ttas_id)
dataframe_sorted_and_reclassified_basfi$gender <- as.factor(dataframe_sorted_and_reclassified_basfi$gender)
dataframe_sorted_and_reclassified_basfi$hlab27status <- as.factor(dataframe_sorted_and_reclassified_basfi$hlab27status)
dataframe_sorted_and_reclassified_basfi$age_at_prom <- as.numeric(dataframe_sorted_and_reclassified_basfi$age_at_prom)
dataframe_sorted_and_reclassified_basfi$diagnosis <- as.factor(dataframe_sorted_and_reclassified_basfi$diagnosis)
dataframe_sorted_and_reclassified_basfi$treatment <- as.factor(dataframe_sorted_and_reclassified_basfi$treatment)
dataframe_sorted_and_reclassified_basfi$treatment_order <- as.factor(dataframe_sorted_and_reclassified_basfi$treatment_order)
dataframe_sorted_and_reclassified_basfi$treatment_reclassified <- as.factor(dataframe_sorted_and_reclassified_basfi$treatment_reclassified)
dataframe_sorted_and_reclassified_basfi$date <- as.Date(dataframe_sorted_and_reclassified_basfi$date)
dataframe_sorted_and_reclassified_basfi$stop_date_for_period_date_format <- as.Date(dataframe_sorted_and_reclassified_basfi$stop_date_for_period_date_format)
dataframe_sorted_and_reclassified_basfi$overall_treatment_duration_in_days <- as.numeric(dataframe_sorted_and_reclassified_basfi$overall_treatment_duration_in_days)
dataframe_sorted_and_reclassified_basfi$treatment_window_weekly_time <- as.numeric(dataframe_sorted_and_reclassified_basfi$treatment_window_weekly_time)
dataframe_sorted_and_reclassified_basfi$basfi <- as.numeric(dataframe_sorted_and_reclassified_basfi$basfi)
dataframe_sorted_and_reclassified_basfi$time_in_days <- as.numeric(dataframe_sorted_and_reclassified_basfi$time_in_days)
dataframe_sorted_and_reclassified_basfi$time_in_weeks <- as.numeric(dataframe_sorted_and_reclassified_basfi$time_in_weeks)
dataframe_sorted_and_reclassified_basfi$time_in_months <- as.numeric(dataframe_sorted_and_reclassified_basfi$time_in_months)
dataframe_sorted_and_reclassified_basfi$time_in_years <- as.numeric(dataframe_sorted_and_reclassified_basfi$time_in_years)
dataframe_sorted_and_reclassified_basfi$last_known_smoking_status <- as.factor(dataframe_sorted_and_reclassified_basfi$last_known_smoking_status)
dataframe_sorted_and_reclassified_basfi$last_known_vaping_status <- as.factor(dataframe_sorted_and_reclassified_basfi$last_known_vaping_status)
```

# lme4 code for treatment and diagnosis: BASFI score

```{r, include=FALSE}
# Make sure that the reference level for treatment_reclassified is
# "Standard Non-High Cost Drug Treatment"
dataframe_sorted_and_reclassified_basfi$treatment_reclassified <-
  relevel(dataframe_sorted_and_reclassified_basfi$treatment_reclassified,
          ref = "Standard Non-High Cost Drug Treatment")

# Make sure that the reference level for hlba27status is "undiagnosed"
dataframe_sorted_and_reclassified_basfi$hlab27status <-
  relevel(dataframe_sorted_and_reclassified_basfi$hlab27status,
          ref = "undiagnosed")

# Make sure that the reference level for diagnosis is "Axial SpA- nr-axSpA"
dataframe_sorted_and_reclassified_basfi$diagnosis <-
  relevel(dataframe_sorted_and_reclassified_basfi$diagnosis,
          ref = "Axial SpA- AS")

# Make sure that the reference level for treatment_order is 1
dataframe_sorted_and_reclassified_basfi$treatment_order <-
  relevel(dataframe_sorted_and_reclassified_basfi$treatment_order,
          ref = 1)

# Make sure that the reference level for last_known_smoking_status is
# "no information"
dataframe_sorted_and_reclassified_basfi$last_known_smoking_status <-
  relevel(dataframe_sorted_and_reclassified_basfi$last_known_smoking_status,
          ref = "no information")

# Make sure that the reference level for last_known_vaping_status is
# "no information"
dataframe_sorted_and_reclassified_basfi$last_known_vaping_status <-
  relevel(dataframe_sorted_and_reclassified_basfi$last_known_vaping_status,
          ref = "no information")
```

```{r, include=TRUE}
model_treatment_diagnosis_basfi_full <- lmer(
  basfi ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified * diagnosis +
    time_in_years + (time_in_years | ttas_id),
                     data = dataframe_sorted_and_reclassified_basfi,
                     control = lmerControl(optimizer = "bobyqa",
                                           optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
model_treatment_diagnosis_basfi_reduced <- lmer(
  basfi ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified +
    time_in_years + (time_in_years | ttas_id),
                      data = dataframe_sorted_and_reclassified_basfi,
                      control = lmerControl(optimizer = "bobyqa",
                                            optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
print(summary(model_treatment_diagnosis_basfi_full, corr = FALSE))
```

```{r, include=TRUE}
print(summary(model_treatment_diagnosis_basfi_reduced, corr = FALSE))
```

```{r, include=TRUE}
anova(model_treatment_diagnosis_basfi_full,
      model_treatment_diagnosis_basfi_reduced)
```

# lme4 code for treatment and gender: BASFI score

```{r, include=TRUE}
model_treatment_gender_basfi_full <- lmer(
  basfi ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified * gender +
    time_in_years + (time_in_years | ttas_id),
                     data = dataframe_sorted_and_reclassified_basfi,
                     control = lmerControl(optimizer = "bobyqa",
                                           optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
model_treatment_gender_basfi_reduced <- lmer(
  basfi ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified +
    time_in_years + (time_in_years | ttas_id),
                      data = dataframe_sorted_and_reclassified_basfi,
                      control = lmerControl(optimizer = "bobyqa",
                                            optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
print(summary(model_treatment_gender_basfi_full, corr = FALSE))
```

```{r, include=TRUE}
print(summary(model_treatment_gender_basfi_reduced, corr = FALSE))
```

```{r, include=TRUE}
anova(model_treatment_gender_basfi_full,
      model_treatment_gender_basfi_reduced)
```

# Patient Global Score

```{r, include=FALSE}
# Patient Global score only
# General longitudinal analysis for those with and without drugs
dataframe_sorted_patient_global <- dataframe_sorted %>%
  filter(!is.na(patient_global)) %>%
  select(ttas_id, gender, hlab27status, age_at_prom, diagnosis, treatment, last_known_smoking_status, last_known_vaping_status, treatment_order, date, stop_date_for_period_date_format, overall_treatment_duration_in_days, treatment_window_weekly_time, time_in_days, time_in_weeks, time_in_months, time_in_years, patient_global)

write.csv(dataframe_sorted_patient_global, "temp_dataframe_after_dataframe_sorted_for_analysis_patient_global.csv", row.names = FALSE)

# Ignore if there is only one instance of row per treatment_period_unique_identifier in each ttas_id
dataframe_sorted_patient_global <- dataframe_sorted_patient_global %>%
  group_by(ttas_id, treatment_order) %>%
  filter(n() > 1) %>% # Keep only groups with more than one row after filtering out NAs
  ungroup()

write.csv(dataframe_sorted_patient_global, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered.csv", row.names = FALSE)
```

```{r, include=FALSE}
# Reclassify the drugs
dataframe_sorted_and_reclassified_patient_global <- dataframe_sorted_patient_global %>%
  mutate(treatment_reclassified = case_when(
    treatment %in% c("Amgevita", "Humira", "Imraldi", "Yuflyma", "Benepali", "Enbrel", "Simponi", "Remicade", "Remsima", "Cimzia") ~ "Anti-TNF",
    treatment %in% c("Cosentyx", "Taltz", "Bimzelx") ~ "Anti-IL17",
    treatment %in% c("Rinvoq", "Xeljanz") ~ "JAK Inhibitor",
    treatment %in% c("Mabthera", "RoActemra", "Stelara", "Otezla") ~ "drop",
    treatment == "standard_non-high_cost_drug_treatment" ~ "Standard Non-High Cost Drug Treatment",
    TRUE ~ treatment  # Keep original treatment value if no match
  ))

write.csv(dataframe_sorted_and_reclassified_patient_global, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered_with_treatment_category_patient_global.csv", row.names = FALSE)
```

```{r, include=FALSE}
# If diagnosis is "Undifferentiated spondyloarthritis (uSpA) (17 ttas_id)" and "Axial SpA- No subgroup" (1 ttas_id), remove it as most of them are on standard treatment and is their representation is limited
dataframe_sorted_and_reclassified_patient_global <- dataframe_sorted_and_reclassified_patient_global %>%
  filter(diagnosis != "Undifferentiated spondyloarthritis (uSpA)" & diagnosis != "Axial SpA- No subgroup")

write.csv(dataframe_sorted_and_reclassified_patient_global, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered_with_treatment_category_and_diagnosis_patient_global.csv", row.names = FALSE)

# If treatment_reclassified is "drop", remove the row
dataframe_sorted_and_reclassified_patient_global <- dataframe_sorted_and_reclassified_patient_global %>%
  filter(treatment_reclassified != "drop")

write.csv(dataframe_sorted_and_reclassified_patient_global, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered_with_treatment_category_and_diagnosis_and_treatment_reclassified_patient_global.csv", row.names = FALSE)
```

```{r, include=FALSE}
# Ensure that dataframe_sorted_and_reclassified_patient_global has the correct data types
dataframe_sorted_and_reclassified_patient_global$ttas_id <- as.factor(dataframe_sorted_and_reclassified_patient_global$ttas_id)
dataframe_sorted_and_reclassified_patient_global$gender <- as.factor(dataframe_sorted_and_reclassified_patient_global$gender)
dataframe_sorted_and_reclassified_patient_global$hlab27status <- as.factor(dataframe_sorted_and_reclassified_patient_global$hlab27status)
dataframe_sorted_and_reclassified_patient_global$age_at_prom <- as.numeric(dataframe_sorted_and_reclassified_patient_global$age_at_prom)
dataframe_sorted_and_reclassified_patient_global$diagnosis <- as.factor(dataframe_sorted_and_reclassified_patient_global$diagnosis)
dataframe_sorted_and_reclassified_patient_global$treatment <- as.factor(dataframe_sorted_and_reclassified_patient_global$treatment)
dataframe_sorted_and_reclassified_patient_global$treatment_order <- as.factor(dataframe_sorted_and_reclassified_patient_global$treatment_order)
dataframe_sorted_and_reclassified_patient_global$treatment_reclassified <- as.factor(dataframe_sorted_and_reclassified_patient_global$treatment_reclassified)
dataframe_sorted_and_reclassified_patient_global$date <- as.Date(dataframe_sorted_and_reclassified_patient_global$date)
dataframe_sorted_and_reclassified_patient_global$stop_date_for_period_date_format <- as.Date(dataframe_sorted_and_reclassified_patient_global$stop_date_for_period_date_format)
dataframe_sorted_and_reclassified_patient_global$overall_treatment_duration_in_days <- as.numeric(dataframe_sorted_and_reclassified_patient_global$overall_treatment_duration_in_days)
dataframe_sorted_and_reclassified_patient_global$treatment_window_weekly_time <- as.numeric(dataframe_sorted_and_reclassified_patient_global$treatment_window_weekly_time)
dataframe_sorted_and_reclassified_patient_global$patient_global <- as.numeric(dataframe_sorted_and_reclassified_patient_global$patient_global)
dataframe_sorted_and_reclassified_patient_global$time_in_days <- as.numeric(dataframe_sorted_and_reclassified_patient_global$time_in_days)
dataframe_sorted_and_reclassified_patient_global$time_in_weeks <- as.numeric(dataframe_sorted_and_reclassified_patient_global$time_in_weeks)
dataframe_sorted_and_reclassified_patient_global$time_in_months <- as.numeric(dataframe_sorted_and_reclassified_patient_global$time_in_months)
dataframe_sorted_and_reclassified_patient_global$time_in_years <- as.numeric(dataframe_sorted_and_reclassified_patient_global$time_in_years)
dataframe_sorted_and_reclassified_patient_global$last_known_smoking_status <- as.factor(dataframe_sorted_and_reclassified_patient_global$last_known_smoking_status)
dataframe_sorted_and_reclassified_patient_global$last_known_vaping_status <- as.factor(dataframe_sorted_and_reclassified_patient_global$last_known_vaping_status)
```


```{r, include=FALSE}
# Make sure that the reference level for treatment_reclassified is
# "Standard Non-High Cost Drug Treatment"
dataframe_sorted_and_reclassified_patient_global$treatment_reclassified <-
  relevel(dataframe_sorted_and_reclassified_patient_global$treatment_reclassified,
          ref = "Standard Non-High Cost Drug Treatment")

# Make sure that the reference level for hlba27status is "undiagnosed"
dataframe_sorted_and_reclassified_patient_global$hlab27status <-
  relevel(dataframe_sorted_and_reclassified_patient_global$hlab27status,
          ref = "undiagnosed")

# Make sure that the reference level for diagnosis is "Axial SpA- nr-axSpA"
dataframe_sorted_and_reclassified_patient_global$diagnosis <-
  relevel(dataframe_sorted_and_reclassified_patient_global$diagnosis,
          ref = "Axial SpA- AS")

# Make sure that the reference level for treatment_order is 1
dataframe_sorted_and_reclassified_patient_global$treatment_order <-
  relevel(dataframe_sorted_and_reclassified_patient_global$treatment_order,
          ref = 1)

# Make sure that the reference level for last_known_smoking_status is
# "no information"
dataframe_sorted_and_reclassified_patient_global$last_known_smoking_status <-
  relevel(dataframe_sorted_and_reclassified_patient_global$last_known_smoking_status,
          ref = "no information")

# Make sure that the reference level for last_known_vaping_status is
# "no information"
dataframe_sorted_and_reclassified_patient_global$last_known_vaping_status <-
  relevel(dataframe_sorted_and_reclassified_patient_global$last_known_vaping_status,
          ref = "no information")
```

# lme4 code for treatment and diagnosis: Patient Global Score

```{r, include=TRUE}
model_treatment_diagnosis_patient_global_full <- lmer(
  patient_global ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified * diagnosis +
    time_in_years + (time_in_years | ttas_id),
                     data = dataframe_sorted_and_reclassified_patient_global,
                     control = lmerControl(optimizer = "bobyqa",
                                           optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
model_treatment_diagnosis_patient_global_reduced <- lmer(
  patient_global ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified +
    time_in_years + (time_in_years | ttas_id),
                      data = dataframe_sorted_and_reclassified_patient_global,
                      control = lmerControl(optimizer = "bobyqa",
                                            optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
print(summary(model_treatment_diagnosis_patient_global_full, corr = FALSE))
```

```{r, include=TRUE}
print(summary(model_treatment_diagnosis_patient_global_reduced, corr = FALSE))
```

```{r, include=TRUE}
anova(model_treatment_diagnosis_patient_global_full,
      model_treatment_diagnosis_patient_global_reduced)
```

# lme4 code for treatment and gender: Patient Global Score

```{r, include=TRUE}
model_treatment_gender_patient_global_full <- lmer(
  patient_global ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified * gender +
    time_in_years + (time_in_years | ttas_id),
                     data = dataframe_sorted_and_reclassified_patient_global,
                     control = lmerControl(optimizer = "bobyqa",
                                           optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
model_treatment_gender_patient_global_reduced <- lmer(
  patient_global ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified +
    time_in_years + (time_in_years | ttas_id),
                      data = dataframe_sorted_and_reclassified_patient_global,
                      control = lmerControl(optimizer = "bobyqa",
                                            optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
print(summary(model_treatment_gender_patient_global_full, corr = FALSE))
```

```{r, include=TRUE}
print(summary(model_treatment_gender_patient_global_reduced, corr = FALSE))
```

```{r}
anova(model_treatment_gender_patient_global_full,
      model_treatment_gender_patient_global_reduced)
```

# Back Pain At Night

```{r, include=FALSE}
# Back Pain At Night only
# General longitudinal analysis for those with and without drugs
dataframe_sorted_back_pain_at_night <- dataframe_sorted %>%
  filter(!is.na(back_pain_at_night)) %>%
  select(ttas_id, gender, hlab27status, age_at_prom, diagnosis, treatment, last_known_smoking_status, last_known_vaping_status, treatment_order, date, stop_date_for_period_date_format, overall_treatment_duration_in_days, treatment_window_weekly_time, time_in_days, time_in_weeks, time_in_months, time_in_years, back_pain_at_night)

write.csv(dataframe_sorted_back_pain_at_night, "temp_dataframe_after_dataframe_sorted_for_analysis_back_pain_at_night.csv", row.names = FALSE)
```

```{r, include=FALSE}
# Ignore if there is only one instance of row per treatment_period_unique_identifier in each ttas_id
dataframe_sorted_back_pain_at_night <- dataframe_sorted_back_pain_at_night %>%
  group_by(ttas_id, treatment_order) %>%
  filter(n() > 1) %>% # Keep only groups with more than one row after filtering out NAs
  ungroup()

write.csv(dataframe_sorted_back_pain_at_night, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered.csv", row.names = FALSE)
```

```{r, include=FALSE}
# Reclassify the drugs
dataframe_sorted_and_reclassified_back_pain_at_night <- dataframe_sorted_back_pain_at_night %>%
  mutate(treatment_reclassified = case_when(
    treatment %in% c("Amgevita", "Humira", "Imraldi", "Yuflyma", "Benepali", "Enbrel", "Simponi", "Remicade", "Remsima", "Cimzia") ~ "Anti-TNF",
    treatment %in% c("Cosentyx", "Taltz", "Bimzelx") ~ "Anti-IL17",
    treatment %in% c("Rinvoq", "Xeljanz") ~ "JAK Inhibitor",
    treatment %in% c("Mabthera", "RoActemra", "Stelara", "Otezla") ~ "drop",
    treatment == "standard_non-high_cost_drug_treatment" ~ "Standard Non-High Cost Drug Treatment",
    TRUE ~ treatment  # Keep original treatment value if no match
  ))

write.csv(dataframe_sorted_and_reclassified_back_pain_at_night, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered_with_treatment_category_back_pain_at_night.csv", row.names = FALSE)

# If diagnosis is "Undifferentiated spondyloarthritis (uSpA) (17 ttas_id)" and "Axial SpA- No subgroup" (1 ttas_id), remove it as most of them are on standard treatment and is their representation is limited
dataframe_sorted_and_reclassified_back_pain_at_night <- dataframe_sorted_and_reclassified_back_pain_at_night %>%
  filter(diagnosis != "Undifferentiated spondyloarthritis (uSpA)" & diagnosis != "Axial SpA- No subgroup")

write.csv(dataframe_sorted_and_reclassified_back_pain_at_night, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered_with_treatment_category_and_diagnosis_back_pain_at_night.csv", row.names = FALSE)

# If treatment_reclassified is "drop", remove the row
dataframe_sorted_and_reclassified_back_pain_at_night <- dataframe_sorted_and_reclassified_back_pain_at_night %>%
  filter(treatment_reclassified != "drop")
```

```{r, include=FALSE}
# Ensure that dataframe_sorted_and_reclassified_back_pain_at_night has the correct data types
dataframe_sorted_and_reclassified_back_pain_at_night$ttas_id <- as.factor(dataframe_sorted_and_reclassified_back_pain_at_night$ttas_id)
dataframe_sorted_and_reclassified_back_pain_at_night$gender <- as.factor(dataframe_sorted_and_reclassified_back_pain_at_night$gender)
dataframe_sorted_and_reclassified_back_pain_at_night$hlab27status <- as.factor(dataframe_sorted_and_reclassified_back_pain_at_night$hlab27status)
dataframe_sorted_and_reclassified_back_pain_at_night$age_at_prom <- as.numeric(dataframe_sorted_and_reclassified_back_pain_at_night$age_at_prom)
dataframe_sorted_and_reclassified_back_pain_at_night$diagnosis <- as.factor(dataframe_sorted_and_reclassified_back_pain_at_night$diagnosis)
dataframe_sorted_and_reclassified_back_pain_at_night$treatment <- as.factor(dataframe_sorted_and_reclassified_back_pain_at_night$treatment)
dataframe_sorted_and_reclassified_back_pain_at_night$treatment_order <- as.factor(dataframe_sorted_and_reclassified_back_pain_at_night$treatment_order)
dataframe_sorted_and_reclassified_back_pain_at_night$treatment_reclassified <- as.factor(dataframe_sorted_and_reclassified_back_pain_at_night$treatment_reclassified)
dataframe_sorted_and_reclassified_back_pain_at_night$date <- as.Date(dataframe_sorted_and_reclassified_back_pain_at_night$date)
dataframe_sorted_and_reclassified_back_pain_at_night$stop_date_for_period_date_format <- as.Date(dataframe_sorted_and_reclassified_back_pain_at_night$stop_date_for_period_date_format)
dataframe_sorted_and_reclassified_back_pain_at_night$overall_treatment_duration_in_days <- as.numeric(dataframe_sorted_and_reclassified_back_pain_at_night$overall_treatment_duration_in_days)
dataframe_sorted_and_reclassified_back_pain_at_night$treatment_window_weekly_time <- as.numeric(dataframe_sorted_and_reclassified_back_pain_at_night$treatment_window_weekly_time)
dataframe_sorted_and_reclassified_back_pain_at_night$back_pain_at_night <- as.numeric(dataframe_sorted_and_reclassified_back_pain_at_night$back_pain_at_night)
dataframe_sorted_and_reclassified_back_pain_at_night$time_in_days <- as.numeric(dataframe_sorted_and_reclassified_back_pain_at_night$time_in_days)
dataframe_sorted_and_reclassified_back_pain_at_night$time_in_weeks <- as.numeric(dataframe_sorted_and_reclassified_back_pain_at_night$time_in_weeks)
dataframe_sorted_and_reclassified_back_pain_at_night$time_in_months <- as.numeric(dataframe_sorted_and_reclassified_back_pain_at_night$time_in_months)
dataframe_sorted_and_reclassified_back_pain_at_night$time_in_years <- as.numeric(dataframe_sorted_and_reclassified_back_pain_at_night$time_in_years)
dataframe_sorted_and_reclassified_back_pain_at_night$last_known_smoking_status <- as.factor(dataframe_sorted_and_reclassified_back_pain_at_night$last_known_smoking_status)
dataframe_sorted_and_reclassified_back_pain_at_night$last_known_vaping_status <- as.factor(dataframe_sorted_and_reclassified_back_pain_at_night$last_known_vaping_status)
```

```{r, include=FALSE}
# Make sure that the reference level for treatment_reclassified is
# "Standard Non-High Cost Drug Treatment"
dataframe_sorted_and_reclassified_back_pain_at_night$treatment_reclassified <-
  relevel(dataframe_sorted_and_reclassified_back_pain_at_night$treatment_reclassified,
          ref = "Standard Non-High Cost Drug Treatment")

# Make sure that the reference level for hlba27status is "undiagnosed"
dataframe_sorted_and_reclassified_back_pain_at_night$hlab27status <-
  relevel(dataframe_sorted_and_reclassified_back_pain_at_night$hlab27status,
          ref = "undiagnosed")

# Make sure that the reference level for diagnosis is "Axial SpA- nr-axSpA"
dataframe_sorted_and_reclassified_back_pain_at_night$diagnosis <-
  relevel(dataframe_sorted_and_reclassified_back_pain_at_night$diagnosis,
          ref = "Axial SpA- AS")

# Make sure that the reference level for treatment_order is 1
dataframe_sorted_and_reclassified_back_pain_at_night$treatment_order <-
  relevel(dataframe_sorted_and_reclassified_back_pain_at_night$treatment_order,
          ref = 1)

# Make sure that the reference level for last_known_smoking_status is
# "no information"
dataframe_sorted_and_reclassified_back_pain_at_night$last_known_smoking_status <-
  relevel(dataframe_sorted_and_reclassified_back_pain_at_night$last_known_smoking_status,
          ref = "no information")

# Make sure that the reference level for last_known_vaping_status is
# "no information"
dataframe_sorted_and_reclassified_back_pain_at_night$last_known_vaping_status <-
  relevel(dataframe_sorted_and_reclassified_back_pain_at_night$last_known_vaping_status,
          ref = "no information")
```

# lme4 code for treatment and diagnosis: Back Pain At Night

```{r, include=TRUE}
model_treatment_diagnosis_back_pain_at_night_full <- lmer(
  back_pain_at_night ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified * diagnosis +
    time_in_years + (time_in_years | ttas_id),
                     data = dataframe_sorted_and_reclassified_back_pain_at_night,
                     control = lmerControl(optimizer = "bobyqa",
                                           optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
model_treatment_diagnosis_back_pain_at_night_reduced <- lmer(
  back_pain_at_night ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified +
    time_in_years + (time_in_years | ttas_id),
                      data = dataframe_sorted_and_reclassified_back_pain_at_night,
                      control = lmerControl(optimizer = "bobyqa",
                                            optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
print(summary(model_treatment_diagnosis_back_pain_at_night_full, corr = FALSE))
```

```{r, include=TRUE}
print(summary(model_treatment_diagnosis_back_pain_at_night_reduced, corr = FALSE))
```

```{r, include=TRUE}
anova(model_treatment_diagnosis_back_pain_at_night_full,
      model_treatment_diagnosis_back_pain_at_night_reduced)
```

# lme4 code for treatment and gender: Back Pain At Night

```{r, include=TRUE}
model_treatment_gender_back_pain_at_night_full <- lmer(
  back_pain_at_night ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified * gender +
    time_in_years + (time_in_years | ttas_id),
                     data = dataframe_sorted_and_reclassified_back_pain_at_night,
                     control = lmerControl(optimizer = "bobyqa",
                                           optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
model_treatment_gender_back_pain_at_night_reduced <- lmer(
  back_pain_at_night ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified +
    time_in_years + (time_in_years | ttas_id),
                      data = dataframe_sorted_and_reclassified_back_pain_at_night,
                      control = lmerControl(optimizer = "bobyqa",
                                            optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
print(summary(model_treatment_gender_back_pain_at_night_full, corr = FALSE))
```

```{r, include=TRUE}
print(summary(model_treatment_gender_back_pain_at_night_reduced, corr = FALSE))
```

```{r, include=TRUE}
anova(model_treatment_gender_back_pain_at_night_full,
      model_treatment_gender_back_pain_at_night_reduced)
```

# Back Pain Anytime

```{r, include=FALSE}
# Back Pain Anytime only
# General longitudinal analysis for those with and without drugs
dataframe_sorted_back_pain_anytime <- dataframe_sorted %>%
  filter(!is.na(back_pain_anytime)) %>%
  select(ttas_id, gender, hlab27status, age_at_prom, diagnosis, treatment, last_known_smoking_status, last_known_vaping_status, treatment_order, date, stop_date_for_period_date_format, overall_treatment_duration_in_days, treatment_window_weekly_time, time_in_days, time_in_weeks, time_in_months, time_in_years, back_pain_anytime)

write.csv(dataframe_sorted_back_pain_anytime, "temp_dataframe_after_dataframe_sorted_for_analysis_back_pain_anytime.csv", row.names = FALSE)
```

```{r, include=FALSE}
# Ignore if there is only one instance of row per treatment_period_unique_identifier in each ttas_id
dataframe_sorted_back_pain_anytime <- dataframe_sorted_back_pain_anytime %>%
  group_by(ttas_id, treatment_order) %>%
  filter(n() > 1) %>% # Keep only groups with more than one row after filtering out NAs
  ungroup()

write.csv(dataframe_sorted_back_pain_anytime, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered.csv", row.names = FALSE)
```

```{r, include=FALSE}
# Reclassify the drugs
dataframe_sorted_and_reclassified_back_pain_anytime <- dataframe_sorted_back_pain_anytime %>%
  mutate(treatment_reclassified = case_when(
    treatment %in% c("Amgevita", "Humira", "Imraldi", "Yuflyma", "Benepali", "Enbrel", "Simponi", "Remicade", "Remsima", "Cimzia") ~ "Anti-TNF",
    treatment %in% c("Cosentyx", "Taltz", "Bimzelx") ~ "Anti-IL17",
    treatment %in% c("Rinvoq", "Xeljanz") ~ "JAK Inhibitor",
    treatment %in% c("Mabthera", "RoActemra", "Stelara", "Otezla") ~ "drop",
    treatment == "standard_non-high_cost_drug_treatment" ~ "Standard Non-High Cost Drug Treatment",
    TRUE ~ treatment  # Keep original treatment value if no match
  ))

write.csv(dataframe_sorted_and_reclassified_back_pain_anytime, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered_with_treatment_category_back_pain_anytime.csv", row.names = FALSE)

# If diagnosis is "Undifferentiated spondyloarthritis (uSpA) (17 ttas_id)" and "Axial SpA- No subgroup" (1 ttas_id), remove it as most of them are on standard treatment and is their representation is limited
dataframe_sorted_and_reclassified_back_pain_anytime <- dataframe_sorted_and_reclassified_back_pain_anytime %>%
  filter(diagnosis != "Undifferentiated spondyloarthritis (uSpA)" & diagnosis != "Axial SpA- No subgroup")

write.csv(dataframe_sorted_and_reclassified_back_pain_anytime, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered_with_treatment_category_and_diagnosis_back_pain_anytime.csv", row.names = FALSE)

# If treatment_reclassified is "drop", remove the row
dataframe_sorted_and_reclassified_back_pain_anytime <- dataframe_sorted_and_reclassified_back_pain_anytime %>%
  filter(treatment_reclassified != "drop")
```

```{r, include=FALSE}
# Ensure that dataframe_sorted_and_reclassified_back_pain_anytime has the correct data types
dataframe_sorted_and_reclassified_back_pain_anytime$ttas_id <- as.factor(dataframe_sorted_and_reclassified_back_pain_anytime$ttas_id)
dataframe_sorted_and_reclassified_back_pain_anytime$gender <- as.factor(dataframe_sorted_and_reclassified_back_pain_anytime$gender)
dataframe_sorted_and_reclassified_back_pain_anytime$hlab27status <- as.factor(dataframe_sorted_and_reclassified_back_pain_anytime$hlab27status)
dataframe_sorted_and_reclassified_back_pain_anytime$age_at_prom <- as.numeric(dataframe_sorted_and_reclassified_back_pain_anytime$age_at_prom)
dataframe_sorted_and_reclassified_back_pain_anytime$diagnosis <- as.factor(dataframe_sorted_and_reclassified_back_pain_anytime$diagnosis)
dataframe_sorted_and_reclassified_back_pain_anytime$treatment <- as.factor(dataframe_sorted_and_reclassified_back_pain_anytime$treatment)
dataframe_sorted_and_reclassified_back_pain_anytime$treatment_order <- as.factor(dataframe_sorted_and_reclassified_back_pain_anytime$treatment_order)
dataframe_sorted_and_reclassified_back_pain_anytime$treatment_reclassified <- as.factor(dataframe_sorted_and_reclassified_back_pain_anytime$treatment_reclassified)
dataframe_sorted_and_reclassified_back_pain_anytime$date <- as.Date(dataframe_sorted_and_reclassified_back_pain_anytime$date)
dataframe_sorted_and_reclassified_back_pain_anytime$stop_date_for_period_date_format <- as.Date(dataframe_sorted_and_reclassified_back_pain_anytime$stop_date_for_period_date_format)
dataframe_sorted_and_reclassified_back_pain_anytime$overall_treatment_duration_in_days <- as.numeric(dataframe_sorted_and_reclassified_back_pain_anytime$overall_treatment_duration_in_days)
dataframe_sorted_and_reclassified_back_pain_anytime$treatment_window_weekly_time <- as.numeric(dataframe_sorted_and_reclassified_back_pain_anytime$treatment_window_weekly_time)
dataframe_sorted_and_reclassified_back_pain_anytime$back_pain_anytime <- as.numeric(dataframe_sorted_and_reclassified_back_pain_anytime$back_pain_anytime)
dataframe_sorted_and_reclassified_back_pain_anytime$time_in_days <- as.numeric(dataframe_sorted_and_reclassified_back_pain_anytime$time_in_days)
dataframe_sorted_and_reclassified_back_pain_anytime$time_in_weeks <- as.numeric(dataframe_sorted_and_reclassified_back_pain_anytime$time_in_weeks)
dataframe_sorted_and_reclassified_back_pain_anytime$time_in_months <- as.numeric(dataframe_sorted_and_reclassified_back_pain_anytime$time_in_months)
dataframe_sorted_and_reclassified_back_pain_anytime$time_in_years <- as.numeric(dataframe_sorted_and_reclassified_back_pain_anytime$time_in_years)
dataframe_sorted_and_reclassified_back_pain_anytime$last_known_smoking_status <- as.factor(dataframe_sorted_and_reclassified_back_pain_anytime$last_known_smoking_status)
dataframe_sorted_and_reclassified_back_pain_anytime$last_known_vaping_status <- as.factor(dataframe_sorted_and_reclassified_back_pain_anytime$last_known_vaping_status)
```

```{r, include=FALSE}
# Make sure that the reference level for treatment_reclassified is
# "Standard Non-High Cost Drug Treatment"
dataframe_sorted_and_reclassified_back_pain_anytime$treatment_reclassified <-
  relevel(dataframe_sorted_and_reclassified_back_pain_anytime$treatment_reclassified,
          ref = "Standard Non-High Cost Drug Treatment")

# Make sure that the reference level for hlba27status is "undiagnosed"
dataframe_sorted_and_reclassified_back_pain_anytime$hlab27status <-
  relevel(dataframe_sorted_and_reclassified_back_pain_anytime$hlab27status,
          ref = "undiagnosed")

# Make sure that the reference level for diagnosis is "Axial SpA- nr-axSpA"
dataframe_sorted_and_reclassified_back_pain_anytime$diagnosis <-
  relevel(dataframe_sorted_and_reclassified_back_pain_anytime$diagnosis,
          ref = "Axial SpA- AS")

# Make sure that the reference level for treatment_order is 1
dataframe_sorted_and_reclassified_back_pain_anytime$treatment_order <-
  relevel(dataframe_sorted_and_reclassified_back_pain_anytime$treatment_order,
          ref = 1)

# Make sure that the reference level for last_known_smoking_status is
# "no information"
dataframe_sorted_and_reclassified_back_pain_anytime$last_known_smoking_status <-
  relevel(dataframe_sorted_and_reclassified_back_pain_anytime$last_known_smoking_status,
          ref = "no information")

# Make sure that the reference level for last_known_vaping_status is
# "no information"
dataframe_sorted_and_reclassified_back_pain_anytime$last_known_vaping_status <-
  relevel(dataframe_sorted_and_reclassified_back_pain_anytime$last_known_vaping_status,
          ref = "no information")

```

# lme4 code for treatment and diagnosis: Back Pain Anytime

```{r, include=TRUE}
model_treatment_diagnosis_back_pain_anytime_full <- lmer(
  back_pain_anytime ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified * diagnosis +
    time_in_years + (time_in_years | ttas_id),
                     data = dataframe_sorted_and_reclassified_back_pain_anytime,
                     control = lmerControl(optimizer = "bobyqa",
                                           optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
model_treatment_diagnosis_back_pain_anytime_reduced <- lmer(
  back_pain_anytime ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified +
    time_in_years + (time_in_years | ttas_id),
                      data = dataframe_sorted_and_reclassified_back_pain_anytime,
                      control = lmerControl(optimizer = "bobyqa",
                                            optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
print(summary(model_treatment_diagnosis_back_pain_anytime_full, corr = FALSE))
```

```{r, include=TRUE}
print(summary(model_treatment_diagnosis_back_pain_anytime_reduced, corr = FALSE))
```

```{r, include=TRUE}
anova(model_treatment_diagnosis_back_pain_anytime_full,
      model_treatment_diagnosis_back_pain_anytime_reduced)
```

# lme4 code for treatment and gender: Back Pain Anytime

```{r, include=TRUE}
model_treatment_gender_back_pain_anytime_full <- lmer(
  back_pain_anytime ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified * gender +
    time_in_years + (time_in_years | ttas_id),
                     data = dataframe_sorted_and_reclassified_back_pain_anytime,
                     control = lmerControl(optimizer = "bobyqa",
                                           optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
model_treatment_gender_back_pain_anytime_reduced <- lmer(
  back_pain_anytime ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified +
    time_in_years + (time_in_years | ttas_id),
                      data = dataframe_sorted_and_reclassified_back_pain_anytime,
                      control = lmerControl(optimizer = "bobyqa",
                                            optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
print(summary(model_treatment_gender_back_pain_anytime_full, corr = FALSE))
```

```{r, include=TRUE}
print(summary(model_treatment_gender_back_pain_anytime_reduced, corr = FALSE))
```

```{r, include=TRUE}
anova(model_treatment_gender_back_pain_anytime_full,
      model_treatment_gender_back_pain_anytime_reduced)
```

# AsQoL

```{r, include=FALSE}
# AsQoL only
# General longitudinal analysis for those with and without drugs
dataframe_sorted_asqol <- dataframe_sorted %>%
  filter(!is.na(as_qol)) %>%
    select(ttas_id, gender, hlab27status, age_at_prom, diagnosis, treatment, last_known_smoking_status, last_known_vaping_status, treatment_order, date, stop_date_for_period_date_format, overall_treatment_duration_in_days, treatment_window_weekly_time, time_in_days, time_in_weeks, time_in_months, time_in_years, as_qol)

write.csv(dataframe_sorted_asqol, "temp_dataframe_after_dataframe_sorted_for_analysis_asqol.csv", row.names = FALSE)
```

```{r, include=FALSE}
# Ignore if there is only one instance of row per treatment_period_unique_identifier in each ttas_id
dataframe_sorted_asqol <- dataframe_sorted_asqol %>%
  group_by(ttas_id, treatment_order) %>%
  filter(n() > 1) %>% # Keep only groups with more than one row after filtering out NAs
  ungroup()

write.csv(dataframe_sorted_asqol, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered.csv", row.names = FALSE)
```

```{r, include=FALSE}
# Reclassify the drugs
dataframe_sorted_and_reclassified_asqol <- dataframe_sorted_asqol %>%
  mutate(treatment_reclassified = case_when(
    treatment %in% c("Amgevita", "Humira", "Imraldi", "Yuflyma", "Benepali", "Enbrel", "Simponi", "Remicade", "Remsima", "Cimzia") ~ "Anti-TNF",
    treatment %in% c("Cosentyx", "Taltz", "Bimzelx") ~ "Anti-IL17",
    treatment %in% c("Rinvoq", "Xeljanz") ~ "JAK Inhibitor",
    treatment %in% c("Mabthera", "RoActemra", "Stelara", "Otezla") ~ "drop",
    treatment == "standard_non-high_cost_drug_treatment" ~ "Standard Non-High Cost Drug Treatment",
    TRUE ~ treatment  # Keep original treatment value if no match
  ))

write.csv(dataframe_sorted_and_reclassified_asqol, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered_with_treatment_category_asqol.csv", row.names = FALSE)

# If diagnosis is "Undifferentiated spondyloarthritis (uSpA) (17 ttas_id)" and "Axial SpA- No subgroup" (1 ttas_id), remove it as most of them are on standard treatment and is their representation is limited
dataframe_sorted_and_reclassified_asqol <- dataframe_sorted_and_reclassified_asqol %>%
  filter(diagnosis != "Undifferentiated spondyloarthritis (uSpA)" & diagnosis != "Axial SpA- No subgroup")

write.csv(dataframe_sorted_and_reclassified_asqol, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered_with_treatment_category_and_diagnosis_asqol.csv", row.names = FALSE)

# If treatment_reclassified is "drop", remove the row
dataframe_sorted_and_reclassified_asqol <- dataframe_sorted_and_reclassified_asqol %>%
  filter(treatment_reclassified != "drop")
```

```{r, include=FALSE}
# Ensure that dataframe_sorted_and_reclassified_asqol has the correct data types
dataframe_sorted_and_reclassified_asqol$ttas_id <- as.factor(dataframe_sorted_and_reclassified_asqol$ttas_id)
dataframe_sorted_and_reclassified_asqol$gender <- as.factor(dataframe_sorted_and_reclassified_asqol$gender)
dataframe_sorted_and_reclassified_asqol$hlab27status <- as.factor(dataframe_sorted_and_reclassified_asqol$hlab27status)
dataframe_sorted_and_reclassified_asqol$age_at_prom <- as.numeric(dataframe_sorted_and_reclassified_asqol$age_at_prom)
dataframe_sorted_and_reclassified_asqol$diagnosis <- as.factor(dataframe_sorted_and_reclassified_asqol$diagnosis)
dataframe_sorted_and_reclassified_asqol$treatment <- as.factor(dataframe_sorted_and_reclassified_asqol$treatment)
dataframe_sorted_and_reclassified_asqol$treatment_order <- as.factor(dataframe_sorted_and_reclassified_asqol$treatment_order)
dataframe_sorted_and_reclassified_asqol$treatment_reclassified <- as.factor(dataframe_sorted_and_reclassified_asqol$treatment_reclassified)
dataframe_sorted_and_reclassified_asqol$date <- as.Date(dataframe_sorted_and_reclassified_asqol$date)
dataframe_sorted_and_reclassified_asqol$stop_date_for_period_date_format <- as.Date(dataframe_sorted_and_reclassified_asqol$stop_date_for_period_date_format)
dataframe_sorted_and_reclassified_asqol$overall_treatment_duration_in_days <- as.numeric(dataframe_sorted_and_reclassified_asqol$overall_treatment_duration_in_days)
dataframe_sorted_and_reclassified_asqol$treatment_window_weekly_time <- as.numeric(dataframe_sorted_and_reclassified_asqol$treatment_window_weekly_time)
dataframe_sorted_and_reclassified_asqol$as_qol <- as.numeric(dataframe_sorted_and_reclassified_asqol$as_qol)
dataframe_sorted_and_reclassified_asqol$time_in_days <- as.numeric(dataframe_sorted_and_reclassified_asqol$time_in_days)
dataframe_sorted_and_reclassified_asqol$time_in_weeks <- as.numeric(dataframe_sorted_and_reclassified_asqol$time_in_weeks)
dataframe_sorted_and_reclassified_asqol$time_in_months <- as.numeric(dataframe_sorted_and_reclassified_asqol$time_in_months)
dataframe_sorted_and_reclassified_asqol$time_in_years <- as.numeric(dataframe_sorted_and_reclassified_asqol$time_in_years)
dataframe_sorted_and_reclassified_asqol$last_known_smoking_status <- as.factor(dataframe_sorted_and_reclassified_asqol$last_known_smoking_status)
dataframe_sorted_and_reclassified_asqol$last_known_vaping_status <- as.factor(dataframe_sorted_and_reclassified_asqol$last_known_vaping_status)
```

```{r, include=FALSE}
# Make sure that the reference level for treatment_reclassified is
# "Standard Non-High Cost Drug Treatment"
dataframe_sorted_and_reclassified_asqol$treatment_reclassified <-
  relevel(dataframe_sorted_and_reclassified_asqol$treatment_reclassified,
          ref = "Standard Non-High Cost Drug Treatment")

# Make sure that the reference level for hlba27status is "undiagnosed"
dataframe_sorted_and_reclassified_asqol$hlab27status <-
  relevel(dataframe_sorted_and_reclassified_asqol$hlab27status,
          ref = "undiagnosed")

# Make sure that the reference level for diagnosis is "Axial SpA- nr-axSpA"
dataframe_sorted_and_reclassified_asqol$diagnosis <-
  relevel(dataframe_sorted_and_reclassified_asqol$diagnosis,
          ref = "Axial SpA- AS")

# Make sure that the reference level for treatment_order is 1
dataframe_sorted_and_reclassified_asqol$treatment_order <-
  relevel(dataframe_sorted_and_reclassified_asqol$treatment_order,
          ref = 1)

# Make sure that the reference level for last_known_smoking_status is
# "no information"
dataframe_sorted_and_reclassified_asqol$last_known_smoking_status <-
  relevel(dataframe_sorted_and_reclassified_asqol$last_known_smoking_status,
          ref = "no information")

# Make sure that the reference level for last_known_vaping_status is
# "no information"
dataframe_sorted_and_reclassified_asqol$last_known_vaping_status <-
  relevel(dataframe_sorted_and_reclassified_asqol$last_known_vaping_status,
          ref = "no information")
```

# lme4 code for treatment and diagnosis: AsQoL

```{r, include=TRUE}
model_treatment_diagnosis_asqol_full <- lmer(
  as_qol ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified * diagnosis +
    time_in_years + (time_in_years | ttas_id),
                     data = dataframe_sorted_and_reclassified_asqol,
                     control = lmerControl(optimizer = "bobyqa",
                                           optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
model_treatment_diagnosis_asqol_reduced <- lmer(
  as_qol ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified +
    time_in_years + (time_in_years | ttas_id),
                      data = dataframe_sorted_and_reclassified_asqol,
                      control = lmerControl(optimizer = "bobyqa",
                                            optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
print(summary(model_treatment_diagnosis_asqol_full, corr = FALSE))
```

```{r, include=TRUE}
print(summary(model_treatment_diagnosis_asqol_reduced, corr = FALSE))
```

```{r, include=TRUE}
anova(model_treatment_diagnosis_asqol_full,
      model_treatment_diagnosis_asqol_reduced)
```

# lme4 code for treatment and gender: AsQoL

```{r, include=TRUE}
model_treatment_gender_asqol_full <- lmer(
  as_qol ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified * gender +
    time_in_years + (time_in_years | ttas_id),
                     data = dataframe_sorted_and_reclassified_asqol,
                     control = lmerControl(optimizer = "bobyqa",
                                           optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
model_treatment_gender_asqol_reduced <- lmer(
  as_qol ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified +
    time_in_years + (time_in_years | ttas_id),
                      data = dataframe_sorted_and_reclassified_asqol,
                      control = lmerControl(optimizer = "bobyqa",
                                            optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
print(summary(model_treatment_gender_asqol_full, corr = FALSE))
```

```{r, include=TRUE}
print(summary(model_treatment_gender_asqol_reduced, corr = FALSE))
```

```{r, include=TRUE}
anova(model_treatment_gender_asqol_full,
      model_treatment_gender_asqol_reduced)
```

# Jenkins Sleep

```{r, include=FALSE}
# Jenkins Sleep only
# General longitudinal analysis for those with and without drugs
dataframe_sorted_jenkins_sleep_1 <- dataframe_sorted %>%
  filter(!is.na(jenkins_sleep_1)) %>%
  select(ttas_id, gender, hlab27status, age_at_prom, diagnosis, treatment, last_known_smoking_status, last_known_vaping_status, treatment_order, date, stop_date_for_period_date_format, overall_treatment_duration_in_days, treatment_window_weekly_time, time_in_days, time_in_weeks, time_in_months, time_in_years, jenkins_sleep_1)

write.csv(dataframe_sorted_jenkins_sleep_1, "temp_dataframe_after_dataframe_sorted_for_analysis_jenkins_sleep_1.csv", row.names = FALSE)

dataframe_sorted_jenkins_sleep_2 <- dataframe_sorted %>%
  filter(!is.na(jenkins_sleep_2)) %>%
  select(ttas_id, gender, hlab27status, age_at_prom, diagnosis, treatment, last_known_smoking_status, last_known_vaping_status, treatment_order, date, stop_date_for_period_date_format, overall_treatment_duration_in_days, treatment_window_weekly_time, time_in_days, time_in_weeks, time_in_months, time_in_years, jenkins_sleep_2)

write.csv(dataframe_sorted_jenkins_sleep_2, "temp_dataframe_after_dataframe_sorted_for_analysis_jenkins_sleep_2.csv", row.names = FALSE)

dataframe_sorted_jenkins_sleep_3 <- dataframe_sorted %>%
  filter(!is.na(jenkins_sleep_3)) %>%
  select(ttas_id, gender, hlab27status, age_at_prom, diagnosis, treatment, last_known_smoking_status, last_known_vaping_status, treatment_order, date, stop_date_for_period_date_format, overall_treatment_duration_in_days, treatment_window_weekly_time, time_in_days, time_in_weeks, time_in_months, time_in_years, jenkins_sleep_3)

write.csv(dataframe_sorted_jenkins_sleep_3, "temp_dataframe_after_dataframe_sorted_for_analysis_jenkins_sleep_3.csv", row.names = FALSE)

dataframe_sorted_jenkins_sleep_4 <- dataframe_sorted %>%
  filter(!is.na(jenkins_sleep_4)) %>%
  select(ttas_id, gender, hlab27status, age_at_prom, diagnosis, treatment, last_known_smoking_status, last_known_vaping_status, treatment_order, date, stop_date_for_period_date_format, overall_treatment_duration_in_days, treatment_window_weekly_time, time_in_days, time_in_weeks, time_in_months, time_in_years, jenkins_sleep_4)

write.csv(dataframe_sorted_jenkins_sleep_4, "temp_dataframe_after_dataframe_sorted_for_analysis_jenkins_sleep_4.csv", row.names = FALSE)
```

```{r, include=FALSE}
# Ignore if there is only one instance of row per treatment_period_unique_identifier in each ttas_id
dataframe_sorted_jenkins_sleep_1 <- dataframe_sorted_jenkins_sleep_1 %>%
  group_by(ttas_id, treatment_order) %>%
  filter(n() > 1) %>% # Keep only groups with more than one row after filtering out NAs
  ungroup()

dataframe_sorted_jenkins_sleep_2 <- dataframe_sorted_jenkins_sleep_2 %>%
  group_by(ttas_id, treatment_order) %>%
  filter(n() > 1) %>% # Keep only groups with more than one row after filtering out NAs
  ungroup()

dataframe_sorted_jenkins_sleep_3 <- dataframe_sorted_jenkins_sleep_3 %>%
  group_by(ttas_id, treatment_order) %>%
  filter(n() > 1) %>% # Keep only groups with more than one row after filtering out NAs
  ungroup()

dataframe_sorted_jenkins_sleep_4 <- dataframe_sorted_jenkins_sleep_4 %>%
  group_by(ttas_id, treatment_order) %>%
  filter(n() > 1) %>% # Keep only groups with more than one row after filtering out NAs
  ungroup()

# Reclassify the drugs
dataframe_sorted_and_reclassified_jenkins_sleep_1 <- dataframe_sorted_jenkins_sleep_1 %>%
  mutate(treatment_reclassified = case_when(
    treatment %in% c("Amgevita", "Humira", "Imraldi", "Yuflyma", "Benepali", "Enbrel", "Simponi", "Remicade", "Remsima", "Cimzia") ~ "Anti-TNF",
    treatment %in% c("Cosentyx", "Taltz", "Bimzelx") ~ "Anti-IL17",
    treatment %in% c("Rinvoq", "Xeljanz") ~ "JAK Inhibitor",
    treatment %in% c("Mabthera", "RoActemra", "Stelara", "Otezla") ~ "drop",
    treatment == "standard_non-high_cost_drug_treatment" ~ "Standard Non-High Cost Drug Treatment",
    TRUE ~ treatment  # Keep original treatment value if no match
  ))


# If diagnosis is "Undifferentiated spondyloarthritis (uSpA) (17 ttas_id)" and "Axial SpA- No subgroup" (1 ttas_id), remove it as most of them are on standard treatment and is their representation is limited
dataframe_sorted_and_reclassified_jenkins_sleep_1 <- dataframe_sorted_and_reclassified_jenkins_sleep_1 %>%
  filter(diagnosis != "Undifferentiated spondyloarthritis (uSpA)" & diagnosis != "Axial SpA- No subgroup")


# If treatment_reclassified is "drop", remove the row
dataframe_sorted_and_reclassified_jenkins_sleep_1 <- dataframe_sorted_and_reclassified_jenkins_sleep_1 %>%
  filter(treatment_reclassified != "drop")

dataframe_sorted_and_reclassified_jenkins_sleep_2 <- dataframe_sorted_jenkins_sleep_2 %>%
  mutate(treatment_reclassified = case_when(
    treatment %in% c("Amgevita", "Humira", "Imraldi", "Yuflyma", "Benepali", "Enbrel", "Simponi", "Remicade", "Remsima", "Cimzia") ~ "Anti-TNF",
    treatment %in% c("Cosentyx", "Taltz", "Bimzelx") ~ "Anti-IL17",
    treatment %in% c("Rinvoq", "Xeljanz") ~ "JAK Inhibitor",
    treatment %in% c("Mabthera", "RoActemra", "Stelara", "Otezla") ~ "drop",
    treatment == "standard_non-high_cost_drug_treatment" ~ "Standard Non-High Cost Drug Treatment",
    TRUE ~ treatment  # Keep original treatment value if no match
  ))


# If diagnosis is "Undifferentiated spondyloarthritis (uSpA) (17 ttas_id)" and "Axial SpA- No subgroup" (1 ttas_id), remove it as most of them are on standard treatment and is their representation is limited
dataframe_sorted_and_reclassified_jenkins_sleep_2 <- dataframe_sorted_and_reclassified_jenkins_sleep_2 %>%
  filter(diagnosis != "Undifferentiated spondyloarthritis (uSpA)" & diagnosis != "Axial SpA- No subgroup")


# If treatment_reclassified is "drop", remove the row
dataframe_sorted_and_reclassified_jenkins_sleep_2 <- dataframe_sorted_and_reclassified_jenkins_sleep_2 %>%
  filter(treatment_reclassified != "drop")

dataframe_sorted_and_reclassified_jenkins_sleep_3 <- dataframe_sorted_jenkins_sleep_3 %>%
  mutate(treatment_reclassified = case_when(
    treatment %in% c("Amgevita", "Humira", "Imraldi", "Yuflyma", "Benepali", "Enbrel", "Simponi", "Remicade", "Remsima", "Cimzia") ~ "Anti-TNF",
    treatment %in% c("Cosentyx", "Taltz", "Bimzelx") ~ "Anti-IL17",
    treatment %in% c("Rinvoq", "Xeljanz") ~ "JAK Inhibitor",
    treatment %in% c("Mabthera", "RoActemra", "Stelara", "Otezla") ~ "drop",
    treatment == "standard_non-high_cost_drug_treatment" ~ "Standard Non-High Cost Drug Treatment",
    TRUE ~ treatment  # Keep original treatment value if no match
  ))


# If diagnosis is "Undifferentiated spondyloarthritis (uSpA) (17 ttas_id)" and "Axial SpA- No subgroup" (1 ttas_id), remove it as most of them are on standard treatment and is their representation is limited
dataframe_sorted_and_reclassified_jenkins_sleep_3 <- dataframe_sorted_and_reclassified_jenkins_sleep_3 %>%
  filter(diagnosis != "Undifferentiated spondyloarthritis (uSpA)" & diagnosis != "Axial SpA- No subgroup")


# If treatment_reclassified is "drop", remove the row
dataframe_sorted_and_reclassified_jenkins_sleep_3 <- dataframe_sorted_and_reclassified_jenkins_sleep_3 %>%
  filter(treatment_reclassified != "drop")

dataframe_sorted_and_reclassified_jenkins_sleep_4 <- dataframe_sorted_jenkins_sleep_4 %>%
  mutate(treatment_reclassified = case_when(
    treatment %in% c("Amgevita", "Humira", "Imraldi", "Yuflyma", "Benepali", "Enbrel", "Simponi", "Remicade", "Remsima", "Cimzia") ~ "Anti-TNF",
    treatment %in% c("Cosentyx", "Taltz", "Bimzelx") ~ "Anti-IL17",
    treatment %in% c("Rinvoq", "Xeljanz") ~ "JAK Inhibitor",
    treatment %in% c("Mabthera", "RoActemra", "Stelara", "Otezla") ~ "drop",
    treatment == "standard_non-high_cost_drug_treatment" ~ "Standard Non-High Cost Drug Treatment",
    TRUE ~ treatment  # Keep original treatment value if no match
  ))


# If diagnosis is "Undifferentiated spondyloarthritis (uSpA) (17 ttas_id)" and "Axial SpA- No subgroup" (1 ttas_id), remove it as most of them are on standard treatment and is their representation is limited
dataframe_sorted_and_reclassified_jenkins_sleep_4 <- dataframe_sorted_and_reclassified_jenkins_sleep_4 %>%
  filter(diagnosis != "Undifferentiated spondyloarthritis (uSpA)" & diagnosis != "Axial SpA- No subgroup")


# If treatment_reclassified is "drop", remove the row
dataframe_sorted_and_reclassified_jenkins_sleep_4 <- dataframe_sorted_and_reclassified_jenkins_sleep_4 %>%
  filter(treatment_reclassified != "drop")
```

```{r, include=FALSE}
# Ensure that dataframe_sorted_and_reclassified_jenkins_sleep has the correct data types
dataframe_sorted_and_reclassified_jenkins_sleep_1$ttas_id <- as.factor(dataframe_sorted_and_reclassified_jenkins_sleep_1$ttas_id)
dataframe_sorted_and_reclassified_jenkins_sleep_1$gender <- as.factor(dataframe_sorted_and_reclassified_jenkins_sleep_1$gender)
dataframe_sorted_and_reclassified_jenkins_sleep_1$hlab27status <- as.factor(dataframe_sorted_and_reclassified_jenkins_sleep_1$hlab27status)
dataframe_sorted_and_reclassified_jenkins_sleep_1$age_at_prom <- as.numeric(dataframe_sorted_and_reclassified_jenkins_sleep_1$age_at_prom)
dataframe_sorted_and_reclassified_jenkins_sleep_1$diagnosis <- as.factor(dataframe_sorted_and_reclassified_jenkins_sleep_1$diagnosis)
dataframe_sorted_and_reclassified_jenkins_sleep_1$treatment <- as.factor(dataframe_sorted_and_reclassified_jenkins_sleep_1$treatment)
dataframe_sorted_and_reclassified_jenkins_sleep_1$treatment_order <- as.factor(dataframe_sorted_and_reclassified_jenkins_sleep_1$treatment_order)
dataframe_sorted_and_reclassified_jenkins_sleep_1$treatment_reclassified <- as.factor(dataframe_sorted_and_reclassified_jenkins_sleep_1$treatment_reclassified)
dataframe_sorted_and_reclassified_jenkins_sleep_1$date <- as.Date(dataframe_sorted_and_reclassified_jenkins_sleep_1$date)
dataframe_sorted_and_reclassified_jenkins_sleep_1$stop_date_for_period_date_format <- as.Date(dataframe_sorted_and_reclassified_jenkins_sleep_1$stop_date_for_period_date_format)
dataframe_sorted_and_reclassified_jenkins_sleep_1$overall_treatment_duration_in_days <- as.numeric(dataframe_sorted_and_reclassified_jenkins_sleep_1$overall_treatment_duration_in_days)
dataframe_sorted_and_reclassified_jenkins_sleep_1$treatment_window_weekly_time <- as.numeric(dataframe_sorted_and_reclassified_jenkins_sleep_1$treatment_window_weekly_time)
dataframe_sorted_and_reclassified_jenkins_sleep_1$jenkins_sleep_1 <- as.numeric(dataframe_sorted_and_reclassified_jenkins_sleep_1$jenkins_sleep_1)
dataframe_sorted_and_reclassified_jenkins_sleep_1$time_in_days <- as.numeric(dataframe_sorted_and_reclassified_jenkins_sleep_1$time_in_days)
dataframe_sorted_and_reclassified_jenkins_sleep_1$time_in_weeks <- as.numeric(dataframe_sorted_and_reclassified_jenkins_sleep_1$time_in_weeks)
dataframe_sorted_and_reclassified_jenkins_sleep_1$time_in_months <- as.numeric(dataframe_sorted_and_reclassified_jenkins_sleep_1$time_in_months)
dataframe_sorted_and_reclassified_jenkins_sleep_1$time_in_years <- as.numeric(dataframe_sorted_and_reclassified_jenkins_sleep_1$time_in_years)
dataframe_sorted_and_reclassified_jenkins_sleep_1$last_known_smoking_status <- as.factor(dataframe_sorted_and_reclassified_jenkins_sleep_1$last_known_smoking_status)
dataframe_sorted_and_reclassified_jenkins_sleep_1$last_known_vaping_status <- as.factor(dataframe_sorted_and_reclassified_jenkins_sleep_1$last_known_vaping_status)

dataframe_sorted_and_reclassified_jenkins_sleep_2$ttas_id <- as.factor(dataframe_sorted_and_reclassified_jenkins_sleep_2$ttas_id)
dataframe_sorted_and_reclassified_jenkins_sleep_2$gender <- as.factor(dataframe_sorted_and_reclassified_jenkins_sleep_2$gender)
dataframe_sorted_and_reclassified_jenkins_sleep_2$hlab27status <- as.factor(dataframe_sorted_and_reclassified_jenkins_sleep_2$hlab27status)
dataframe_sorted_and_reclassified_jenkins_sleep_2$age_at_prom <- as.numeric(dataframe_sorted_and_reclassified_jenkins_sleep_2$age_at_prom)
dataframe_sorted_and_reclassified_jenkins_sleep_2$diagnosis <- as.factor(dataframe_sorted_and_reclassified_jenkins_sleep_2$diagnosis)
dataframe_sorted_and_reclassified_jenkins_sleep_2$treatment <- as.factor(dataframe_sorted_and_reclassified_jenkins_sleep_2$treatment)
dataframe_sorted_and_reclassified_jenkins_sleep_2$treatment_order <- as.factor(dataframe_sorted_and_reclassified_jenkins_sleep_2$treatment_order)
dataframe_sorted_and_reclassified_jenkins_sleep_2$treatment_reclassified <- as.factor(dataframe_sorted_and_reclassified_jenkins_sleep_2$treatment_reclassified)
dataframe_sorted_and_reclassified_jenkins_sleep_2$date <- as.Date(dataframe_sorted_and_reclassified_jenkins_sleep_2$date)
dataframe_sorted_and_reclassified_jenkins_sleep_2$stop_date_for_period_date_format <- as.Date(dataframe_sorted_and_reclassified_jenkins_sleep_2$stop_date_for_period_date_format)
dataframe_sorted_and_reclassified_jenkins_sleep_2$overall_treatment_duration_in_days <- as.numeric(dataframe_sorted_and_reclassified_jenkins_sleep_2$overall_treatment_duration_in_days)
dataframe_sorted_and_reclassified_jenkins_sleep_2$treatment_window_weekly_time <- as.numeric(dataframe_sorted_and_reclassified_jenkins_sleep_2$treatment_window_weekly_time)
dataframe_sorted_and_reclassified_jenkins_sleep_2$jenkins_sleep_2 <- as.numeric(dataframe_sorted_and_reclassified_jenkins_sleep_2$jenkins_sleep_2)
dataframe_sorted_and_reclassified_jenkins_sleep_2$time_in_days <- as.numeric(dataframe_sorted_and_reclassified_jenkins_sleep_2$time_in_days)
dataframe_sorted_and_reclassified_jenkins_sleep_2$time_in_weeks <- as.numeric(dataframe_sorted_and_reclassified_jenkins_sleep_2$time_in_weeks)
dataframe_sorted_and_reclassified_jenkins_sleep_2$time_in_months <- as.numeric(dataframe_sorted_and_reclassified_jenkins_sleep_2$time_in_months)
dataframe_sorted_and_reclassified_jenkins_sleep_2$time_in_years <- as.numeric(dataframe_sorted_and_reclassified_jenkins_sleep_2$time_in_years)
dataframe_sorted_and_reclassified_jenkins_sleep_2$last_known_smoking_status <- as.factor(dataframe_sorted_and_reclassified_jenkins_sleep_2$last_known_smoking_status)
dataframe_sorted_and_reclassified_jenkins_sleep_2$last_known_vaping_status <- as.factor(dataframe_sorted_and_reclassified_jenkins_sleep_2$last_known_vaping_status)

dataframe_sorted_and_reclassified_jenkins_sleep_3$ttas_id <- as.factor(dataframe_sorted_and_reclassified_jenkins_sleep_3$ttas_id)
dataframe_sorted_and_reclassified_jenkins_sleep_3$gender <- as.factor(dataframe_sorted_and_reclassified_jenkins_sleep_3$gender)
dataframe_sorted_and_reclassified_jenkins_sleep_3$hlab27status <- as.factor(dataframe_sorted_and_reclassified_jenkins_sleep_3$hlab27status)
dataframe_sorted_and_reclassified_jenkins_sleep_3$age_at_prom <- as.numeric(dataframe_sorted_and_reclassified_jenkins_sleep_3$age_at_prom)
dataframe_sorted_and_reclassified_jenkins_sleep_3$diagnosis <- as.factor(dataframe_sorted_and_reclassified_jenkins_sleep_3$diagnosis)
dataframe_sorted_and_reclassified_jenkins_sleep_3$treatment <- as.factor(dataframe_sorted_and_reclassified_jenkins_sleep_3$treatment)
dataframe_sorted_and_reclassified_jenkins_sleep_3$treatment_order <- as.factor(dataframe_sorted_and_reclassified_jenkins_sleep_3$treatment_order)
dataframe_sorted_and_reclassified_jenkins_sleep_3$treatment_reclassified <- as.factor(dataframe_sorted_and_reclassified_jenkins_sleep_3$treatment_reclassified)
dataframe_sorted_and_reclassified_jenkins_sleep_3$date <- as.Date(dataframe_sorted_and_reclassified_jenkins_sleep_3$date)
dataframe_sorted_and_reclassified_jenkins_sleep_3$stop_date_for_period_date_format <- as.Date(dataframe_sorted_and_reclassified_jenkins_sleep_3$stop_date_for_period_date_format)
dataframe_sorted_and_reclassified_jenkins_sleep_3$overall_treatment_duration_in_days <- as.numeric(dataframe_sorted_and_reclassified_jenkins_sleep_3$overall_treatment_duration_in_days)
dataframe_sorted_and_reclassified_jenkins_sleep_3$treatment_window_weekly_time <- as.numeric(dataframe_sorted_and_reclassified_jenkins_sleep_3$treatment_window_weekly_time)
dataframe_sorted_and_reclassified_jenkins_sleep_3$jenkins_sleep_3 <- as.numeric(dataframe_sorted_and_reclassified_jenkins_sleep_3$jenkins_sleep_3)
dataframe_sorted_and_reclassified_jenkins_sleep_3$time_in_days <- as.numeric(dataframe_sorted_and_reclassified_jenkins_sleep_3$time_in_days)
dataframe_sorted_and_reclassified_jenkins_sleep_3$time_in_weeks <- as.numeric(dataframe_sorted_and_reclassified_jenkins_sleep_3$time_in_weeks)
dataframe_sorted_and_reclassified_jenkins_sleep_3$time_in_months <- as.numeric(dataframe_sorted_and_reclassified_jenkins_sleep_3$time_in_months)
dataframe_sorted_and_reclassified_jenkins_sleep_3$time_in_years <- as.numeric(dataframe_sorted_and_reclassified_jenkins_sleep_3$time_in_years)
dataframe_sorted_and_reclassified_jenkins_sleep_3$last_known_smoking_status <- as.factor(dataframe_sorted_and_reclassified_jenkins_sleep_3$last_known_smoking_status)
dataframe_sorted_and_reclassified_jenkins_sleep_3$last_known_vaping_status <- as.factor(dataframe_sorted_and_reclassified_jenkins_sleep_3$last_known_vaping_status)

dataframe_sorted_and_reclassified_jenkins_sleep_4$ttas_id <- as.factor(dataframe_sorted_and_reclassified_jenkins_sleep_4$ttas_id)
dataframe_sorted_and_reclassified_jenkins_sleep_4$gender <- as.factor(dataframe_sorted_and_reclassified_jenkins_sleep_4$gender)
dataframe_sorted_and_reclassified_jenkins_sleep_4$hlab27status <- as.factor(dataframe_sorted_and_reclassified_jenkins_sleep_4$hlab27status)
dataframe_sorted_and_reclassified_jenkins_sleep_4$age_at_prom <- as.numeric(dataframe_sorted_and_reclassified_jenkins_sleep_4$age_at_prom)
dataframe_sorted_and_reclassified_jenkins_sleep_4$diagnosis <- as.factor(dataframe_sorted_and_reclassified_jenkins_sleep_4$diagnosis)
dataframe_sorted_and_reclassified_jenkins_sleep_4$treatment <- as.factor(dataframe_sorted_and_reclassified_jenkins_sleep_4$treatment)
dataframe_sorted_and_reclassified_jenkins_sleep_4$treatment_order <- as.factor(dataframe_sorted_and_reclassified_jenkins_sleep_4$treatment_order)
dataframe_sorted_and_reclassified_jenkins_sleep_4$treatment_reclassified <- as.factor(dataframe_sorted_and_reclassified_jenkins_sleep_4$treatment_reclassified)
dataframe_sorted_and_reclassified_jenkins_sleep_4$date <- as.Date(dataframe_sorted_and_reclassified_jenkins_sleep_4$date)
dataframe_sorted_and_reclassified_jenkins_sleep_4$stop_date_for_period_date_format <- as.Date(dataframe_sorted_and_reclassified_jenkins_sleep_4$stop_date_for_period_date_format)
dataframe_sorted_and_reclassified_jenkins_sleep_4$overall_treatment_duration_in_days <- as.numeric(dataframe_sorted_and_reclassified_jenkins_sleep_4$overall_treatment_duration_in_days)
dataframe_sorted_and_reclassified_jenkins_sleep_4$treatment_window_weekly_time <- as.numeric(dataframe_sorted_and_reclassified_jenkins_sleep_4$treatment_window_weekly_time)
dataframe_sorted_and_reclassified_jenkins_sleep_4$jenkins_sleep_4 <- as.numeric(dataframe_sorted_and_reclassified_jenkins_sleep_4$jenkins_sleep_4)
dataframe_sorted_and_reclassified_jenkins_sleep_4$time_in_days <- as.numeric(dataframe_sorted_and_reclassified_jenkins_sleep_4$time_in_days)
dataframe_sorted_and_reclassified_jenkins_sleep_4$time_in_weeks <- as.numeric(dataframe_sorted_and_reclassified_jenkins_sleep_4$time_in_weeks)
dataframe_sorted_and_reclassified_jenkins_sleep_4$time_in_months <- as.numeric(dataframe_sorted_and_reclassified_jenkins_sleep_4$time_in_months)
dataframe_sorted_and_reclassified_jenkins_sleep_4$time_in_years <- as.numeric(dataframe_sorted_and_reclassified_jenkins_sleep_4$time_in_years)
dataframe_sorted_and_reclassified_jenkins_sleep_4$last_known_smoking_status <- as.factor(dataframe_sorted_and_reclassified_jenkins_sleep_4$last_known_smoking_status)
dataframe_sorted_and_reclassified_jenkins_sleep_4$last_known_vaping_status <- as.factor(dataframe_sorted_and_reclassified_jenkins_sleep_4$last_known_vaping_status)
```

```{r, include=FALSE}
# Make sure that the reference level for treatment_reclassified is
# "Standard Non-High Cost Drug Treatment"
dataframe_sorted_and_reclassified_jenkins_sleep_1$treatment_reclassified <-
  relevel(dataframe_sorted_and_reclassified_jenkins_sleep_1$treatment_reclassified,
          ref = "Standard Non-High Cost Drug Treatment")

# Make sure that the reference level for hlba27status is "undiagnosed"
dataframe_sorted_and_reclassified_jenkins_sleep_1$hlab27status <-
  relevel(dataframe_sorted_and_reclassified_jenkins_sleep_1$hlab27status,
          ref = "undiagnosed")

# Make sure that the reference level for diagnosis is "Axial SpA- nr-axSpA"
dataframe_sorted_and_reclassified_jenkins_sleep_1$diagnosis <-
  relevel(dataframe_sorted_and_reclassified_jenkins_sleep_1$diagnosis,
          ref = "Axial SpA- AS")

# Make sure that the reference level for treatment_order is 1
dataframe_sorted_and_reclassified_jenkins_sleep_1$treatment_order <-
  relevel(dataframe_sorted_and_reclassified_jenkins_sleep_1$treatment_order,
          ref = 1)

# Make sure that the reference level for last_known_smoking_status is
# "no information"
dataframe_sorted_and_reclassified_jenkins_sleep_1$last_known_smoking_status <-
  relevel(dataframe_sorted_and_reclassified_jenkins_sleep_1$last_known_smoking_status,
          ref = "no information")

# Make sure that the reference level for last_known_vaping_status is
# "no information"
dataframe_sorted_and_reclassified_jenkins_sleep_1$last_known_vaping_status <-
  relevel(dataframe_sorted_and_reclassified_jenkins_sleep_1$last_known_vaping_status,
          ref = "no information")

dataframe_sorted_and_reclassified_jenkins_sleep_2$treatment_reclassified <-
  relevel(dataframe_sorted_and_reclassified_jenkins_sleep_2$treatment_reclassified,
          ref = "Standard Non-High Cost Drug Treatment")

dataframe_sorted_and_reclassified_jenkins_sleep_2$hlab27status <-
  relevel(dataframe_sorted_and_reclassified_jenkins_sleep_2$hlab27status,
          ref = "undiagnosed")

dataframe_sorted_and_reclassified_jenkins_sleep_2$diagnosis <-
  relevel(dataframe_sorted_and_reclassified_jenkins_sleep_2$diagnosis,
          ref = "Axial SpA- AS")

dataframe_sorted_and_reclassified_jenkins_sleep_2$treatment_order <-
  relevel(dataframe_sorted_and_reclassified_jenkins_sleep_2$treatment_order,
          ref = 1)

dataframe_sorted_and_reclassified_jenkins_sleep_2$last_known_smoking_status <-
  relevel(dataframe_sorted_and_reclassified_jenkins_sleep_2$last_known_smoking_status,
          ref = "no information")

dataframe_sorted_and_reclassified_jenkins_sleep_2$last_known_vaping_status <-
  relevel(dataframe_sorted_and_reclassified_jenkins_sleep_2$last_known_vaping_status,
          ref = "no information")

dataframe_sorted_and_reclassified_jenkins_sleep_3$treatment_reclassified <-
  relevel(dataframe_sorted_and_reclassified_jenkins_sleep_3$treatment_reclassified,
          ref = "Standard Non-High Cost Drug Treatment")

dataframe_sorted_and_reclassified_jenkins_sleep_3$hlab27status <-
  relevel(dataframe_sorted_and_reclassified_jenkins_sleep_3$hlab27status,
          ref = "undiagnosed")

dataframe_sorted_and_reclassified_jenkins_sleep_3$diagnosis <-
  relevel(dataframe_sorted_and_reclassified_jenkins_sleep_3$diagnosis,
          ref = "Axial SpA- AS")

dataframe_sorted_and_reclassified_jenkins_sleep_3$treatment_order <-
  relevel(dataframe_sorted_and_reclassified_jenkins_sleep_3$treatment_order,
          ref = 1)

dataframe_sorted_and_reclassified_jenkins_sleep_3$last_known_smoking_status <-
  relevel(dataframe_sorted_and_reclassified_jenkins_sleep_3$last_known_smoking_status,
          ref = "no information")

dataframe_sorted_and_reclassified_jenkins_sleep_3$last_known_vaping_status <-
  relevel(dataframe_sorted_and_reclassified_jenkins_sleep_3$last_known_vaping_status,
          ref = "no information")

dataframe_sorted_and_reclassified_jenkins_sleep_4$treatment_reclassified <-
  relevel(dataframe_sorted_and_reclassified_jenkins_sleep_4$treatment_reclassified,
          ref = "Standard Non-High Cost Drug Treatment")

dataframe_sorted_and_reclassified_jenkins_sleep_4$hlab27status <-
  relevel(dataframe_sorted_and_reclassified_jenkins_sleep_4$hlab27status,
          ref = "undiagnosed")

dataframe_sorted_and_reclassified_jenkins_sleep_4$diagnosis <-
  relevel(dataframe_sorted_and_reclassified_jenkins_sleep_4$diagnosis,
          ref = "Axial SpA- AS")

dataframe_sorted_and_reclassified_jenkins_sleep_4$treatment_order <-
  relevel(dataframe_sorted_and_reclassified_jenkins_sleep_4$treatment_order,
          ref = 1)

dataframe_sorted_and_reclassified_jenkins_sleep_4$last_known_smoking_status <-
  relevel(dataframe_sorted_and_reclassified_jenkins_sleep_4$last_known_smoking_status,
          ref = "no information")

dataframe_sorted_and_reclassified_jenkins_sleep_4$last_known_vaping_status <-
  relevel(dataframe_sorted_and_reclassified_jenkins_sleep_4$last_known_vaping_status,
          ref = "no information")

```

# lme4 code for treatment and diagnosis: Jenkins Sleep

```{r, include=TRUE}
model_treatment_diagnosis_jenkins_sleep_1_full <- lmer(
  jenkins_sleep_1 ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified * diagnosis +
    time_in_years + (time_in_years | ttas_id),
                     data = dataframe_sorted_and_reclassified_jenkins_sleep_1,
                     control = lmerControl(optimizer = "bobyqa",
                                           optCtrl = list(maxfun = 2e5)))

model_treatment_diagnosis_jenkins_sleep_2_full <- lmer(
  jenkins_sleep_2 ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified * diagnosis +
    time_in_years + (time_in_years | ttas_id),
                     data = dataframe_sorted_and_reclassified_jenkins_sleep_2,
                     control = lmerControl(optimizer = "bobyqa",
                                           optCtrl = list(maxfun = 2e5)))

model_treatment_diagnosis_jenkins_sleep_3_full <- lmer(
  jenkins_sleep_3 ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified * diagnosis +
    time_in_years + (time_in_years | ttas_id),
                     data = dataframe_sorted_and_reclassified_jenkins_sleep_3,
                     control = lmerControl(optimizer = "bobyqa",
                                           optCtrl = list(maxfun = 2e5)))

model_treatment_diagnosis_jenkins_sleep_4_full <- lmer(
  jenkins_sleep_4 ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified * diagnosis +
    time_in_years + (time_in_years | ttas_id),
                     data = dataframe_sorted_and_reclassified_jenkins_sleep_4,
                     control = lmerControl(optimizer = "bobyqa",
                                           optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
model_treatment_diagnosis_jenkins_sleep_1_reduced <- lmer(
  jenkins_sleep_1 ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified +
    time_in_years + (time_in_years | ttas_id),
                      data = dataframe_sorted_and_reclassified_jenkins_sleep_1,
                      control = lmerControl(optimizer = "bobyqa",
                                            optCtrl = list(maxfun = 2e5)))

model_treatment_diagnosis_jenkins_sleep_2_reduced <- lmer(
  jenkins_sleep_2 ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified +
    time_in_years + (time_in_years | ttas_id),
                      data = dataframe_sorted_and_reclassified_jenkins_sleep_2,
                      control = lmerControl(optimizer = "bobyqa",
                                            optCtrl = list(maxfun = 2e5)))

model_treatment_diagnosis_jenkins_sleep_3_reduced <- lmer(
  jenkins_sleep_3 ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified +
    time_in_years + (time_in_years | ttas_id),
                      data = dataframe_sorted_and_reclassified_jenkins_sleep_3,
                      control = lmerControl(optimizer = "bobyqa",
                                            optCtrl = list(maxfun = 2e5)))

model_treatment_diagnosis_jenkins_sleep_4_reduced <- lmer(
  jenkins_sleep_4 ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified +
    time_in_years + (time_in_years | ttas_id),
                      data = dataframe_sorted_and_reclassified_jenkins_sleep_4,
                      control = lmerControl(optimizer = "bobyqa",
                                            optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
print(summary(model_treatment_diagnosis_jenkins_sleep_1_full, corr = FALSE))
```

```{r, include=TRUE}
print(summary(model_treatment_diagnosis_jenkins_sleep_1_reduced, corr = FALSE))
```

```{r, include=TRUE}
anova(model_treatment_diagnosis_jenkins_sleep_1_full,
      model_treatment_diagnosis_jenkins_sleep_1_reduced)
```

```{r, include=TRUE}
print(summary(model_treatment_diagnosis_jenkins_sleep_2_full, corr = FALSE))
```

```{r, include=TRUE}
print(summary(model_treatment_diagnosis_jenkins_sleep_2_reduced, corr = FALSE))
```

```{r, include=TRUE}
anova(model_treatment_diagnosis_jenkins_sleep_2_full,
      model_treatment_diagnosis_jenkins_sleep_2_reduced)
```

```{r, include=TRUE}
print(summary(model_treatment_diagnosis_jenkins_sleep_3_full, corr = FALSE))
```

```{r, include=TRUE}
print(summary(model_treatment_diagnosis_jenkins_sleep_3_reduced, corr = FALSE))
```

```{r, include=TRUE}
anova(model_treatment_diagnosis_jenkins_sleep_3_full,
      model_treatment_diagnosis_jenkins_sleep_3_reduced)
```

```{r, include=TRUE}
print(summary(model_treatment_diagnosis_jenkins_sleep_4_full, corr = FALSE))
```

```{r, include=TRUE}
print(summary(model_treatment_diagnosis_jenkins_sleep_4_reduced, corr = FALSE))
```

```{r, include=TRUE}
anova(model_treatment_diagnosis_jenkins_sleep_4_full,
      model_treatment_diagnosis_jenkins_sleep_4_reduced)
```

# lme4 code for treatment and gender: Jenkins Sleep

```{r, include=TRUE}
model_treatment_gender_jenkins_sleep_1_full <- lmer(
  jenkins_sleep_1 ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified * gender +
    time_in_years + (time_in_years | ttas_id),
                     data = dataframe_sorted_and_reclassified_jenkins_sleep_1,
                     control = lmerControl(optimizer = "bobyqa",
                                           optCtrl = list(maxfun = 2e5)))

model_treatment_gender_jenkins_sleep_2_full <- lmer(
  jenkins_sleep_2 ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified * gender +
    time_in_years + (time_in_years | ttas_id),
                     data = dataframe_sorted_and_reclassified_jenkins_sleep_2,
                     control = lmerControl(optimizer = "bobyqa",
                                           optCtrl = list(maxfun = 2e5)))

model_treatment_gender_jenkins_sleep_3_full <- lmer(
  jenkins_sleep_3 ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified * gender +
    time_in_years + (time_in_years | ttas_id),
                     data = dataframe_sorted_and_reclassified_jenkins_sleep_3,
                     control = lmerControl(optimizer = "bobyqa",
                                           optCtrl = list(maxfun = 2e5)))

model_treatment_gender_jenkins_sleep_4_full <- lmer(
  jenkins_sleep_4 ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified * gender +
    time_in_years + (time_in_years | ttas_id),
                     data = dataframe_sorted_and_reclassified_jenkins_sleep_4,
                     control = lmerControl(optimizer = "bobyqa",
                                           optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
model_treatment_gender_jenkins_sleep_1_reduced <- lmer(
  jenkins_sleep_1 ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified +
    time_in_years + (time_in_years | ttas_id),
                      data = dataframe_sorted_and_reclassified_jenkins_sleep_1,
                      control = lmerControl(optimizer = "bobyqa",
                                            optCtrl = list(maxfun = 2e5)))

model_treatment_gender_jenkins_sleep_2_reduced <- lmer(
  jenkins_sleep_2 ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified +
    time_in_years + (time_in_years | ttas_id),
                      data = dataframe_sorted_and_reclassified_jenkins_sleep_2,
                      control = lmerControl(optimizer = "bobyqa",
                                            optCtrl = list(maxfun = 2e5)))

model_treatment_gender_jenkins_sleep_3_reduced <- lmer(
  jenkins_sleep_3 ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified +
    time_in_years + (time_in_years | ttas_id),
                      data = dataframe_sorted_and_reclassified_jenkins_sleep_3,
                      control = lmerControl(optimizer = "bobyqa",
                                            optCtrl = list(maxfun = 2e5)))


model_treatment_gender_jenkins_sleep_4_reduced <- lmer(
  jenkins_sleep_4 ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified +
    time_in_years + (time_in_years | ttas_id),
                      data = dataframe_sorted_and_reclassified_jenkins_sleep_4,
                      control = lmerControl(optimizer = "bobyqa",
                                            optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
print(summary(model_treatment_gender_jenkins_sleep_1_full, corr = FALSE))
```

```{r, include=TRUE}
print(summary(model_treatment_gender_jenkins_sleep_1_reduced, corr = FALSE))
```

```{r, include=TRUE}
anova(model_treatment_gender_jenkins_sleep_1_full,
      model_treatment_gender_jenkins_sleep_1_reduced)
```

```{r, include=TRUE}
print(summary(model_treatment_gender_jenkins_sleep_2_full, corr = FALSE))
```

```{r, include=TRUE}
print(summary(model_treatment_gender_jenkins_sleep_2_reduced, corr = FALSE))
```

```{r, include=TRUE}
anova(model_treatment_gender_jenkins_sleep_2_full,
      model_treatment_gender_jenkins_sleep_2_reduced)
```

```{r, include=TRUE}
print(summary(model_treatment_gender_jenkins_sleep_3_full, corr = FALSE))
```

```{r, include=TRUE}
print(summary(model_treatment_gender_jenkins_sleep_3_reduced, corr = FALSE))
```

```{r, include=TRUE}
anova(model_treatment_gender_jenkins_sleep_3_full,
      model_treatment_gender_jenkins_sleep_3_reduced)
```

```{r, include=TRUE}
print(summary(model_treatment_gender_jenkins_sleep_4_full, corr = FALSE))
```

```{r, include=TRUE}
print(summary(model_treatment_gender_jenkins_sleep_4_reduced, corr = FALSE))
```

```{r, include=TRUE}
anova(model_treatment_gender_jenkins_sleep_4_full,
      model_treatment_gender_jenkins_sleep_4_reduced)
```

# WPL

```{r, include=FALSE}
# WPL only
# General longitudinal analysis for those with and without drugs
dataframe_sorted_wpl <- dataframe_sorted %>%
  filter(!is.na(wpl)) %>%
      select(ttas_id, gender, hlab27status, age_at_prom, diagnosis, treatment, last_known_smoking_status, last_known_vaping_status, treatment_order, date, stop_date_for_period_date_format, overall_treatment_duration_in_days, treatment_window_weekly_time, time_in_days, time_in_weeks, time_in_months, time_in_years, wpl)

write.csv(dataframe_sorted_wpl, "temp_dataframe_after_dataframe_sorted_for_analysis_wpl.csv", row.names = FALSE)
```

```{r, include=FALSE}
# Ignore if there is only one instance of row per treatment_period_unique_identifier in each ttas_id
dataframe_sorted_wpl <- dataframe_sorted_wpl %>%
  group_by(ttas_id, treatment_order) %>%
  filter(n() > 1) %>% # Keep only groups with more than one row after filtering out NAs
  ungroup()

write.csv(dataframe_sorted_wpl, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered.csv", row.names = FALSE)

# Reclassify the drugs
dataframe_sorted_and_reclassified_wpl <- dataframe_sorted_wpl %>%
  mutate(treatment_reclassified = case_when(
    treatment %in% c("Amgevita", "Humira", "Imraldi", "Yuflyma", "Benepali", "Enbrel", "Simponi", "Remicade", "Remsima", "Cimzia") ~ "Anti-TNF",
    treatment %in% c("Cosentyx", "Taltz", "Bimzelx") ~ "Anti-IL17",
    treatment %in% c("Rinvoq", "Xeljanz") ~ "JAK Inhibitor",
    treatment %in% c("Mabthera", "RoActemra", "Stelara", "Otezla") ~ "drop",
    treatment == "standard_non-high_cost_drug_treatment" ~ "Standard Non-High Cost Drug Treatment",
    TRUE ~ treatment  # Keep original treatment value if no match
  ))

write.csv(dataframe_sorted_and_reclassified_wpl, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered_with_treatment_category_wpl.csv", row.names = FALSE)

# If diagnosis is "Undifferentiated spondyloarthritis (uSpA) (17 ttas_id)" and "Axial SpA- No subgroup" (1 ttas_id), remove it as most of them are on standard treatment and is their representation is limited
dataframe_sorted_and_reclassified_wpl <- dataframe_sorted_and_reclassified_wpl %>%
  filter(diagnosis != "Undifferentiated spondyloarthritis (uSpA)" & diagnosis != "Axial SpA- No subgroup")

write.csv(dataframe_sorted_and_reclassified_wpl, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered_with_treatment_category_and_diagnosis_wpl.csv", row.names = FALSE)

# If treatment_reclassified is "drop", remove the row
dataframe_sorted_and_reclassified_wpl <- dataframe_sorted_and_reclassified_wpl %>%
  filter(treatment_reclassified != "drop")
```

```{r, include=FALSE}
# Ensure that dataframe_sorted_and_reclassified_wpl has the correct data types
dataframe_sorted_and_reclassified_wpl$ttas_id <- as.factor(dataframe_sorted_and_reclassified_wpl$ttas_id)
dataframe_sorted_and_reclassified_wpl$gender <- as.factor(dataframe_sorted_and_reclassified_wpl$gender)
dataframe_sorted_and_reclassified_wpl$hlab27status <- as.factor(dataframe_sorted_and_reclassified_wpl$hlab27status)
dataframe_sorted_and_reclassified_wpl$age_at_prom <- as.numeric(dataframe_sorted_and_reclassified_wpl$age_at_prom)
dataframe_sorted_and_reclassified_wpl$diagnosis <- as.factor(dataframe_sorted_and_reclassified_wpl$diagnosis)
dataframe_sorted_and_reclassified_wpl$treatment <- as.factor(dataframe_sorted_and_reclassified_wpl$treatment)
dataframe_sorted_and_reclassified_wpl$treatment_order <- as.factor(dataframe_sorted_and_reclassified_wpl$treatment_order)
dataframe_sorted_and_reclassified_wpl$treatment_reclassified <- as.factor(dataframe_sorted_and_reclassified_wpl$treatment_reclassified)
dataframe_sorted_and_reclassified_wpl$date <- as.Date(dataframe_sorted_and_reclassified_wpl$date)
dataframe_sorted_and_reclassified_wpl$stop_date_for_period_date_format <- as.Date(dataframe_sorted_and_reclassified_wpl$stop_date_for_period_date_format)
dataframe_sorted_and_reclassified_wpl$overall_treatment_duration_in_days <- as.numeric(dataframe_sorted_and_reclassified_wpl$overall_treatment_duration_in_days)
dataframe_sorted_and_reclassified_wpl$treatment_window_weekly_time <- as.numeric(dataframe_sorted_and_reclassified_wpl$treatment_window_weekly_time)
dataframe_sorted_and_reclassified_wpl$wpl <- as.numeric(dataframe_sorted_and_reclassified_wpl$wpl)
dataframe_sorted_and_reclassified_wpl$time_in_days <- as.numeric(dataframe_sorted_and_reclassified_wpl$time_in_days)
dataframe_sorted_and_reclassified_wpl$time_in_weeks <- as.numeric(dataframe_sorted_and_reclassified_wpl$time_in_weeks)
dataframe_sorted_and_reclassified_wpl$time_in_months <- as.numeric(dataframe_sorted_and_reclassified_wpl$time_in_months)
dataframe_sorted_and_reclassified_wpl$time_in_years <- as.numeric(dataframe_sorted_and_reclassified_wpl$time_in_years)
dataframe_sorted_and_reclassified_wpl$last_known_smoking_status <- as.factor(dataframe_sorted_and_reclassified_wpl$last_known_smoking_status)
dataframe_sorted_and_reclassified_wpl$last_known_vaping_status <- as.factor(dataframe_sorted_and_reclassified_wpl$last_known_vaping_status)
```

```{r, include=FALSE}
# Make sure that the reference level for treatment_reclassified is
# "Standard Non-High Cost Drug Treatment"
dataframe_sorted_and_reclassified_wpl$treatment_reclassified <-
  relevel(dataframe_sorted_and_reclassified_wpl$treatment_reclassified,
          ref = "Standard Non-High Cost Drug Treatment")

# Make sure that the reference level for hlba27status is "undiagnosed"
dataframe_sorted_and_reclassified_wpl$hlab27status <-
  relevel(dataframe_sorted_and_reclassified_wpl$hlab27status,
          ref = "undiagnosed")

# Make sure that the reference level for diagnosis is "Axial SpA- nr-axSpA"
dataframe_sorted_and_reclassified_wpl$diagnosis <-
  relevel(dataframe_sorted_and_reclassified_wpl$diagnosis,
          ref = "Axial SpA- AS")

# Make sure that the reference level for treatment_order is 1
dataframe_sorted_and_reclassified_wpl$treatment_order <-
  relevel(dataframe_sorted_and_reclassified_wpl$treatment_order,
          ref = 1)

# Make sure that the reference level for last_known_smoking_status is
# "no information"
dataframe_sorted_and_reclassified_wpl$last_known_smoking_status <-
  relevel(dataframe_sorted_and_reclassified_wpl$last_known_smoking_status,
          ref = "no information")

# Make sure that the reference level for last_known_vaping_status is
# "no information"
dataframe_sorted_and_reclassified_wpl$last_known_vaping_status <-
  relevel(dataframe_sorted_and_reclassified_wpl$last_known_vaping_status,
          ref = "no information")
```

# lme4 code for treatment and diagnosis: WPL

```{r, include=TRUE}
model_treatment_diagnosis_wpl_full <- lmer(
  wpl ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified * diagnosis +
    time_in_years + (time_in_years | ttas_id),
                     data = dataframe_sorted_and_reclassified_wpl,
                     control = lmerControl(optimizer = "bobyqa",
                                           optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
model_treatment_diagnosis_wpl_reduced <- lmer(
  wpl ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified +
    time_in_years + (time_in_years | ttas_id),
                      data = dataframe_sorted_and_reclassified_wpl,
                      control = lmerControl(optimizer = "bobyqa",
                                            optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
print(summary(model_treatment_diagnosis_wpl_full, corr = FALSE))
```

```{r, include=TRUE}
print(summary(model_treatment_diagnosis_wpl_reduced, corr = FALSE))
```

```{r, include=TRUE}
anova(model_treatment_diagnosis_wpl_full,
      model_treatment_diagnosis_wpl_reduced)
```

# lme4 code for treatment and gender: WPL

```{r, include=TRUE}
model_treatment_gender_wpl_full <- lmer(
  wpl ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified * gender +
    time_in_years + (time_in_years | ttas_id),
                     data = dataframe_sorted_and_reclassified_wpl,
                     control = lmerControl(optimizer = "bobyqa",
                                           optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
model_treatment_gender_wpl_reduced <- lmer(
  wpl ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified +
    time_in_years + (time_in_years | ttas_id),
                      data = dataframe_sorted_and_reclassified_wpl,
                      control = lmerControl(optimizer = "bobyqa",
                                            optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
print(summary(model_treatment_gender_wpl_full, corr = FALSE))
```

```{r, include=TRUE}
print(summary(model_treatment_gender_wpl_reduced, corr = FALSE))
```

```{r, include=TRUE}
anova(model_treatment_gender_wpl_full,
      model_treatment_gender_wpl_reduced)
```

# Daily Activity Impairment

```{r, include=FALSE}
# Daily Activity only
# General longitudinal analysis for those with and without drugs
dataframe_sorted_daily_activity_impairment <- dataframe_sorted %>%
  filter(!is.na(daily_activity_impairment)) %>%
        select(ttas_id, gender, hlab27status, age_at_prom, diagnosis, treatment, last_known_smoking_status, last_known_vaping_status, treatment_order, date, stop_date_for_period_date_format, overall_treatment_duration_in_days, treatment_window_weekly_time, time_in_days, time_in_weeks, time_in_months, time_in_years, daily_activity_impairment)

write.csv(dataframe_sorted_daily_activity_impairment, "temp_dataframe_after_dataframe_sorted_for_analysis_daily_activity_impairment.csv", row.names = FALSE)
```

```{r, include=FALSE}
# Ignore if there is only one instance of row per treatment_period_unique_identifier in each ttas_id
dataframe_sorted_daily_activity_impairment <- dataframe_sorted_daily_activity_impairment %>%
  group_by(ttas_id, treatment_order) %>%
  filter(n() > 1) %>% # Keep only groups with more than one row after filtering out NAs
  ungroup()

write.csv(dataframe_sorted_daily_activity_impairment, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered.csv", row.names = FALSE)

# Reclassify the drugs
dataframe_sorted_and_reclassified_daily_activity_impairment <- dataframe_sorted_daily_activity_impairment %>%
  mutate(treatment_reclassified = case_when(
    treatment %in% c("Amgevita", "Humira", "Imraldi", "Yuflyma", "Benepali", "Enbrel", "Simponi", "Remicade", "Remsima", "Cimzia") ~ "Anti-TNF",
    treatment %in% c("Cosentyx", "Taltz", "Bimzelx") ~ "Anti-IL17",
    treatment %in% c("Rinvoq", "Xeljanz") ~ "JAK Inhibitor",
    treatment %in% c("Mabthera", "RoActemra", "Stelara", "Otezla") ~ "drop",
    treatment == "standard_non-high_cost_drug_treatment" ~ "Standard Non-High Cost Drug Treatment",
    TRUE ~ treatment  # Keep original treatment value if no match
  ))

write.csv(dataframe_sorted_and_reclassified_daily_activity_impairment, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered_with_treatment_category_daily_activity_impairment.csv", row.names = FALSE)

# If diagnosis is "Undifferentiated spondyloarthritis (uSpA) (17 ttas_id)" and "Axial SpA- No subgroup" (1 ttas_id), remove it as most of them are on standard treatment and is their representation is limited
dataframe_sorted_and_reclassified_daily_activity_impairment <- dataframe_sorted_and_reclassified_daily_activity_impairment %>%
  filter(diagnosis != "Undifferentiated spondyloarthritis (uSpA)" & diagnosis != "Axial SpA- No subgroup")

write.csv(dataframe_sorted_and_reclassified_daily_activity_impairment, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered_with_treatment_category_and_diagnosis_daily_activity_impairment.csv", row.names = FALSE)

# If treatment_reclassified is "drop", remove the row
dataframe_sorted_and_reclassified_daily_activity_impairment <- dataframe_sorted_and_reclassified_daily_activity_impairment %>%
  filter(treatment_reclassified != "drop")
```

```{r, include=FALSE}
# Ensure that dataframe_sorted_and_reclassified_daily_activity_impairment has the correct data types
dataframe_sorted_and_reclassified_daily_activity_impairment$ttas_id <- as.factor(dataframe_sorted_and_reclassified_daily_activity_impairment$ttas_id)
dataframe_sorted_and_reclassified_daily_activity_impairment$gender <- as.factor(dataframe_sorted_and_reclassified_daily_activity_impairment$gender)
dataframe_sorted_and_reclassified_daily_activity_impairment$hlab27status <- as.factor(dataframe_sorted_and_reclassified_daily_activity_impairment$hlab27status)
dataframe_sorted_and_reclassified_daily_activity_impairment$age_at_prom <- as.numeric(dataframe_sorted_and_reclassified_daily_activity_impairment$age_at_prom)
dataframe_sorted_and_reclassified_daily_activity_impairment$diagnosis <- as.factor(dataframe_sorted_and_reclassified_daily_activity_impairment$diagnosis)
dataframe_sorted_and_reclassified_daily_activity_impairment$treatment <- as.factor(dataframe_sorted_and_reclassified_daily_activity_impairment$treatment)
dataframe_sorted_and_reclassified_daily_activity_impairment$treatment_order <- as.factor(dataframe_sorted_and_reclassified_daily_activity_impairment$treatment_order)
dataframe_sorted_and_reclassified_daily_activity_impairment$treatment_reclassified <- as.factor(dataframe_sorted_and_reclassified_daily_activity_impairment$treatment_reclassified)
dataframe_sorted_and_reclassified_daily_activity_impairment$date <- as.Date(dataframe_sorted_and_reclassified_daily_activity_impairment$date)
dataframe_sorted_and_reclassified_daily_activity_impairment$stop_date_for_period_date_format <- as.Date(dataframe_sorted_and_reclassified_daily_activity_impairment$stop_date_for_period_date_format)
dataframe_sorted_and_reclassified_daily_activity_impairment$overall_treatment_duration_in_days <- as.numeric(dataframe_sorted_and_reclassified_daily_activity_impairment$overall_treatment_duration_in_days)
dataframe_sorted_and_reclassified_daily_activity_impairment$treatment_window_weekly_time <- as.numeric(dataframe_sorted_and_reclassified_daily_activity_impairment$treatment_window_weekly_time)
dataframe_sorted_and_reclassified_daily_activity_impairment$daily_activity_impairment <- as.numeric(dataframe_sorted_and_reclassified_daily_activity_impairment$daily_activity_impairment)
dataframe_sorted_and_reclassified_daily_activity_impairment$time_in_days <- as.numeric(dataframe_sorted_and_reclassified_daily_activity_impairment$time_in_days)
dataframe_sorted_and_reclassified_daily_activity_impairment$time_in_weeks <- as.numeric(dataframe_sorted_and_reclassified_daily_activity_impairment$time_in_weeks)
dataframe_sorted_and_reclassified_daily_activity_impairment$time_in_months <- as.numeric(dataframe_sorted_and_reclassified_daily_activity_impairment$time_in_months)
dataframe_sorted_and_reclassified_daily_activity_impairment$time_in_years <- as.numeric(dataframe_sorted_and_reclassified_daily_activity_impairment$time_in_years)
dataframe_sorted_and_reclassified_daily_activity_impairment$last_known_smoking_status <- as.factor(dataframe_sorted_and_reclassified_daily_activity_impairment$last_known_smoking_status)
dataframe_sorted_and_reclassified_daily_activity_impairment$last_known_vaping_status <- as.factor(dataframe_sorted_and_reclassified_daily_activity_impairment$last_known_vaping_status)
```

```{r, include=FALSE}
# Make sure that the reference level for treatment_reclassified is
# "Standard Non-High Cost Drug Treatment"
dataframe_sorted_and_reclassified_daily_activity_impairment$treatment_reclassified <-
  relevel(dataframe_sorted_and_reclassified_daily_activity_impairment$treatment_reclassified,
          ref = "Standard Non-High Cost Drug Treatment")

# Make sure that the reference level for hlba27status is "undiagnosed"
dataframe_sorted_and_reclassified_daily_activity_impairment$hlab27status <-
  relevel(dataframe_sorted_and_reclassified_daily_activity_impairment$hlab27status,
          ref = "undiagnosed")

# Make sure that the reference level for diagnosis is "Axial SpA- nr-axSpA"
dataframe_sorted_and_reclassified_daily_activity_impairment$diagnosis <-
  relevel(dataframe_sorted_and_reclassified_daily_activity_impairment$diagnosis,
          ref = "Axial SpA- AS")

# Make sure that the reference level for treatment_order is 1
dataframe_sorted_and_reclassified_daily_activity_impairment$treatment_order <-
  relevel(dataframe_sorted_and_reclassified_daily_activity_impairment$treatment_order,
          ref = 1)

# Make sure that the reference level for last_known_smoking_status is
# "no information"
dataframe_sorted_and_reclassified_daily_activity_impairment$last_known_smoking_status <-
  relevel(dataframe_sorted_and_reclassified_daily_activity_impairment$last_known_smoking_status,
          ref = "no information")

# Make sure that the reference level for last_known_vaping_status is
# "no information"
dataframe_sorted_and_reclassified_daily_activity_impairment$last_known_vaping_status <-
  relevel(dataframe_sorted_and_reclassified_daily_activity_impairment$last_known_vaping_status,
          ref = "no information")
```

# lme4 code for treatment and diagnosis: Daily Activity Impairment

```{r, include=TRUE}
model_treatment_diagnosis_daily_activity_impairment_full <- lmer(
  daily_activity_impairment ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified * diagnosis +
    time_in_years + (time_in_years | ttas_id),
                     data = dataframe_sorted_and_reclassified_daily_activity_impairment,
                     control = lmerControl(optimizer = "bobyqa",
                                           optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
model_treatment_diagnosis_daily_activity_impairment_reduced <- lmer(
  daily_activity_impairment ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified +
    time_in_years + (time_in_years | ttas_id),
                      data = dataframe_sorted_and_reclassified_daily_activity_impairment,
                      control = lmerControl(optimizer = "bobyqa",
                                            optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
print(summary(model_treatment_diagnosis_daily_activity_impairment_full, corr = FALSE))
```

```{r, include=TRUE}
print(summary(model_treatment_diagnosis_daily_activity_impairment_reduced, corr = FALSE))
```

```{r, include=TRUE}
anova(model_treatment_diagnosis_daily_activity_impairment_full,
      model_treatment_diagnosis_daily_activity_impairment_reduced)
```

# lme4 code for treatment and gender: Daily Activity Impairment

```{r, include=TRUE}
model_treatment_gender_daily_activity_impairment_full <- lmer(
  daily_activity_impairment ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified * gender +
    time_in_years + (time_in_years | ttas_id),
                     data = dataframe_sorted_and_reclassified_daily_activity_impairment,
                     control = lmerControl(optimizer = "bobyqa",
                                           optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
model_treatment_gender_daily_activity_impairment_reduced <- lmer(
  daily_activity_impairment ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified +
    time_in_years + (time_in_years | ttas_id),
                      data = dataframe_sorted_and_reclassified_daily_activity_impairment,
                      control = lmerControl(optimizer = "bobyqa",
                                            optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
print(summary(model_treatment_gender_daily_activity_impairment_full, corr = FALSE))
```

```{r, include=TRUE}
print(summary(model_treatment_gender_daily_activity_impairment_reduced, corr = FALSE))
```

```{r, include=TRUE}
anova(model_treatment_gender_daily_activity_impairment_full,
      model_treatment_gender_daily_activity_impairment_reduced)
```

# Presenteeism

```{r, include=FALSE}
# Presenteeism only
# General longitudinal analysis for those with and without drugs
dataframe_sorted_presenteeism <- dataframe_sorted %>%
  filter(!is.na(presenteeism)) %>%
      select(ttas_id, gender, hlab27status, age_at_prom, diagnosis, treatment, last_known_smoking_status, last_known_vaping_status, treatment_order, date, stop_date_for_period_date_format, overall_treatment_duration_in_days, treatment_window_weekly_time, time_in_days, time_in_weeks, time_in_months, time_in_years, presenteeism)

write.csv(dataframe_sorted_presenteeism, "temp_dataframe_after_dataframe_sorted_for_analysis_presenteeism.csv", row.names = FALSE)

# Ignore if there is only one instance of row per treatment_period_unique_identifier in each ttas_id
dataframe_sorted_presenteeism <- dataframe_sorted_presenteeism %>%
  group_by(ttas_id, treatment_order) %>%
  filter(n() > 1) %>% # Keep only groups with more than one row after filtering out NAs
  ungroup()

write.csv(dataframe_sorted_presenteeism, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered.csv", row.names = FALSE)

# Reclassify the drugs
dataframe_sorted_and_reclassified_presenteeism <- dataframe_sorted_presenteeism %>%
  mutate(treatment_reclassified = case_when(
    treatment %in% c("Amgevita", "Humira", "Imraldi", "Yuflyma", "Benepali", "Enbrel", "Simponi", "Remicade", "Remsima", "Cimzia") ~ "Anti-TNF",
    treatment %in% c("Cosentyx", "Taltz", "Bimzelx") ~ "Anti-IL17",
    treatment %in% c("Rinvoq", "Xeljanz") ~ "JAK Inhibitor",
    treatment %in% c("Mabthera", "RoActemra", "Stelara", "Otezla") ~ "drop",
    treatment == "standard_non-high_cost_drug_treatment" ~ "Standard Non-High Cost Drug Treatment",
    TRUE ~ treatment  # Keep original treatment value if no match
  ))

write.csv(dataframe_sorted_and_reclassified_presenteeism, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered_with_treatment_category_presenteeism.csv", row.names = FALSE)

# If diagnosis is "Undifferentiated spondyloarthritis (uSpA) (17 ttas_id)" and "Axial SpA- No subgroup" (1 ttas_id), remove it as most of them are on standard treatment and is their representation is limited
dataframe_sorted_and_reclassified_presenteeism <- dataframe_sorted_and_reclassified_presenteeism %>%
  filter(diagnosis != "Undifferentiated spondyloarthritis (uSpA)" & diagnosis != "Axial SpA- No subgroup")

write.csv(dataframe_sorted_and_reclassified_presenteeism, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered_with_treatment_category_and_diagnosis_presenteeism.csv", row.names = FALSE)

# If treatment_reclassified is "drop", remove the row
dataframe_sorted_and_reclassified_presenteeism <- dataframe_sorted_and_reclassified_presenteeism %>%
  filter(treatment_reclassified != "drop")

write.csv(dataframe_sorted_and_reclassified_presenteeism, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered_with_treatment_category_and_diagnosis_and_treatment_reclassified_presenteeism.csv", row.names = FALSE)
```

```{r, include=FALSE}
# Ensure that dataframe_sorted_and_reclassified_presenteeism has the correct data types
dataframe_sorted_and_reclassified_presenteeism$ttas_id <- as.factor(dataframe_sorted_and_reclassified_presenteeism$ttas_id)
dataframe_sorted_and_reclassified_presenteeism$gender <- as.factor(dataframe_sorted_and_reclassified_presenteeism$gender)
dataframe_sorted_and_reclassified_presenteeism$hlab27status <- as.factor(dataframe_sorted_and_reclassified_presenteeism$hlab27status)
dataframe_sorted_and_reclassified_presenteeism$age_at_prom <- as.numeric(dataframe_sorted_and_reclassified_presenteeism$age_at_prom)
dataframe_sorted_and_reclassified_presenteeism$diagnosis <- as.factor(dataframe_sorted_and_reclassified_presenteeism$diagnosis)
dataframe_sorted_and_reclassified_presenteeism$treatment <- as.factor(dataframe_sorted_and_reclassified_presenteeism$treatment)
dataframe_sorted_and_reclassified_presenteeism$treatment_order <- as.factor(dataframe_sorted_and_reclassified_presenteeism$treatment_order)
dataframe_sorted_and_reclassified_presenteeism$treatment_reclassified <- as.factor(dataframe_sorted_and_reclassified_presenteeism$treatment_reclassified)
dataframe_sorted_and_reclassified_presenteeism$date <- as.Date(dataframe_sorted_and_reclassified_presenteeism$date)
dataframe_sorted_and_reclassified_presenteeism$stop_date_for_period_date_format <- as.Date(dataframe_sorted_and_reclassified_presenteeism$stop_date_for_period_date_format)
dataframe_sorted_and_reclassified_presenteeism$overall_treatment_duration_in_days <- as.numeric(dataframe_sorted_and_reclassified_presenteeism$overall_treatment_duration_in_days)
dataframe_sorted_and_reclassified_presenteeism$treatment_window_weekly_time <- as.numeric(dataframe_sorted_and_reclassified_presenteeism$treatment_window_weekly_time)
dataframe_sorted_and_reclassified_presenteeism$presenteeism <- as.numeric(dataframe_sorted_and_reclassified_presenteeism$presenteeism)
dataframe_sorted_and_reclassified_presenteeism$time_in_days <- as.numeric(dataframe_sorted_and_reclassified_presenteeism$time_in_days)
dataframe_sorted_and_reclassified_presenteeism$time_in_weeks <- as.numeric(dataframe_sorted_and_reclassified_presenteeism$time_in_weeks)
dataframe_sorted_and_reclassified_presenteeism$time_in_months <- as.numeric(dataframe_sorted_and_reclassified_presenteeism$time_in_months)
dataframe_sorted_and_reclassified_presenteeism$time_in_years <- as.numeric(dataframe_sorted_and_reclassified_presenteeism$time_in_years)
dataframe_sorted_and_reclassified_presenteeism$last_known_smoking_status <- as.factor(dataframe_sorted_and_reclassified_presenteeism$last_known_smoking_status)
dataframe_sorted_and_reclassified_presenteeism$last_known_vaping_status <- as.factor(dataframe_sorted_and_reclassified_presenteeism$last_known_vaping_status)
```

```{r, include=FALSE}
# Make sure that the reference level for treatment_reclassified is
# "Standard Non-High Cost Drug Treatment"
dataframe_sorted_and_reclassified_presenteeism$treatment_reclassified <-
  relevel(dataframe_sorted_and_reclassified_presenteeism$treatment_reclassified,
          ref = "Standard Non-High Cost Drug Treatment")

# Make sure that the reference level for hlba27status is "undiagnosed"
dataframe_sorted_and_reclassified_presenteeism$hlab27status <-
  relevel(dataframe_sorted_and_reclassified_presenteeism$hlab27status,
          ref = "undiagnosed")

# Make sure that the reference level for diagnosis is "Axial SpA- nr-axSpA"
dataframe_sorted_and_reclassified_presenteeism$diagnosis <-
  relevel(dataframe_sorted_and_reclassified_presenteeism$diagnosis,
          ref = "Axial SpA- AS")

# Make sure that the reference level for treatment_order is 1
dataframe_sorted_and_reclassified_presenteeism$treatment_order <-
  relevel(dataframe_sorted_and_reclassified_presenteeism$treatment_order,
          ref = 1)

# Make sure that the reference level for last_known_smoking_status is
# "no information"
dataframe_sorted_and_reclassified_presenteeism$last_known_smoking_status <-
  relevel(dataframe_sorted_and_reclassified_presenteeism$last_known_smoking_status,
          ref = "no information")

# Make sure that the reference level for last_known_vaping_status is
# "no information"
dataframe_sorted_and_reclassified_presenteeism$last_known_vaping_status <-
  relevel(dataframe_sorted_and_reclassified_presenteeism$last_known_vaping_status,
          ref = "no information")
```

# lme4 code for treatment and diagnosis: Presenteeism

```{r, include=TRUE}
model_treatment_diagnosis_presenteeism_full <- lmer(
  presenteeism ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified * diagnosis +
    time_in_years + (time_in_years | ttas_id),
                     data = dataframe_sorted_and_reclassified_presenteeism,
                     control = lmerControl(optimizer = "bobyqa",
                                           optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
model_treatment_diagnosis_presenteeism_reduced <- lmer(
  presenteeism ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified +
    time_in_years + (time_in_years | ttas_id),
                      data = dataframe_sorted_and_reclassified_presenteeism,
                      control = lmerControl(optimizer = "bobyqa",
                                            optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
print(summary(model_treatment_diagnosis_presenteeism_full, corr = FALSE))
```

```{r, include=TRUE}
print(summary(model_treatment_diagnosis_presenteeism_reduced, corr = FALSE))
```

```{r, include=TRUE}
anova(model_treatment_diagnosis_presenteeism_full,
      model_treatment_diagnosis_presenteeism_reduced)
```

# lme4 code for treatment and gender: Presenteeism

```{r, include=TRUE}
model_treatment_gender_presenteeism_full <- lmer(
  presenteeism ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified * gender +
    time_in_years + (time_in_years | ttas_id),
                     data = dataframe_sorted_and_reclassified_presenteeism,
                     control = lmerControl(optimizer = "bobyqa",
                                           optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
model_treatment_gender_presenteeism_reduced <- lmer(
  presenteeism ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified +
    time_in_years + (time_in_years | ttas_id),
                      data = dataframe_sorted_and_reclassified_presenteeism,
                      control = lmerControl(optimizer = "bobyqa",
                                            optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
print(summary(model_treatment_gender_presenteeism_full, corr = FALSE))
```

```{r, include=TRUE}
print(summary(model_treatment_gender_presenteeism_reduced, corr = FALSE))
```

```{r, include=TRUE}
anova(model_treatment_gender_presenteeism_full,
      model_treatment_gender_presenteeism_reduced)
```

# Absenteeism

```{r, include=FALSE}
# Absenteeism only
# General longitudinal analysis for those with and without drugs
dataframe_sorted_absenteeism <- dataframe_sorted %>%
  filter(!is.na(absenteeism)) %>%
    select(ttas_id, gender, hlab27status, age_at_prom, diagnosis, treatment, last_known_smoking_status, last_known_vaping_status, treatment_order, date, stop_date_for_period_date_format, overall_treatment_duration_in_days, treatment_window_weekly_time, time_in_days, time_in_weeks, time_in_months, time_in_years, absenteeism)

write.csv(dataframe_sorted_absenteeism, "temp_dataframe_after_dataframe_sorted_for_analysis_absenteeism.csv", row.names = FALSE)

# Ignore if there is only one instance of row per treatment_period_unique_identifier in each ttas_id
dataframe_sorted_absenteeism <- dataframe_sorted_absenteeism %>%
  group_by(ttas_id, treatment_order) %>%
  filter(n() > 1) %>% # Keep only groups with more than one row after filtering out NAs
  ungroup()

write.csv(dataframe_sorted_absenteeism, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered.csv", row.names = FALSE)

# Reclassify the drugs
dataframe_sorted_and_reclassified_absenteeism <- dataframe_sorted_absenteeism %>%
  mutate(treatment_reclassified = case_when(
    treatment %in% c("Amgevita", "Humira", "Imraldi", "Yuflyma", "Benepali", "Enbrel", "Simponi", "Remicade", "Remsima", "Cimzia") ~ "Anti-TNF",
    treatment %in% c("Cosentyx", "Taltz", "Bimzelx") ~ "Anti-IL17",
    treatment %in% c("Rinvoq", "Xeljanz") ~ "JAK Inhibitor",
    treatment %in% c("Mabthera", "RoActemra", "Stelara", "Otezla") ~ "drop",
    treatment == "standard_non-high_cost_drug_treatment" ~ "Standard Non-High Cost Drug Treatment",
    TRUE ~ treatment  # Keep original treatment value if no match
  ))

write.csv(dataframe_sorted_and_reclassified_absenteeism, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered_with_treatment_category_absenteeism.csv", row.names = FALSE)

# If diagnosis is "Undifferentiated spondyloarthritis (uSpA) (17 ttas_id)" and "Axial SpA- No subgroup" (1 ttas_id), remove it as most of them are on standard treatment and is their representation is limited
dataframe_sorted_and_reclassified_absenteeism <- dataframe_sorted_and_reclassified_absenteeism %>%
  filter(diagnosis != "Undifferentiated spondyloarthritis (uSpA)" & diagnosis != "Axial SpA- No subgroup")

write.csv(dataframe_sorted_and_reclassified_absenteeism, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered_with_treatment_category_and_diagnosis_absenteeism.csv", row.names = FALSE)

# If treatment_reclassified is "drop", remove the row
dataframe_sorted_and_reclassified_absenteeism <- dataframe_sorted_and_reclassified_absenteeism %>%
  filter(treatment_reclassified != "drop")

write.csv(dataframe_sorted_and_reclassified_absenteeism, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered_with_treatment_category_and_diagnosis_and_treatment_reclassified_absenteeism.csv", row.names = FALSE)
```

```{r, include=FALSE}
# Ensure that dataframe_sorted_and_reclassified_absenteeism has the correct data types
dataframe_sorted_and_reclassified_absenteeism$ttas_id <- as.factor(dataframe_sorted_and_reclassified_absenteeism$ttas_id)
dataframe_sorted_and_reclassified_absenteeism$gender <- as.factor(dataframe_sorted_and_reclassified_absenteeism$gender)
dataframe_sorted_and_reclassified_absenteeism$hlab27status <- as.factor(dataframe_sorted_and_reclassified_absenteeism$hlab27status)
dataframe_sorted_and_reclassified_absenteeism$age_at_prom <- as.numeric(dataframe_sorted_and_reclassified_absenteeism$age_at_prom)
dataframe_sorted_and_reclassified_absenteeism$diagnosis <- as.factor(dataframe_sorted_and_reclassified_absenteeism$diagnosis)
dataframe_sorted_and_reclassified_absenteeism$treatment <- as.factor(dataframe_sorted_and_reclassified_absenteeism$treatment)
dataframe_sorted_and_reclassified_absenteeism$treatment_order <- as.factor(dataframe_sorted_and_reclassified_absenteeism$treatment_order)
dataframe_sorted_and_reclassified_absenteeism$treatment_reclassified <- as.factor(dataframe_sorted_and_reclassified_absenteeism$treatment_reclassified)
dataframe_sorted_and_reclassified_absenteeism$date <- as.Date(dataframe_sorted_and_reclassified_absenteeism$date)
dataframe_sorted_and_reclassified_absenteeism$stop_date_for_period_date_format <- as.Date(dataframe_sorted_and_reclassified_absenteeism$stop_date_for_period_date_format)
dataframe_sorted_and_reclassified_absenteeism$overall_treatment_duration_in_days <- as.numeric(dataframe_sorted_and_reclassified_absenteeism$overall_treatment_duration_in_days)
dataframe_sorted_and_reclassified_absenteeism$treatment_window_weekly_time <- as.numeric(dataframe_sorted_and_reclassified_absenteeism$treatment_window_weekly_time)
dataframe_sorted_and_reclassified_absenteeism$absenteeism <- as.numeric(dataframe_sorted_and_reclassified_absenteeism$absenteeism)
dataframe_sorted_and_reclassified_absenteeism$time_in_days <- as.numeric(dataframe_sorted_and_reclassified_absenteeism$time_in_days)
dataframe_sorted_and_reclassified_absenteeism$time_in_weeks <- as.numeric(dataframe_sorted_and_reclassified_absenteeism$time_in_weeks)
dataframe_sorted_and_reclassified_absenteeism$time_in_months <- as.numeric(dataframe_sorted_and_reclassified_absenteeism$time_in_months)
dataframe_sorted_and_reclassified_absenteeism$time_in_years <- as.numeric(dataframe_sorted_and_reclassified_absenteeism$time_in_years)
dataframe_sorted_and_reclassified_absenteeism$last_known_smoking_status <- as.factor(dataframe_sorted_and_reclassified_absenteeism$last_known_smoking_status)
dataframe_sorted_and_reclassified_absenteeism$last_known_vaping_status <- as.factor(dataframe_sorted_and_reclassified_absenteeism$last_known_vaping_status)
```

```{r, include=FALSE}
# Make sure that the reference level for treatment_reclassified is
# "Standard Non-High Cost Drug Treatment"
dataframe_sorted_and_reclassified_absenteeism$treatment_reclassified <-
  relevel(dataframe_sorted_and_reclassified_absenteeism$treatment_reclassified,
          ref = "Standard Non-High Cost Drug Treatment")

# Make sure that the reference level for hlba27status is "undiagnosed"
dataframe_sorted_and_reclassified_absenteeism$hlab27status <-
  relevel(dataframe_sorted_and_reclassified_absenteeism$hlab27status,
          ref = "undiagnosed")

# Make sure that the reference level for diagnosis is "Axial SpA- nr-axSpA"
dataframe_sorted_and_reclassified_absenteeism$diagnosis <-
  relevel(dataframe_sorted_and_reclassified_absenteeism$diagnosis,
          ref = "Axial SpA- AS")

# Make sure that the reference level for treatment_order is 1
dataframe_sorted_and_reclassified_absenteeism$treatment_order <-
  relevel(dataframe_sorted_and_reclassified_absenteeism$treatment_order,
          ref = 1)

# Make sure that the reference level for last_known_smoking_status is
# "no information"
dataframe_sorted_and_reclassified_absenteeism$last_known_smoking_status <-
  relevel(dataframe_sorted_and_reclassified_absenteeism$last_known_smoking_status,
          ref = "no information")

# Make sure that the reference level for last_known_vaping_status is
# "no information"
dataframe_sorted_and_reclassified_absenteeism$last_known_vaping_status <-
  relevel(dataframe_sorted_and_reclassified_absenteeism$last_known_vaping_status,
          ref = "no information")
```

# lme4 code for treatment and diagnosis: Absenteeism

```{r, include=TRUE}
model_treatment_diagnosis_absenteeism_full <- lmer(
  absenteeism ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified * diagnosis +
    time_in_years + (time_in_years | ttas_id),
                     data = dataframe_sorted_and_reclassified_absenteeism,
                     control = lmerControl(optimizer = "bobyqa",
                                           optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
model_treatment_diagnosis_absenteeism_reduced <- lmer(
  absenteeism ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified +
    time_in_years + (time_in_years | ttas_id),
                      data = dataframe_sorted_and_reclassified_absenteeism,
                      control = lmerControl(optimizer = "bobyqa",
                                            optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
print(summary(model_treatment_diagnosis_absenteeism_full, corr = FALSE))
```

```{r, include=TRUE}
print(summary(model_treatment_diagnosis_absenteeism_reduced, corr = FALSE))
```

```{r, include=TRUE}
anova(model_treatment_diagnosis_absenteeism_full,
      model_treatment_diagnosis_absenteeism_reduced)
```

# lme4 code for treatment and gender: Absenteeism

```{r, include=TRUE}
model_treatment_gender_absenteeism_full <- lmer(
  absenteeism ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified * gender +
    time_in_years + (time_in_years | ttas_id),
                     data = dataframe_sorted_and_reclassified_absenteeism,
                     control = lmerControl(optimizer = "bobyqa",
                                           optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
model_treatment_gender_absenteeism_reduced <- lmer(
  absenteeism ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified +
    time_in_years + (time_in_years | ttas_id),
                      data = dataframe_sorted_and_reclassified_absenteeism,
                      control = lmerControl(optimizer = "bobyqa",
                                            optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
print(summary(model_treatment_gender_absenteeism_full, corr = FALSE))
```

```{r, include=TRUE}
print(summary(model_treatment_gender_absenteeism_reduced, corr = FALSE))
```

```{r, include=TRUE}
anova(model_treatment_gender_absenteeism_full,
      model_treatment_gender_absenteeism_reduced)
```

# FACIT

```{r, include=FALSE}
# FACIT only
# General longitudinal analysis for those with and without drugs
dataframe_sorted_facit <- dataframe_sorted %>%
  filter(!is.na(facit)) %>%
    select(ttas_id, gender, hlab27status, age_at_prom, diagnosis, treatment, last_known_smoking_status, last_known_vaping_status, treatment_order, date, stop_date_for_period_date_format, overall_treatment_duration_in_days, treatment_window_weekly_time, time_in_days, time_in_weeks, time_in_months, time_in_years, facit)

write.csv(dataframe_sorted_facit, "temp_dataframe_after_dataframe_sorted_for_analysis_facit.csv", row.names = FALSE)

# Ignore if there is only one instance of row per treatment_period_unique_identifier in each ttas_id
dataframe_sorted_facit <- dataframe_sorted_facit %>%
  group_by(ttas_id, treatment_order) %>%
  filter(n() > 1) %>% # Keep only groups with more than one row after filtering out NAs
  ungroup()

write.csv(dataframe_sorted_facit, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered.csv", row.names = FALSE)

# Reclassify the drugs
dataframe_sorted_and_reclassified_facit <- dataframe_sorted_facit %>%
  mutate(treatment_reclassified = case_when(
    treatment %in% c("Amgevita", "Humira", "Imraldi", "Yuflyma", "Benepali", "Enbrel", "Simponi", "Remicade", "Remsima", "Cimzia") ~ "Anti-TNF",
    treatment %in% c("Cosentyx", "Taltz", "Bimzelx") ~ "Anti-IL17",
    treatment %in% c("Rinvoq", "Xeljanz") ~ "JAK Inhibitor",
    treatment %in% c("Mabthera", "RoActemra", "Stelara", "Otezla") ~ "drop",
    treatment == "standard_non-high_cost_drug_treatment" ~ "Standard Non-High Cost Drug Treatment",
    TRUE ~ treatment  # Keep original treatment value if no match
  ))

write.csv(dataframe_sorted_and_reclassified_facit, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered_with_treatment_category_facit.csv", row.names = FALSE)

# If diagnosis is "Undifferentiated spondyloarthritis (uSpA) (17 ttas_id)" and "Axial SpA- No subgroup" (1 ttas_id), remove it as most of them are on standard treatment and is their representation is limited
dataframe_sorted_and_reclassified_facit <- dataframe_sorted_and_reclassified_facit %>%
  filter(diagnosis != "Undifferentiated spondyloarthritis (uSpA)" & diagnosis != "Axial SpA- No subgroup")

write.csv(dataframe_sorted_and_reclassified_facit, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered_with_treatment_category_and_diagnosis_facit.csv", row.names = FALSE)

# If treatment_reclassified is "drop", remove the row
dataframe_sorted_and_reclassified_facit <- dataframe_sorted_and_reclassified_facit %>%
  filter(treatment_reclassified != "drop")

write.csv(dataframe_sorted_and_reclassified_facit, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered_with_treatment_category_and_diagnosis_and_treatment_reclassified_facit.csv", row.names = FALSE)
```

```{r, include=FALSE}
# Ensure that dataframe_sorted_and_reclassified_facit has the correct data types
dataframe_sorted_and_reclassified_facit$ttas_id <- as.factor(dataframe_sorted_and_reclassified_facit$ttas_id)
dataframe_sorted_and_reclassified_facit$gender <- as.factor(dataframe_sorted_and_reclassified_facit$gender)
dataframe_sorted_and_reclassified_facit$hlab27status <- as.factor(dataframe_sorted_and_reclassified_facit$hlab27status)
dataframe_sorted_and_reclassified_facit$age_at_prom <- as.numeric(dataframe_sorted_and_reclassified_facit$age_at_prom)
dataframe_sorted_and_reclassified_facit$diagnosis <- as.factor(dataframe_sorted_and_reclassified_facit$diagnosis)
dataframe_sorted_and_reclassified_facit$treatment <- as.factor(dataframe_sorted_and_reclassified_facit$treatment)
dataframe_sorted_and_reclassified_facit$treatment_order <- as.factor(dataframe_sorted_and_reclassified_facit$treatment_order)
dataframe_sorted_and_reclassified_facit$treatment_reclassified <- as.factor(dataframe_sorted_and_reclassified_facit$treatment_reclassified)
dataframe_sorted_and_reclassified_facit$date <- as.Date(dataframe_sorted_and_reclassified_facit$date)
dataframe_sorted_and_reclassified_facit$stop_date_for_period_date_format <- as.Date(dataframe_sorted_and_reclassified_facit$stop_date_for_period_date_format)
dataframe_sorted_and_reclassified_facit$overall_treatment_duration_in_days <- as.numeric(dataframe_sorted_and_reclassified_facit$overall_treatment_duration_in_days)
dataframe_sorted_and_reclassified_facit$treatment_window_weekly_time <- as.numeric(dataframe_sorted_and_reclassified_facit$treatment_window_weekly_time)
dataframe_sorted_and_reclassified_facit$facit <- as.numeric(dataframe_sorted_and_reclassified_facit$facit)
dataframe_sorted_and_reclassified_facit$time_in_days <- as.numeric(dataframe_sorted_and_reclassified_facit$time_in_days)
dataframe_sorted_and_reclassified_facit$time_in_weeks <- as.numeric(dataframe_sorted_and_reclassified_facit$time_in_weeks)
dataframe_sorted_and_reclassified_facit$time_in_months <- as.numeric(dataframe_sorted_and_reclassified_facit$time_in_months)
dataframe_sorted_and_reclassified_facit$time_in_years <- as.numeric(dataframe_sorted_and_reclassified_facit$time_in_years)
dataframe_sorted_and_reclassified_facit$last_known_smoking_status <- as.factor(dataframe_sorted_and_reclassified_facit$last_known_smoking_status)
dataframe_sorted_and_reclassified_facit$last_known_vaping_status <- as.factor(dataframe_sorted_and_reclassified_facit$last_known_vaping_status)
```

```{r, include=FALSE}
# Make sure that the reference level for treatment_reclassified is
# "Standard Non-High Cost Drug Treatment"
dataframe_sorted_and_reclassified_facit$treatment_reclassified <-
  relevel(dataframe_sorted_and_reclassified_facit$treatment_reclassified,
          ref = "Standard Non-High Cost Drug Treatment")

# Make sure that the reference level for hlba27status is "undiagnosed"
dataframe_sorted_and_reclassified_facit$hlab27status <-
  relevel(dataframe_sorted_and_reclassified_facit$hlab27status,
          ref = "undiagnosed")

# Make sure that the reference level for diagnosis is "Axial SpA- nr-axSpA"
dataframe_sorted_and_reclassified_facit$diagnosis <-
  relevel(dataframe_sorted_and_reclassified_facit$diagnosis,
          ref = "Axial SpA- AS")

# Make sure that the reference level for treatment_order is 1
dataframe_sorted_and_reclassified_facit$treatment_order <-
  relevel(dataframe_sorted_and_reclassified_facit$treatment_order,
          ref = 1)

# Make sure that the reference level for last_known_smoking_status is
# "no information"
dataframe_sorted_and_reclassified_facit$last_known_smoking_status <-
  relevel(dataframe_sorted_and_reclassified_facit$last_known_smoking_status,
          ref = "no information")

# Make sure that the reference level for last_known_vaping_status is
# "no information"
dataframe_sorted_and_reclassified_facit$last_known_vaping_status <-
  relevel(dataframe_sorted_and_reclassified_facit$last_known_vaping_status,
          ref = "no information")
```

# lme4 code for treatment and diagnosis: FACIT

```{r, include=TRUE}
model_treatment_diagnosis_facit_full <- lmer(
  facit ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified * diagnosis +
    time_in_years + (time_in_years | ttas_id),
                     data = dataframe_sorted_and_reclassified_facit,
                     control = lmerControl(optimizer = "bobyqa",
                                           optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
model_treatment_diagnosis_facit_reduced <- lmer(
  facit ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified +
    time_in_years + (time_in_years | ttas_id),
                      data = dataframe_sorted_and_reclassified_facit,
                      control = lmerControl(optimizer = "bobyqa",
                                            optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
print(summary(model_treatment_diagnosis_facit_full, corr = FALSE))
```

```{r, include=TRUE}
print(summary(model_treatment_diagnosis_facit_reduced, corr = FALSE))
```

```{r, include=TRUE}
anova(model_treatment_diagnosis_facit_full,
      model_treatment_diagnosis_facit_reduced)
```

# lme4 code for treatment and gender: FACIT

```{r, include=TRUE}
model_treatment_gender_facit_full <- lmer(
  facit ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified * gender +
    time_in_years + (time_in_years | ttas_id),
                     data = dataframe_sorted_and_reclassified_facit,
                     control = lmerControl(optimizer = "bobyqa",
                                           optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
model_treatment_gender_facit_reduced <- lmer(
  facit ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified +
    time_in_years + (time_in_years | ttas_id),
                      data = dataframe_sorted_and_reclassified_facit,
                      control = lmerControl(optimizer = "bobyqa",
                                            optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
print(summary(model_treatment_gender_facit_full, corr = FALSE))
```

```{r, include=TRUE}
print(summary(model_treatment_gender_facit_reduced, corr = FALSE))
```

```{r, include=TRUE}
anova(model_treatment_gender_facit_full,
      model_treatment_gender_facit_reduced)
```

# Margolis

```{r, include=FALSE}
# Margolis only
# General longitudinal analysis for those with and without drugs
dataframe_sorted_margolis <- dataframe_sorted %>%
  filter(!is.na(margolis)) %>%
    select(ttas_id, gender, hlab27status, age_at_prom, diagnosis, treatment, last_known_smoking_status, last_known_vaping_status, treatment_order, date, stop_date_for_period_date_format, overall_treatment_duration_in_days, treatment_window_weekly_time, time_in_days, time_in_weeks, time_in_months, time_in_years, margolis)

write.csv(dataframe_sorted_margolis, "temp_dataframe_after_dataframe_sorted_for_analysis_margolis.csv", row.names = FALSE)

# Ignore if there is only one instance of row per treatment_period_unique_identifier in each ttas_id
dataframe_sorted_margolis <- dataframe_sorted_margolis %>%
  group_by(ttas_id, treatment_order) %>%
  filter(n() > 1) %>% # Keep only groups with more than one row after filtering out NAs
  ungroup()

write.csv(dataframe_sorted_margolis, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered.csv", row.names = FALSE)

# Reclassify the drugs
dataframe_sorted_and_reclassified_margolis <- dataframe_sorted_margolis %>%
  mutate(treatment_reclassified = case_when(
    treatment %in% c("Amgevita", "Humira", "Imraldi", "Yuflyma", "Benepali", "Enbrel", "Simponi", "Remicade", "Remsima", "Cimzia") ~ "Anti-TNF",
    treatment %in% c("Cosentyx", "Taltz", "Bimzelx") ~ "Anti-IL17",
    treatment %in% c("Rinvoq", "Xeljanz") ~ "JAK Inhibitor",
    treatment %in% c("Mabthera", "RoActemra", "Stelara", "Otezla") ~ "drop",
    treatment == "standard_non-high_cost_drug_treatment" ~ "Standard Non-High Cost Drug Treatment",
    TRUE ~ treatment  # Keep original treatment value if no match
  ))

write.csv(dataframe_sorted_and_reclassified_margolis, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered_with_treatment_category_margolis.csv", row.names = FALSE)

# If diagnosis is "Undifferentiated spondyloarthritis (uSpA) (17 ttas_id)" and "Axial SpA- No subgroup" (1 ttas_id), remove it as most of them are on standard treatment and is their representation is limited
dataframe_sorted_and_reclassified_margolis <- dataframe_sorted_and_reclassified_margolis %>%
  filter(diagnosis != "Undifferentiated spondyloarthritis (uSpA)" & diagnosis != "Axial SpA- No subgroup")

write.csv(dataframe_sorted_and_reclassified_margolis, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered_with_treatment_category_and_diagnosis_margolis.csv", row.names = FALSE)

# If treatment_reclassified is "drop", remove the row
dataframe_sorted_and_reclassified_margolis <- dataframe_sorted_and_reclassified_margolis %>%
  filter(treatment_reclassified != "drop")

write.csv(dataframe_sorted_and_reclassified_margolis, "temp_dataframe_after_dataframe_sorted_for_analysis_filtered_with_treatment_category_and_diagnosis_and_treatment_reclassified_margolis.csv", row.names = FALSE)
```

```{r, include=FALSE}
# Ensure that dataframe_sorted_and_reclassified_margolis has the correct data types
dataframe_sorted_and_reclassified_margolis$ttas_id <- as.factor(dataframe_sorted_and_reclassified_margolis$ttas_id)
dataframe_sorted_and_reclassified_margolis$gender <- as.factor(dataframe_sorted_and_reclassified_margolis$gender)
dataframe_sorted_and_reclassified_margolis$hlab27status <- as.factor(dataframe_sorted_and_reclassified_margolis$hlab27status)
dataframe_sorted_and_reclassified_margolis$age_at_prom <- as.numeric(dataframe_sorted_and_reclassified_margolis$age_at_prom)
dataframe_sorted_and_reclassified_margolis$diagnosis <- as.factor(dataframe_sorted_and_reclassified_margolis$diagnosis)
dataframe_sorted_and_reclassified_margolis$treatment <- as.factor(dataframe_sorted_and_reclassified_margolis$treatment)
dataframe_sorted_and_reclassified_margolis$treatment_order <- as.factor(dataframe_sorted_and_reclassified_margolis$treatment_order)
dataframe_sorted_and_reclassified_margolis$treatment_reclassified <- as.factor(dataframe_sorted_and_reclassified_margolis$treatment_reclassified)
dataframe_sorted_and_reclassified_margolis$date <- as.Date(dataframe_sorted_and_reclassified_margolis$date)
dataframe_sorted_and_reclassified_margolis$stop_date_for_period_date_format <- as.Date(dataframe_sorted_and_reclassified_margolis$stop_date_for_period_date_format)
dataframe_sorted_and_reclassified_margolis$overall_treatment_duration_in_days <- as.numeric(dataframe_sorted_and_reclassified_margolis$overall_treatment_duration_in_days)
dataframe_sorted_and_reclassified_margolis$treatment_window_weekly_time <- as.numeric(dataframe_sorted_and_reclassified_margolis$treatment_window_weekly_time)
dataframe_sorted_and_reclassified_margolis$margolis <- as.numeric(dataframe_sorted_and_reclassified_margolis$margolis)
dataframe_sorted_and_reclassified_margolis$time_in_days <- as.numeric(dataframe_sorted_and_reclassified_margolis$time_in_days)
dataframe_sorted_and_reclassified_margolis$time_in_weeks <- as.numeric(dataframe_sorted_and_reclassified_margolis$time_in_weeks)
dataframe_sorted_and_reclassified_margolis$time_in_months <- as.numeric(dataframe_sorted_and_reclassified_margolis$time_in_months)
dataframe_sorted_and_reclassified_margolis$time_in_years <- as.numeric(dataframe_sorted_and_reclassified_margolis$time_in_years)
dataframe_sorted_and_reclassified_margolis$last_known_smoking_status <- as.factor(dataframe_sorted_and_reclassified_margolis$last_known_smoking_status)
dataframe_sorted_and_reclassified_margolis$last_known_vaping_status <- as.factor(dataframe_sorted_and_reclassified_margolis$last_known_vaping_status)
```

```{r, include=FALSE}
# Make sure that the reference level for treatment_reclassified is
# "Standard Non-High Cost Drug Treatment"
dataframe_sorted_and_reclassified_margolis$treatment_reclassified <-
  relevel(dataframe_sorted_and_reclassified_margolis$treatment_reclassified,
          ref = "Standard Non-High Cost Drug Treatment")

# Make sure that the reference level for hlba27status is "undiagnosed"
dataframe_sorted_and_reclassified_margolis$hlab27status <-
  relevel(dataframe_sorted_and_reclassified_margolis$hlab27status,
          ref = "undiagnosed")

# Make sure that the reference level for diagnosis is "Axial SpA- nr-axSpA"
dataframe_sorted_and_reclassified_margolis$diagnosis <-
  relevel(dataframe_sorted_and_reclassified_margolis$diagnosis,
          ref = "Axial SpA- AS")

# Make sure that the reference level for treatment_order is 1
dataframe_sorted_and_reclassified_margolis$treatment_order <-
  relevel(dataframe_sorted_and_reclassified_margolis$treatment_order,
          ref = 1)

# Make sure that the reference level for last_known_smoking_status is
# "no information"
dataframe_sorted_and_reclassified_margolis$last_known_smoking_status <-
  relevel(dataframe_sorted_and_reclassified_margolis$last_known_smoking_status,
          ref = "no information")

# Make sure that the reference level for last_known_vaping_status is
# "no information"
dataframe_sorted_and_reclassified_margolis$last_known_vaping_status <-
  relevel(dataframe_sorted_and_reclassified_margolis$last_known_vaping_status,
          ref = "no information")
```

# lme4 code for treatment and diagnosis: Margolis

```{r, include=TRUE}
model_treatment_diagnosis_margolis_full <- lmer(
  margolis ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified * diagnosis +
    time_in_years + (time_in_years | ttas_id),
                     data = dataframe_sorted_and_reclassified_margolis,
                     control = lmerControl(optimizer = "bobyqa",
                                           optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
model_treatment_diagnosis_margolis_reduced <- lmer(
  margolis ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified +
    time_in_years + (time_in_years | ttas_id),
                      data = dataframe_sorted_and_reclassified_margolis,
                      control = lmerControl(optimizer = "bobyqa",
                                            optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
print(summary(model_treatment_diagnosis_margolis_full, corr = FALSE))
```

```{r, include=TRUE}
print(summary(model_treatment_diagnosis_margolis_reduced, corr = FALSE))
```

```{r, include=TRUE}
anova(model_treatment_diagnosis_margolis_full,
      model_treatment_diagnosis_margolis_reduced)
```

# lme4 code for treatment and gender: Margolis

```{r, include=TRUE}
model_treatment_gender_margolis_full <- lmer(
  margolis ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified * gender +
    time_in_years + (time_in_years | ttas_id),
                     data = dataframe_sorted_and_reclassified_margolis,
                     control = lmerControl(optimizer = "bobyqa",
                                           optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
model_treatment_gender_margolis_reduced <- lmer(
  margolis ~ gender + hlab27status + age_at_prom +
    diagnosis + treatment_order + last_known_smoking_status +
    last_known_vaping_status +  
    treatment_reclassified +
    time_in_years + (time_in_years | ttas_id),
                      data = dataframe_sorted_and_reclassified_margolis,
                      control = lmerControl(optimizer = "bobyqa",
                                            optCtrl = list(maxfun = 2e5)))
```

```{r, include=TRUE}
print(summary(model_treatment_gender_margolis_full, corr = FALSE))
```

```{r, include=TRUE}
print(summary(model_treatment_gender_margolis_reduced, corr = FALSE))
```

```{r, include=TRUE}
anova(model_treatment_gender_margolis_full,
      model_treatment_gender_margolis_reduced)
```